{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/ngx-print/bundles/ngx-print.umd.js"],"names":[],"mappings":"AAAA;oGAC2E;sFACL;4BACzD;0BACM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAsOL,AAKJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;SAUD;;;;;;;;;;;gDAOC","file":"ngx-print.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('ngx-print', ['exports', '@angular/core'], factory) :\n    (factory((global['ngx-print'] = {}),global.ng.core));\n}(this, (function (exports,core) { 'use strict';\n\n    /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation. All rights reserved.\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n    this file except in compliance with the License. You may obtain a copy of the\n    License at http://www.apache.org/licenses/LICENSE-2.0\n\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n    MERCHANTABLITY OR NON-INFRINGEMENT.\n\n    See the Apache Version 2.0 License for specific language governing permissions\n    and limitations under the License.\n    ***************************************************************************** */\n    function __values(o) {\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n        if (m)\n            return m.call(o);\n        return {\n            next: function () {\n                if (o && i >= o.length)\n                    o = void 0;\n                return { value: o && o[i++], done: !o };\n            }\n        };\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var NgxPrintDirective = /** @class */ (function () {\n        function NgxPrintDirective() {\n            this._printStyle = [];\n            /**\n             *\n             *\n             * \\@memberof NgxPrintDirective\n             */\n            this.useExistingCss = false;\n            /**\n             *\n             *\n             * @return html for the given tag\n             *\n             * \\@memberof NgxPrintDirective\n             */\n            this._styleSheetFile = '';\n        }\n        Object.defineProperty(NgxPrintDirective.prototype, \"printStyle\", {\n            /**\n             *\n             *\n             * @memberof NgxPrintDirective\n             */\n            set: /**\n             *\n             *\n             * \\@memberof NgxPrintDirective\n             * @param {?} values\n             * @return {?}\n             */ function (values) {\n                for (var key in values) {\n                    if (values.hasOwnProperty(key)) {\n                        this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\n                    }\n                }\n                this.returnStyleValues();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *\n         *\n         * @returns the string that create the stylesheet which will be injected\n         * later within <style></style> tag.\n         *\n         * -join/replace to transform an array objects to css-styled string\n         *\n         * @memberof NgxPrintDirective\n         */\n        /**\n         *\n         *\n         * \\@memberof NgxPrintDirective\n         * @return {?} the string that create the stylesheet which will be injected\n         * later within <style></style> tag.\n         *\n         * -join/replace to transform an array objects to css-styled string\n         *\n         */\n        NgxPrintDirective.prototype.returnStyleValues = /**\n         *\n         *\n         * \\@memberof NgxPrintDirective\n         * @return {?} the string that create the stylesheet which will be injected\n         * later within <style></style> tag.\n         *\n         * -join/replace to transform an array objects to css-styled string\n         *\n         */\n            function () {\n                return \"<style> \" + this._printStyle.join(' ').replace(/,/g, ';') + \" </style>\";\n            };\n        Object.defineProperty(NgxPrintDirective.prototype, \"styleSheetFile\", {\n            /**\n             * @memberof NgxPrintDirective\n             * @param cssList\n             */\n            set: /**\n             * \\@memberof NgxPrintDirective\n             * @param {?} cssList\n             * @return {?}\n             */ function (cssList) {\n                var e_1, _a;\n                /** @type {?} */\n                var linkTagFn = ( /**\n                 * @param {?} cssFileName\n                 * @return {?}\n                 */function (cssFileName) {\n                    return \"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\" + cssFileName + \"\\\">\";\n                });\n                if (cssList.indexOf(',') !== -1) {\n                    /** @type {?} */\n                    var valueArr = cssList.split(',');\n                    try {\n                        for (var valueArr_1 = __values(valueArr), valueArr_1_1 = valueArr_1.next(); !valueArr_1_1.done; valueArr_1_1 = valueArr_1.next()) {\n                            var val = valueArr_1_1.value;\n                            this._styleSheetFile = this._styleSheetFile + linkTagFn(val);\n                        }\n                    }\n                    catch (e_1_1) {\n                        e_1 = { error: e_1_1 };\n                    }\n                    finally {\n                        try {\n                            if (valueArr_1_1 && !valueArr_1_1.done && (_a = valueArr_1.return))\n                                _a.call(valueArr_1);\n                        }\n                        finally {\n                            if (e_1)\n                                throw e_1.error;\n                        }\n                    }\n                }\n                else {\n                    this._styleSheetFile = linkTagFn(cssList);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @returns string which contains the link tags containing the css which will\n         * be injected later within <head></head> tag.\n         *\n         */\n        /**\n         * @private\n         * @return {?} string which contains the link tags containing the css which will\n         * be injected later within <head></head> tag.\n         *\n         */\n        NgxPrintDirective.prototype.returnStyleSheetLinkTags = /**\n         * @private\n         * @return {?} string which contains the link tags containing the css which will\n         * be injected later within <head></head> tag.\n         *\n         */\n            function () {\n                return this._styleSheetFile;\n            };\n        /**\n         * @private\n         * @param {?} tag\n         * @return {?}\n         */\n        NgxPrintDirective.prototype.getElementTag = /**\n         * @private\n         * @param {?} tag\n         * @return {?}\n         */\n            function (tag) {\n                /** @type {?} */\n                var html = [];\n                /** @type {?} */\n                var elements = document.getElementsByTagName(tag);\n                for (var index = 0; index < elements.length; index++) {\n                    html.push(elements[index].outerHTML);\n                }\n                return html.join('\\r\\n');\n            };\n        /**\n         *\n         *\n         * @memberof NgxPrintDirective\n         */\n        /**\n         *\n         *\n         * \\@memberof NgxPrintDirective\n         * @return {?}\n         */\n        NgxPrintDirective.prototype.print = /**\n         *\n         *\n         * \\@memberof NgxPrintDirective\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var printContents;\n                /** @type {?} */\n                var popupWin;\n                /** @type {?} */\n                var styles = '';\n                /** @type {?} */\n                var links = '';\n                if (this.useExistingCss) {\n                    styles = this.getElementTag('style');\n                    links = this.getElementTag('link');\n                }\n                printContents = document.getElementById(this.printSectionId).innerHTML;\n                popupWin = window.open(\"\", \"_blank\", \"top=0,left=0,height=100%,width=auto\");\n                popupWin.document.open();\n                popupWin.document.write(\"\\n      <html>\\n        <head>\\n          <title>\" + (this.printTitle ? this.printTitle : \"\") + \"</title>\\n          \" + this.returnStyleValues() + \"\\n          \" + this.returnStyleSheetLinkTags() + \"\\n          \" + styles + \"\\n          \" + links + \"\\n        </head>\\n    <body onload=\\\"window.print();window.close()\\\">\" + printContents + \"</body>\\n      </html>\");\n                popupWin.document.close();\n            };\n        NgxPrintDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"button[ngxPrint]\"\n                    },] }\n        ];\n        NgxPrintDirective.propDecorators = {\n            printSectionId: [{ type: core.Input }],\n            printTitle: [{ type: core.Input }],\n            useExistingCss: [{ type: core.Input }],\n            printStyle: [{ type: core.Input }],\n            styleSheetFile: [{ type: core.Input }],\n            print: [{ type: core.HostListener, args: ['click',] }]\n        };\n        return NgxPrintDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var NgxPrintModule = /** @class */ (function () {\n        function NgxPrintModule() {\n        }\n        NgxPrintModule.decorators = [\n            { type: core.NgModule, args: [{\n                        declarations: [NgxPrintDirective],\n                        imports: [],\n                        exports: [NgxPrintDirective]\n                    },] }\n        ];\n        return NgxPrintModule;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n\n    exports.NgxPrintDirective = NgxPrintDirective;\n    exports.NgxPrintModule = NgxPrintModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}