/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoGaugeIndicator } from './base/gauge-indicator';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
let DxoSubvalueIndicatorComponent = class DxoSubvalueIndicatorComponent extends DxoGaugeIndicator {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'subvalueIndicator';
    }
    ngOnDestroy() {
        this._addRemovedOption(this._fullOptionPath().slice(0, -1));
    }
};
DxoSubvalueIndicatorComponent.ɵfac = function DxoSubvalueIndicatorComponent_Factory(t) { return new (t || DxoSubvalueIndicatorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxoSubvalueIndicatorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoSubvalueIndicatorComponent, selectors: [["dxo-subvalue-indicator"]], inputs: { arrowLength: "arrowLength", backgroundColor: "backgroundColor", baseValue: "baseValue", beginAdaptingAtRadius: "beginAdaptingAtRadius", color: "color", horizontalOrientation: "horizontalOrientation", indentFromCenter: "indentFromCenter", length: "length", offset: "offset", palette: "palette", secondColor: "secondColor", secondFraction: "secondFraction", size: "size", spindleGapSize: "spindleGapSize", spindleSize: "spindleSize", text: "text", type: "type", verticalOrientation: "verticalOrientation", width: "width" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSubvalueIndicatorComponent_Template(rf, ctx) { }, styles: [""] });
DxoSubvalueIndicatorComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
DxoSubvalueIndicatorComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxoSubvalueIndicatorComponent);
export { DxoSubvalueIndicatorComponent };
let DxoSubvalueIndicatorModule = class DxoSubvalueIndicatorModule {
};
DxoSubvalueIndicatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoSubvalueIndicatorModule });
DxoSubvalueIndicatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoSubvalueIndicatorModule_Factory(t) { return new (t || DxoSubvalueIndicatorModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoSubvalueIndicatorComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-subvalue-indicator',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'arrowLength',
                    'backgroundColor',
                    'baseValue',
                    'beginAdaptingAtRadius',
                    'color',
                    'horizontalOrientation',
                    'indentFromCenter',
                    'length',
                    'offset',
                    'palette',
                    'secondColor',
                    'secondFraction',
                    'size',
                    'spindleGapSize',
                    'spindleSize',
                    'text',
                    'type',
                    'verticalOrientation',
                    'width'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoSubvalueIndicatorModule, { declarations: [DxoSubvalueIndicatorComponent], exports: [DxoSubvalueIndicatorComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoSubvalueIndicatorModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoSubvalueIndicatorComponent
                ],
                exports: [
                    DxoSubvalueIndicatorComponent
                ]
            }]
    }], null, null); })();
export { DxoSubvalueIndicatorModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL2RldmV4dHJlbWUtYW5ndWxhci9lc20yMDE1L3VpL25lc3RlZC9zdWJ2YWx1ZS1pbmRpY2F0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7Ozs7Ozs7Ozs7OzsyMkJBWUU7Ozs7O29EQUtrRCxBQTRCakQ7Ozs7Ozs7OztFQU9EOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBVTZCIiwiZmlsZSI6InN1YnZhbHVlLWluZGljYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcclxuICogVmVyc2lvbjogMTkuMi42XHJcbiAqIEJ1aWxkIGRhdGU6IFRodSBKYW4gMzAgMjAyMFxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKlxyXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXHJcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXHJcbiAqXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxyXG4gKi9cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXHJcbi8qIHRzbGludDpkaXNhYmxlOnVzZS1pbnB1dC1wcm9wZXJ0eS1kZWNvcmF0b3IgKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBOZ01vZHVsZSwgSG9zdCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmVzdGVkT3B0aW9uSG9zdCwgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IER4b0dhdWdlSW5kaWNhdG9yIH0gZnJvbSAnLi9iYXNlL2dhdWdlLWluZGljYXRvcic7XHJcbmxldCBEeG9TdWJ2YWx1ZUluZGljYXRvckNvbXBvbmVudCA9IGNsYXNzIER4b1N1YnZhbHVlSW5kaWNhdG9yQ29tcG9uZW50IGV4dGVuZHMgRHhvR2F1Z2VJbmRpY2F0b3Ige1xyXG4gICAgY29uc3RydWN0b3IocGFyZW50T3B0aW9uSG9zdCwgb3B0aW9uSG9zdCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgcGFyZW50T3B0aW9uSG9zdC5zZXROZXN0ZWRPcHRpb24odGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KHRoaXMsIHRoaXMuX2Z1bGxPcHRpb25QYXRoLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9vcHRpb25QYXRoKCkge1xyXG4gICAgICAgIHJldHVybiAnc3VidmFsdWVJbmRpY2F0b3InO1xyXG4gICAgfVxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5fYWRkUmVtb3ZlZE9wdGlvbih0aGlzLl9mdWxsT3B0aW9uUGF0aCgpLnNsaWNlKDAsIC0xKSk7XHJcbiAgICB9XHJcbn07XHJcbkR4b1N1YnZhbHVlSW5kaWNhdG9yQ29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xyXG4gICAgeyB0eXBlOiBOZXN0ZWRPcHRpb25Ib3N0LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBTa2lwU2VsZiB9LCB7IHR5cGU6IEhvc3QgfV0gfSxcclxuICAgIHsgdHlwZTogTmVzdGVkT3B0aW9uSG9zdCwgZGVjb3JhdG9yczogW3sgdHlwZTogSG9zdCB9XSB9XHJcbl07XHJcbkR4b1N1YnZhbHVlSW5kaWNhdG9yQ29tcG9uZW50ID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgIENvbXBvbmVudCh7XHJcbiAgICAgICAgc2VsZWN0b3I6ICdkeG8tc3VidmFsdWUtaW5kaWNhdG9yJyxcclxuICAgICAgICB0ZW1wbGF0ZTogJycsXHJcbiAgICAgICAgcHJvdmlkZXJzOiBbTmVzdGVkT3B0aW9uSG9zdF0sXHJcbiAgICAgICAgaW5wdXRzOiBbXHJcbiAgICAgICAgICAgICdhcnJvd0xlbmd0aCcsXHJcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kQ29sb3InLFxyXG4gICAgICAgICAgICAnYmFzZVZhbHVlJyxcclxuICAgICAgICAgICAgJ2JlZ2luQWRhcHRpbmdBdFJhZGl1cycsXHJcbiAgICAgICAgICAgICdjb2xvcicsXHJcbiAgICAgICAgICAgICdob3Jpem9udGFsT3JpZW50YXRpb24nLFxyXG4gICAgICAgICAgICAnaW5kZW50RnJvbUNlbnRlcicsXHJcbiAgICAgICAgICAgICdsZW5ndGgnLFxyXG4gICAgICAgICAgICAnb2Zmc2V0JyxcclxuICAgICAgICAgICAgJ3BhbGV0dGUnLFxyXG4gICAgICAgICAgICAnc2Vjb25kQ29sb3InLFxyXG4gICAgICAgICAgICAnc2Vjb25kRnJhY3Rpb24nLFxyXG4gICAgICAgICAgICAnc2l6ZScsXHJcbiAgICAgICAgICAgICdzcGluZGxlR2FwU2l6ZScsXHJcbiAgICAgICAgICAgICdzcGluZGxlU2l6ZScsXHJcbiAgICAgICAgICAgICd0ZXh0JyxcclxuICAgICAgICAgICAgJ3R5cGUnLFxyXG4gICAgICAgICAgICAndmVydGljYWxPcmllbnRhdGlvbicsXHJcbiAgICAgICAgICAgICd3aWR0aCdcclxuICAgICAgICBdLFxyXG4gICAgICAgIHN0eWxlczogWycnXVxyXG4gICAgfSksXHJcbiAgICB0c2xpYl8xLl9fcGFyYW0oMCwgU2tpcFNlbGYoKSksIHRzbGliXzEuX19wYXJhbSgwLCBIb3N0KCkpLFxyXG4gICAgdHNsaWJfMS5fX3BhcmFtKDEsIEhvc3QoKSksXHJcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbTmVzdGVkT3B0aW9uSG9zdCxcclxuICAgICAgICBOZXN0ZWRPcHRpb25Ib3N0XSlcclxuXSwgRHhvU3VidmFsdWVJbmRpY2F0b3JDb21wb25lbnQpO1xyXG5leHBvcnQgeyBEeG9TdWJ2YWx1ZUluZGljYXRvckNvbXBvbmVudCB9O1xyXG5sZXQgRHhvU3VidmFsdWVJbmRpY2F0b3JNb2R1bGUgPSBjbGFzcyBEeG9TdWJ2YWx1ZUluZGljYXRvck1vZHVsZSB7XHJcbn07XHJcbkR4b1N1YnZhbHVlSW5kaWNhdG9yTW9kdWxlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgIE5nTW9kdWxlKHtcclxuICAgICAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICAgICAgRHhvU3VidmFsdWVJbmRpY2F0b3JDb21wb25lbnRcclxuICAgICAgICBdLFxyXG4gICAgICAgIGV4cG9ydHM6IFtcclxuICAgICAgICAgICAgRHhvU3VidmFsdWVJbmRpY2F0b3JDb21wb25lbnRcclxuICAgICAgICBdLFxyXG4gICAgfSlcclxuXSwgRHhvU3VidmFsdWVJbmRpY2F0b3JNb2R1bGUpO1xyXG5leHBvcnQgeyBEeG9TdWJ2YWx1ZUluZGljYXRvck1vZHVsZSB9O1xyIl19