{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-form.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gLAkXE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAwU4B,AAW3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAQD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BA8Be","file":"devextreme-angular-ui-form.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxForm from 'devextreme/ui/form';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The Form widget represents fields of a data object as a collection of label-editor pairs. These pairs can be arranged in several groups, tabs and columns.\r\n */\r\nlet DxFormComponent = class DxFormComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._watcherHelper = _watcherHelper;\r\n        this._idh = _idh;\r\n        this._createEventEmitters([\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'editorEnterKey', emit: 'onEditorEnterKey' },\r\n            { subscribe: 'fieldDataChanged', emit: 'onFieldDataChanged' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'alignItemLabelsChange' },\r\n            { emit: 'alignItemLabelsInAllGroupsChange' },\r\n            { emit: 'colCountChange' },\r\n            { emit: 'colCountByScreenChange' },\r\n            { emit: 'customizeItemChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'formDataChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'itemsChange' },\r\n            { emit: 'labelLocationChange' },\r\n            { emit: 'minColWidthChange' },\r\n            { emit: 'optionalMarkChange' },\r\n            { emit: 'readOnlyChange' },\r\n            { emit: 'requiredMarkChange' },\r\n            { emit: 'requiredMessageChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'screenByWidthChange' },\r\n            { emit: 'scrollingEnabledChange' },\r\n            { emit: 'showColonAfterLabelChange' },\r\n            { emit: 'showOptionalMarkChange' },\r\n            { emit: 'showRequiredMarkChange' },\r\n            { emit: 'showValidationSummaryChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'validationGroupChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Specifies the shortcut key that sets focus on the widget.\r\n     */\r\n    get accessKey() {\r\n        return this._getOption('accessKey');\r\n    }\r\n    set accessKey(value) {\r\n        this._setOption('accessKey', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the widget changes its state when interacting with a user.\r\n     */\r\n    get activeStateEnabled() {\r\n        return this._getOption('activeStateEnabled');\r\n    }\r\n    set activeStateEnabled(value) {\r\n        this._setOption('activeStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not all root item labels are aligned.\r\n     */\r\n    get alignItemLabels() {\r\n        return this._getOption('alignItemLabels');\r\n    }\r\n    set alignItemLabels(value) {\r\n        this._setOption('alignItemLabels', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not item labels in all groups are aligned.\r\n     */\r\n    get alignItemLabelsInAllGroups() {\r\n        return this._getOption('alignItemLabelsInAllGroups');\r\n    }\r\n    set alignItemLabelsInAllGroups(value) {\r\n        this._setOption('alignItemLabelsInAllGroups', value);\r\n    }\r\n    /**\r\n     * The count of columns in the form layout.\r\n     */\r\n    get colCount() {\r\n        return this._getOption('colCount');\r\n    }\r\n    set colCount(value) {\r\n        this._setOption('colCount', value);\r\n    }\r\n    /**\r\n     * Specifies dependency between the screen factor and the count of columns in the form layout.\r\n     */\r\n    get colCountByScreen() {\r\n        return this._getOption('colCountByScreen');\r\n    }\r\n    set colCountByScreen(value) {\r\n        this._setOption('colCountByScreen', value);\r\n    }\r\n    /**\r\n     * Specifies a function that customizes a form item after it has been created.\r\n     */\r\n    get customizeItem() {\r\n        return this._getOption('customizeItem');\r\n    }\r\n    set customizeItem(value) {\r\n        this._setOption('customizeItem', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget can be focused using keyboard navigation.\r\n     */\r\n    get focusStateEnabled() {\r\n        return this._getOption('focusStateEnabled');\r\n    }\r\n    set focusStateEnabled(value) {\r\n        this._setOption('focusStateEnabled', value);\r\n    }\r\n    /**\r\n     * Provides the Form's data. Gets updated every time form fields change.\r\n     */\r\n    get formData() {\r\n        return this._getOption('formData');\r\n    }\r\n    set formData(value) {\r\n        this._setOption('formData', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    get height() {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value) {\r\n        this._setOption('height', value);\r\n    }\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the widget.\r\n     */\r\n    get hint() {\r\n        return this._getOption('hint');\r\n    }\r\n    set hint(value) {\r\n        this._setOption('hint', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget changes its state when a user pauses on it.\r\n     */\r\n    get hoverStateEnabled() {\r\n        return this._getOption('hoverStateEnabled');\r\n    }\r\n    set hoverStateEnabled(value) {\r\n        this._setOption('hoverStateEnabled', value);\r\n    }\r\n    /**\r\n     * Holds an array of form items.\r\n     */\r\n    get items() {\r\n        return this._getOption('items');\r\n    }\r\n    set items(value) {\r\n        this._setOption('items', value);\r\n    }\r\n    /**\r\n     * Specifies the location of a label against the editor.\r\n     */\r\n    get labelLocation() {\r\n        return this._getOption('labelLocation');\r\n    }\r\n    set labelLocation(value) {\r\n        this._setOption('labelLocation', value);\r\n    }\r\n    /**\r\n     * The minimum column width used for calculating column count in the form layout.\r\n     */\r\n    get minColWidth() {\r\n        return this._getOption('minColWidth');\r\n    }\r\n    set minColWidth(value) {\r\n        this._setOption('minColWidth', value);\r\n    }\r\n    /**\r\n     * The text displayed for optional fields.\r\n     */\r\n    get optionalMark() {\r\n        return this._getOption('optionalMark');\r\n    }\r\n    set optionalMark(value) {\r\n        this._setOption('optionalMark', value);\r\n    }\r\n    /**\r\n     * Specifies whether all editors on the form are read-only. Applies only to non-templated items.\r\n     */\r\n    get readOnly() {\r\n        return this._getOption('readOnly');\r\n    }\r\n    set readOnly(value) {\r\n        this._setOption('readOnly', value);\r\n    }\r\n    /**\r\n     * The text displayed for required fields.\r\n     */\r\n    get requiredMark() {\r\n        return this._getOption('requiredMark');\r\n    }\r\n    set requiredMark(value) {\r\n        this._setOption('requiredMark', value);\r\n    }\r\n    /**\r\n     * Specifies the message that is shown for end-users if a required field value is not specified.\r\n     */\r\n    get requiredMessage() {\r\n        return this._getOption('requiredMessage');\r\n    }\r\n    set requiredMessage(value) {\r\n        this._setOption('requiredMessage', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies a function that categorizes screens by their width.\r\n     */\r\n    get screenByWidth() {\r\n        return this._getOption('screenByWidth');\r\n    }\r\n    set screenByWidth(value) {\r\n        this._setOption('screenByWidth', value);\r\n    }\r\n    /**\r\n     * A Boolean value specifying whether to enable or disable form scrolling.\r\n     */\r\n    get scrollingEnabled() {\r\n        return this._getOption('scrollingEnabled');\r\n    }\r\n    set scrollingEnabled(value) {\r\n        this._setOption('scrollingEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not a colon is displayed at the end of form labels.\r\n     */\r\n    get showColonAfterLabel() {\r\n        return this._getOption('showColonAfterLabel');\r\n    }\r\n    set showColonAfterLabel(value) {\r\n        this._setOption('showColonAfterLabel', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the optional mark is displayed for optional fields.\r\n     */\r\n    get showOptionalMark() {\r\n        return this._getOption('showOptionalMark');\r\n    }\r\n    set showOptionalMark(value) {\r\n        this._setOption('showOptionalMark', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the required mark is displayed for required fields.\r\n     */\r\n    get showRequiredMark() {\r\n        return this._getOption('showRequiredMark');\r\n    }\r\n    set showRequiredMark(value) {\r\n        this._setOption('showRequiredMark', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the total validation summary is displayed on the form.\r\n     */\r\n    get showValidationSummary() {\r\n        return this._getOption('showValidationSummary');\r\n    }\r\n    set showValidationSummary(value) {\r\n        this._setOption('showValidationSummary', value);\r\n    }\r\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n     */\r\n    get tabIndex() {\r\n        return this._getOption('tabIndex');\r\n    }\r\n    set tabIndex(value) {\r\n        this._setOption('tabIndex', value);\r\n    }\r\n    /**\r\n     * Gives a name to the internal validation group.\r\n     */\r\n    get validationGroup() {\r\n        return this._getOption('validationGroup');\r\n    }\r\n    set validationGroup(value) {\r\n        this._setOption('validationGroup', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget is visible.\r\n     */\r\n    get visible() {\r\n        return this._getOption('visible');\r\n    }\r\n    set visible(value) {\r\n        this._setOption('visible', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    get width() {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value) {\r\n        this._setOption('width', value);\r\n    }\r\n    get itemsChildren() {\r\n        return this._getOption('items');\r\n    }\r\n    set itemsChildren(value) {\r\n        this.setChildren('items', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxForm(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('items', changes);\r\n    }\r\n    setupChanges(prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        this._idh.doCheck('items');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n    _setOption(name, value) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n};\r\nDxFormComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: IterableDifferHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxFormComponent.prototype, \"accessKey\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"activeStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"alignItemLabels\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"alignItemLabelsInAllGroups\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxFormComponent.prototype, \"colCount\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxFormComponent.prototype, \"colCountByScreen\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Function])\r\n], DxFormComponent.prototype, \"customizeItem\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxFormComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"focusStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxFormComponent.prototype, \"formData\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxFormComponent.prototype, \"height\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxFormComponent.prototype, \"hint\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"hoverStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], DxFormComponent.prototype, \"items\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxFormComponent.prototype, \"labelLocation\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxFormComponent.prototype, \"minColWidth\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxFormComponent.prototype, \"optionalMark\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"readOnly\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxFormComponent.prototype, \"requiredMark\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxFormComponent.prototype, \"requiredMessage\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Function])\r\n], DxFormComponent.prototype, \"screenByWidth\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"scrollingEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"showColonAfterLabel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"showOptionalMark\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"showRequiredMark\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"showValidationSummary\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxFormComponent.prototype, \"tabIndex\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxFormComponent.prototype, \"validationGroup\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxFormComponent.prototype, \"visible\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxFormComponent.prototype, \"width\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"onContentReady\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"onEditorEnterKey\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"onFieldDataChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"accessKeyChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"alignItemLabelsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"alignItemLabelsInAllGroupsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"colCountChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"colCountByScreenChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"customizeItemChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"formDataChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"heightChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"hintChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"itemsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"labelLocationChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"minColWidthChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"optionalMarkChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"readOnlyChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"requiredMarkChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"requiredMessageChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"screenByWidthChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"scrollingEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"showColonAfterLabelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"showOptionalMarkChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"showRequiredMarkChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"showValidationSummaryChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"tabIndexChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"validationGroupChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"visibleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxFormComponent.prototype, \"widthChange\", void 0);\r\n__decorate([\r\n    ContentChildren(DxiItemComponent),\r\n    __metadata(\"design:type\", QueryList),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxFormComponent.prototype, \"itemsChildren\", null);\r\nDxFormComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-form',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            IterableDifferHelper\r\n        ]\r\n    }),\r\n    __param(7, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        IterableDifferHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxFormComponent);\r\nlet DxFormModule = class DxFormModule {\r\n};\r\nDxFormModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoColCountByScreenModule,\r\n            DxiItemModule,\r\n            DxoLabelModule,\r\n            DxiValidationRuleModule,\r\n            DxoTabPanelOptionsModule,\r\n            DxiTabModule,\r\n            DxoButtonOptionsModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxFormComponent\r\n        ],\r\n        exports: [\r\n            DxFormComponent,\r\n            DxoColCountByScreenModule,\r\n            DxiItemModule,\r\n            DxoLabelModule,\r\n            DxiValidationRuleModule,\r\n            DxoTabPanelOptionsModule,\r\n            DxiTabModule,\r\n            DxoButtonOptionsModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxFormModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxFormComponent, DxFormModule };\n"]}