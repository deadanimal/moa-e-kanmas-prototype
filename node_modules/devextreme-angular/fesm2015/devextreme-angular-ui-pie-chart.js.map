{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-pie-chart.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qNAyYE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAqXgC,AAY/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAQD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAgEmB","file":"devextreme-angular-ui-pie-chart.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxPieChart from 'devextreme/viz/pie_chart';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiSeriesComponent, DxoAdaptiveLayoutModule, DxoAnimationModule, DxoCommonSeriesSettingsModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoArgumentFormatModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoSelectionStyleModule, DxoSmallValuesGroupingModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The PieChart is a widget that visualizes data as a circle divided into sectors that each represents a portion of the whole.\r\n */\r\nlet DxPieChartComponent = class DxPieChartComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._watcherHelper = _watcherHelper;\r\n        this._idh = _idh;\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'done', emit: 'onDone' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'legendClick', emit: 'onLegendClick' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'pointClick', emit: 'onPointClick' },\r\n            { subscribe: 'pointHoverChanged', emit: 'onPointHoverChanged' },\r\n            { subscribe: 'pointSelectionChanged', emit: 'onPointSelectionChanged' },\r\n            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },\r\n            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },\r\n            { emit: 'adaptiveLayoutChange' },\r\n            { emit: 'animationChange' },\r\n            { emit: 'centerTemplateChange' },\r\n            { emit: 'commonSeriesSettingsChange' },\r\n            { emit: 'customizeLabelChange' },\r\n            { emit: 'customizePointChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'diameterChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'innerRadiusChange' },\r\n            { emit: 'legendChange' },\r\n            { emit: 'loadingIndicatorChange' },\r\n            { emit: 'marginChange' },\r\n            { emit: 'minDiameterChange' },\r\n            { emit: 'paletteChange' },\r\n            { emit: 'paletteExtensionModeChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'pointSelectionModeChange' },\r\n            { emit: 'redrawOnResizeChange' },\r\n            { emit: 'resolveLabelOverlappingChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'segmentsDirectionChange' },\r\n            { emit: 'seriesChange' },\r\n            { emit: 'seriesTemplateChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'sizeGroupChange' },\r\n            { emit: 'startAngleChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'titleChange' },\r\n            { emit: 'tooltipChange' },\r\n            { emit: 'typeChange' }\r\n        ]);\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Specifies adaptive layout options.\r\n     */\r\n    get adaptiveLayout() {\r\n        return this._getOption('adaptiveLayout');\r\n    }\r\n    set adaptiveLayout(value) {\r\n        this._setOption('adaptiveLayout', value);\r\n    }\r\n    /**\r\n     * Specifies animation options.\r\n     */\r\n    get animation() {\r\n        return this._getOption('animation');\r\n    }\r\n    set animation(value) {\r\n        this._setOption('animation', value);\r\n    }\r\n    /**\r\n     * Specifies a custom template for content in the pie's center.\r\n     */\r\n    get centerTemplate() {\r\n        return this._getOption('centerTemplate');\r\n    }\r\n    set centerTemplate(value) {\r\n        this._setOption('centerTemplate', value);\r\n    }\r\n    /**\r\n     * An object defining the configuration options that are common for all series of the PieChart widget.\r\n     */\r\n    get commonSeriesSettings() {\r\n        return this._getOption('commonSeriesSettings');\r\n    }\r\n    set commonSeriesSettings(value) {\r\n        this._setOption('commonSeriesSettings', value);\r\n    }\r\n    /**\r\n     * Customizes the appearance of an individual point label.\r\n     */\r\n    get customizeLabel() {\r\n        return this._getOption('customizeLabel');\r\n    }\r\n    set customizeLabel(value) {\r\n        this._setOption('customizeLabel', value);\r\n    }\r\n    /**\r\n     * Customizes the appearance of an individual series point.\r\n     */\r\n    get customizePoint() {\r\n        return this._getOption('customizePoint');\r\n    }\r\n    set customizePoint(value) {\r\n        this._setOption('customizePoint', value);\r\n    }\r\n    /**\r\n     * Binds the widget to data.\r\n     */\r\n    get dataSource() {\r\n        return this._getOption('dataSource');\r\n    }\r\n    set dataSource(value) {\r\n        this._setOption('dataSource', value);\r\n    }\r\n    /**\r\n     * Specifies the diameter of the pie.\r\n     */\r\n    get diameter() {\r\n        return this._getOption('diameter');\r\n    }\r\n    set diameter(value) {\r\n        this._setOption('diameter', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to the user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Configures the exporting and printing features.\r\n     */\r\n    get export() {\r\n        return this._getOption('export');\r\n    }\r\n    set export(value) {\r\n        this._setOption('export', value);\r\n    }\r\n    /**\r\n     * Specifies the fraction of the inner radius relative to the total radius in the series of the 'doughnut' type. The value should be between 0 and 1.\r\n     */\r\n    get innerRadius() {\r\n        return this._getOption('innerRadius');\r\n    }\r\n    set innerRadius(value) {\r\n        this._setOption('innerRadius', value);\r\n    }\r\n    /**\r\n     * Specifies PieChart legend options.\r\n     */\r\n    get legend() {\r\n        return this._getOption('legend');\r\n    }\r\n    set legend(value) {\r\n        this._setOption('legend', value);\r\n    }\r\n    /**\r\n     * Configures the loading indicator.\r\n     */\r\n    get loadingIndicator() {\r\n        return this._getOption('loadingIndicator');\r\n    }\r\n    set loadingIndicator(value) {\r\n        this._setOption('loadingIndicator', value);\r\n    }\r\n    /**\r\n     * Generates space around the widget.\r\n     */\r\n    get margin() {\r\n        return this._getOption('margin');\r\n    }\r\n    set margin(value) {\r\n        this._setOption('margin', value);\r\n    }\r\n    /**\r\n     * Specifies the minimum diameter of the pie.\r\n     */\r\n    get minDiameter() {\r\n        return this._getOption('minDiameter');\r\n    }\r\n    set minDiameter(value) {\r\n        this._setOption('minDiameter', value);\r\n    }\r\n    /**\r\n     * Sets the palette to be used to colorize series and their elements.\r\n     */\r\n    get palette() {\r\n        return this._getOption('palette');\r\n    }\r\n    set palette(value) {\r\n        this._setOption('palette', value);\r\n    }\r\n    /**\r\n     * Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart widget) or points in a series (in the PieChart widget).\r\n     */\r\n    get paletteExtensionMode() {\r\n        return this._getOption('paletteExtensionMode');\r\n    }\r\n    set paletteExtensionMode(value) {\r\n        this._setOption('paletteExtensionMode', value);\r\n    }\r\n    /**\r\n     * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n     */\r\n    get pathModified() {\r\n        return this._getOption('pathModified');\r\n    }\r\n    set pathModified(value) {\r\n        this._setOption('pathModified', value);\r\n    }\r\n    /**\r\n     * Specifies whether a single point or multiple points can be selected in the chart.\r\n     */\r\n    get pointSelectionMode() {\r\n        return this._getOption('pointSelectionMode');\r\n    }\r\n    set pointSelectionMode(value) {\r\n        this._setOption('pointSelectionMode', value);\r\n    }\r\n    /**\r\n     * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n     */\r\n    get redrawOnResize() {\r\n        return this._getOption('redrawOnResize');\r\n    }\r\n    set redrawOnResize(value) {\r\n        this._setOption('redrawOnResize', value);\r\n    }\r\n    /**\r\n     * Specifies how a chart must behave when point labels overlap.\r\n     */\r\n    get resolveLabelOverlapping() {\r\n        return this._getOption('resolveLabelOverlapping');\r\n    }\r\n    set resolveLabelOverlapping(value) {\r\n        this._setOption('resolveLabelOverlapping', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the direction that the pie chart segments will occupy.\r\n     */\r\n    get segmentsDirection() {\r\n        return this._getOption('segmentsDirection');\r\n    }\r\n    set segmentsDirection(value) {\r\n        this._setOption('segmentsDirection', value);\r\n    }\r\n    /**\r\n     * Specifies options for the series of the PieChart widget.\r\n     */\r\n    get series() {\r\n        return this._getOption('series');\r\n    }\r\n    set series(value) {\r\n        this._setOption('series', value);\r\n    }\r\n    /**\r\n     * Defines options for the series template.\r\n     */\r\n    get seriesTemplate() {\r\n        return this._getOption('seriesTemplate');\r\n    }\r\n    set seriesTemplate(value) {\r\n        this._setOption('seriesTemplate', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's size in pixels.\r\n     */\r\n    get size() {\r\n        return this._getOption('size');\r\n    }\r\n    set size(value) {\r\n        this._setOption('size', value);\r\n    }\r\n    /**\r\n     * Allows you to display several adjoining pies in the same size.\r\n     */\r\n    get sizeGroup() {\r\n        return this._getOption('sizeGroup');\r\n    }\r\n    set sizeGroup(value) {\r\n        this._setOption('sizeGroup', value);\r\n    }\r\n    /**\r\n     * Specifies the angle in arc degrees from which the first segment of a pie chart should start.\r\n     */\r\n    get startAngle() {\r\n        return this._getOption('startAngle');\r\n    }\r\n    set startAngle(value) {\r\n        this._setOption('startAngle', value);\r\n    }\r\n    /**\r\n     * Sets the name of the theme the widget uses.\r\n     */\r\n    get theme() {\r\n        return this._getOption('theme');\r\n    }\r\n    set theme(value) {\r\n        this._setOption('theme', value);\r\n    }\r\n    /**\r\n     * Configures the widget's title.\r\n     */\r\n    get title() {\r\n        return this._getOption('title');\r\n    }\r\n    set title(value) {\r\n        this._setOption('title', value);\r\n    }\r\n    /**\r\n     * Configures tooltips.\r\n     */\r\n    get tooltip() {\r\n        return this._getOption('tooltip');\r\n    }\r\n    set tooltip(value) {\r\n        this._setOption('tooltip', value);\r\n    }\r\n    /**\r\n     * Specifies the type of the pie chart series.\r\n     */\r\n    get type() {\r\n        return this._getOption('type');\r\n    }\r\n    set type(value) {\r\n        this._setOption('type', value);\r\n    }\r\n    get seriesChildren() {\r\n        return this._getOption('series');\r\n    }\r\n    set seriesChildren(value) {\r\n        this.setChildren('series', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxPieChart(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('dataSource', changes);\r\n        this.setupChanges('palette', changes);\r\n        this.setupChanges('series', changes);\r\n    }\r\n    setupChanges(prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        this._idh.doCheck('dataSource');\r\n        this._idh.doCheck('palette');\r\n        this._idh.doCheck('series');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n    _setOption(name, value) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n};\r\nDxPieChartComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: IterableDifferHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"adaptiveLayout\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"animation\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"centerTemplate\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"commonSeriesSettings\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Function])\r\n], DxPieChartComponent.prototype, \"customizeLabel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Function])\r\n], DxPieChartComponent.prototype, \"customizePoint\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"dataSource\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxPieChartComponent.prototype, \"diameter\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPieChartComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"export\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxPieChartComponent.prototype, \"innerRadius\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"legend\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"loadingIndicator\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"margin\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxPieChartComponent.prototype, \"minDiameter\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"palette\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPieChartComponent.prototype, \"paletteExtensionMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPieChartComponent.prototype, \"pathModified\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPieChartComponent.prototype, \"pointSelectionMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPieChartComponent.prototype, \"redrawOnResize\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPieChartComponent.prototype, \"resolveLabelOverlapping\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPieChartComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPieChartComponent.prototype, \"segmentsDirection\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"series\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"seriesTemplate\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"size\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPieChartComponent.prototype, \"sizeGroup\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxPieChartComponent.prototype, \"startAngle\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPieChartComponent.prototype, \"theme\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"title\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"tooltip\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPieChartComponent.prototype, \"type\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onDone\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onDrawn\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onExported\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onExporting\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onFileSaving\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onIncidentOccurred\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onLegendClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onPointClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onPointHoverChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onPointSelectionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onTooltipHidden\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"onTooltipShown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"adaptiveLayoutChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"animationChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"centerTemplateChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"commonSeriesSettingsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"customizeLabelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"customizePointChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"dataSourceChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"diameterChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"exportChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"innerRadiusChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"legendChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"marginChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"minDiameterChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"paletteChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"paletteExtensionModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"pathModifiedChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"pointSelectionModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"resolveLabelOverlappingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"segmentsDirectionChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"seriesChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"seriesTemplateChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"sizeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"sizeGroupChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"startAngleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"themeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"titleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"tooltipChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPieChartComponent.prototype, \"typeChange\", void 0);\r\n__decorate([\r\n    ContentChildren(DxiSeriesComponent),\r\n    __metadata(\"design:type\", QueryList),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPieChartComponent.prototype, \"seriesChildren\", null);\r\nDxPieChartComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-pie-chart',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            IterableDifferHelper\r\n        ],\r\n        styles: [' :host {  display: block; }']\r\n    }),\r\n    __param(7, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        IterableDifferHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxPieChartComponent);\r\nlet DxPieChartModule = class DxPieChartModule {\r\n};\r\nDxPieChartModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoAdaptiveLayoutModule,\r\n            DxoAnimationModule,\r\n            DxoCommonSeriesSettingsModule,\r\n            DxoBorderModule,\r\n            DxoHoverStyleModule,\r\n            DxoHatchingModule,\r\n            DxoLabelModule,\r\n            DxoArgumentFormatModule,\r\n            DxoConnectorModule,\r\n            DxoFontModule,\r\n            DxoFormatModule,\r\n            DxoSelectionStyleModule,\r\n            DxoSmallValuesGroupingModule,\r\n            DxoExportModule,\r\n            DxoLegendModule,\r\n            DxoMarginModule,\r\n            DxoTitleModule,\r\n            DxoSubtitleModule,\r\n            DxoLoadingIndicatorModule,\r\n            DxiSeriesModule,\r\n            DxoSeriesTemplateModule,\r\n            DxoSizeModule,\r\n            DxoTooltipModule,\r\n            DxoShadowModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxPieChartComponent\r\n        ],\r\n        exports: [\r\n            DxPieChartComponent,\r\n            DxoAdaptiveLayoutModule,\r\n            DxoAnimationModule,\r\n            DxoCommonSeriesSettingsModule,\r\n            DxoBorderModule,\r\n            DxoHoverStyleModule,\r\n            DxoHatchingModule,\r\n            DxoLabelModule,\r\n            DxoArgumentFormatModule,\r\n            DxoConnectorModule,\r\n            DxoFontModule,\r\n            DxoFormatModule,\r\n            DxoSelectionStyleModule,\r\n            DxoSmallValuesGroupingModule,\r\n            DxoExportModule,\r\n            DxoLegendModule,\r\n            DxoMarginModule,\r\n            DxoTitleModule,\r\n            DxoSubtitleModule,\r\n            DxoLoadingIndicatorModule,\r\n            DxiSeriesModule,\r\n            DxoSeriesTemplateModule,\r\n            DxoSizeModule,\r\n            DxoTooltipModule,\r\n            DxoShadowModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxPieChartModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxPieChartComponent, DxPieChartModule };\n"]}