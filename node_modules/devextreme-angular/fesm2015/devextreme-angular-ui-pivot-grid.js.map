{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-pivot-grid.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qLAsWE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA0UiC,AAWhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAQD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAwCoB","file":"devextreme-angular-ui-pivot-grid.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxPivotGrid from 'devextreme/ui/pivot_grid';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The PivotGrid is a widget that allows you to display and analyze multi-dimensional data from a local storage or an OLAP cube.\r\n */\r\nlet DxPivotGridComponent = class DxPivotGridComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._watcherHelper = _watcherHelper;\r\n        this._idh = _idh;\r\n        this._createEventEmitters([\r\n            { subscribe: 'cellClick', emit: 'onCellClick' },\r\n            { subscribe: 'cellPrepared', emit: 'onCellPrepared' },\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { emit: 'allowExpandAllChange' },\r\n            { emit: 'allowFilteringChange' },\r\n            { emit: 'allowSortingChange' },\r\n            { emit: 'allowSortingBySummaryChange' },\r\n            { emit: 'dataFieldAreaChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'fieldChooserChange' },\r\n            { emit: 'fieldPanelChange' },\r\n            { emit: 'headerFilterChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hideEmptySummaryCellsChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'loadPanelChange' },\r\n            { emit: 'rowHeaderLayoutChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollingChange' },\r\n            { emit: 'showBordersChange' },\r\n            { emit: 'showColumnGrandTotalsChange' },\r\n            { emit: 'showColumnTotalsChange' },\r\n            { emit: 'showRowGrandTotalsChange' },\r\n            { emit: 'showRowTotalsChange' },\r\n            { emit: 'showTotalsPriorChange' },\r\n            { emit: 'stateStoringChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'textsChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' },\r\n            { emit: 'wordWrapEnabledChange' }\r\n        ]);\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Allows an end-user to expand/collapse all header items within a header level.\r\n     */\r\n    get allowExpandAll() {\r\n        return this._getOption('allowExpandAll');\r\n    }\r\n    set allowExpandAll(value) {\r\n        this._setOption('allowExpandAll', value);\r\n    }\r\n    /**\r\n     * Allows a user to filter fields by selecting or deselecting values in the popup menu.\r\n     */\r\n    get allowFiltering() {\r\n        return this._getOption('allowFiltering');\r\n    }\r\n    set allowFiltering(value) {\r\n        this._setOption('allowFiltering', value);\r\n    }\r\n    /**\r\n     * Allows an end-user to change sorting options.\r\n     */\r\n    get allowSorting() {\r\n        return this._getOption('allowSorting');\r\n    }\r\n    set allowSorting(value) {\r\n        this._setOption('allowSorting', value);\r\n    }\r\n    /**\r\n     * Allows an end-user to sort columns by summary values.\r\n     */\r\n    get allowSortingBySummary() {\r\n        return this._getOption('allowSortingBySummary');\r\n    }\r\n    set allowSortingBySummary(value) {\r\n        this._setOption('allowSortingBySummary', value);\r\n    }\r\n    /**\r\n     * Specifies the area to which data field headers must belong.\r\n     */\r\n    get dataFieldArea() {\r\n        return this._getOption('dataFieldArea');\r\n    }\r\n    set dataFieldArea(value) {\r\n        this._setOption('dataFieldArea', value);\r\n    }\r\n    /**\r\n     * Binds the widget to data.\r\n     */\r\n    get dataSource() {\r\n        return this._getOption('dataSource');\r\n    }\r\n    set dataSource(value) {\r\n        this._setOption('dataSource', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Configures client-side exporting.\r\n     */\r\n    get export() {\r\n        return this._getOption('export');\r\n    }\r\n    set export(value) {\r\n        this._setOption('export', value);\r\n    }\r\n    /**\r\n     * The Field Chooser configuration options.\r\n     */\r\n    get fieldChooser() {\r\n        return this._getOption('fieldChooser');\r\n    }\r\n    set fieldChooser(value) {\r\n        this._setOption('fieldChooser', value);\r\n    }\r\n    /**\r\n     * Configures the field panel.\r\n     */\r\n    get fieldPanel() {\r\n        return this._getOption('fieldPanel');\r\n    }\r\n    set fieldPanel(value) {\r\n        this._setOption('fieldPanel', value);\r\n    }\r\n    /**\r\n     * Configures the header filter feature.\r\n     */\r\n    get headerFilter() {\r\n        return this._getOption('headerFilter');\r\n    }\r\n    set headerFilter(value) {\r\n        this._setOption('headerFilter', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    get height() {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value) {\r\n        this._setOption('height', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not to hide rows and columns with no data.\r\n     */\r\n    get hideEmptySummaryCells() {\r\n        return this._getOption('hideEmptySummaryCells');\r\n    }\r\n    set hideEmptySummaryCells(value) {\r\n        this._setOption('hideEmptySummaryCells', value);\r\n    }\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the widget.\r\n     */\r\n    get hint() {\r\n        return this._getOption('hint');\r\n    }\r\n    set hint(value) {\r\n        this._setOption('hint', value);\r\n    }\r\n    /**\r\n     * Specifies options configuring the load panel.\r\n     */\r\n    get loadPanel() {\r\n        return this._getOption('loadPanel');\r\n    }\r\n    set loadPanel(value) {\r\n        this._setOption('loadPanel', value);\r\n    }\r\n    /**\r\n     * Specifies the layout of items in the row header.\r\n     */\r\n    get rowHeaderLayout() {\r\n        return this._getOption('rowHeaderLayout');\r\n    }\r\n    set rowHeaderLayout(value) {\r\n        this._setOption('rowHeaderLayout', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * A configuration object specifying scrolling options.\r\n     */\r\n    get scrolling() {\r\n        return this._getOption('scrolling');\r\n    }\r\n    set scrolling(value) {\r\n        this._setOption('scrolling', value);\r\n    }\r\n    /**\r\n     * Specifies whether the outer borders of the grid are visible or not.\r\n     */\r\n    get showBorders() {\r\n        return this._getOption('showBorders');\r\n    }\r\n    set showBorders(value) {\r\n        this._setOption('showBorders', value);\r\n    }\r\n    /**\r\n     * Specifies whether to display the Grand Total column.\r\n     */\r\n    get showColumnGrandTotals() {\r\n        return this._getOption('showColumnGrandTotals');\r\n    }\r\n    set showColumnGrandTotals(value) {\r\n        this._setOption('showColumnGrandTotals', value);\r\n    }\r\n    /**\r\n     * Specifies whether to display the Total columns.\r\n     */\r\n    get showColumnTotals() {\r\n        return this._getOption('showColumnTotals');\r\n    }\r\n    set showColumnTotals(value) {\r\n        this._setOption('showColumnTotals', value);\r\n    }\r\n    /**\r\n     * Specifies whether to display the Grand Total row.\r\n     */\r\n    get showRowGrandTotals() {\r\n        return this._getOption('showRowGrandTotals');\r\n    }\r\n    set showRowGrandTotals(value) {\r\n        this._setOption('showRowGrandTotals', value);\r\n    }\r\n    /**\r\n     * Specifies whether to display the Total rows. Applies only if rowHeaderLayout is \"standard\".\r\n     */\r\n    get showRowTotals() {\r\n        return this._getOption('showRowTotals');\r\n    }\r\n    set showRowTotals(value) {\r\n        this._setOption('showRowTotals', value);\r\n    }\r\n    /**\r\n     * Specifies where to show the total rows or columns. Applies only if rowHeaderLayout is \"standard\".\r\n     */\r\n    get showTotalsPrior() {\r\n        return this._getOption('showTotalsPrior');\r\n    }\r\n    set showTotalsPrior(value) {\r\n        this._setOption('showTotalsPrior', value);\r\n    }\r\n    /**\r\n     * A configuration object specifying options related to state storing.\r\n     */\r\n    get stateStoring() {\r\n        return this._getOption('stateStoring');\r\n    }\r\n    set stateStoring(value) {\r\n        this._setOption('stateStoring', value);\r\n    }\r\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n     */\r\n    get tabIndex() {\r\n        return this._getOption('tabIndex');\r\n    }\r\n    set tabIndex(value) {\r\n        this._setOption('tabIndex', value);\r\n    }\r\n    /**\r\n     * Strings that can be changed or localized in the PivotGrid widget.\r\n     */\r\n    get texts() {\r\n        return this._getOption('texts');\r\n    }\r\n    set texts(value) {\r\n        this._setOption('texts', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget is visible.\r\n     */\r\n    get visible() {\r\n        return this._getOption('visible');\r\n    }\r\n    set visible(value) {\r\n        this._setOption('visible', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    get width() {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value) {\r\n        this._setOption('width', value);\r\n    }\r\n    /**\r\n     * Specifies whether long text in header items should be wrapped.\r\n     */\r\n    get wordWrapEnabled() {\r\n        return this._getOption('wordWrapEnabled');\r\n    }\r\n    set wordWrapEnabled(value) {\r\n        this._setOption('wordWrapEnabled', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxPivotGrid(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('dataSource', changes);\r\n    }\r\n    setupChanges(prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        this._idh.doCheck('dataSource');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n    _setOption(name, value) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n};\r\nDxPivotGridComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: IterableDifferHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"allowExpandAll\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"allowFiltering\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"allowSorting\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"allowSortingBySummary\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPivotGridComponent.prototype, \"dataFieldArea\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"dataSource\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"export\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"fieldChooser\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"fieldPanel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"headerFilter\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"height\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"hideEmptySummaryCells\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPivotGridComponent.prototype, \"hint\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"loadPanel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPivotGridComponent.prototype, \"rowHeaderLayout\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"scrolling\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"showBorders\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"showColumnGrandTotals\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"showColumnTotals\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"showRowGrandTotals\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"showRowTotals\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxPivotGridComponent.prototype, \"showTotalsPrior\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"stateStoring\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxPivotGridComponent.prototype, \"tabIndex\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"texts\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"visible\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxPivotGridComponent.prototype, \"width\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxPivotGridComponent.prototype, \"wordWrapEnabled\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onCellClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onCellPrepared\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onContentReady\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onContextMenuPreparing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onExported\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onExporting\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onFileSaving\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"allowExpandAllChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"allowFilteringChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"allowSortingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"allowSortingBySummaryChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"dataFieldAreaChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"dataSourceChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"exportChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"fieldChooserChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"fieldPanelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"headerFilterChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"heightChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"hideEmptySummaryCellsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"hintChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"loadPanelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"rowHeaderLayoutChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"scrollingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"showBordersChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"showColumnGrandTotalsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"showColumnTotalsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"showRowGrandTotalsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"showRowTotalsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"showTotalsPriorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"stateStoringChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"tabIndexChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"textsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"visibleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"widthChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxPivotGridComponent.prototype, \"wordWrapEnabledChange\", void 0);\r\nDxPivotGridComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-pivot-grid',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            IterableDifferHelper\r\n        ]\r\n    }),\r\n    __param(7, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        IterableDifferHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxPivotGridComponent);\r\nlet DxPivotGridModule = class DxPivotGridModule {\r\n};\r\nDxPivotGridModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoDataSourceModule,\r\n            DxiFieldModule,\r\n            DxoFormatModule,\r\n            DxoHeaderFilterModule,\r\n            DxoStoreModule,\r\n            DxoExportModule,\r\n            DxoFieldChooserModule,\r\n            DxoTextsModule,\r\n            DxoFieldPanelModule,\r\n            DxoLoadPanelModule,\r\n            DxoScrollingModule,\r\n            DxoStateStoringModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxPivotGridComponent\r\n        ],\r\n        exports: [\r\n            DxPivotGridComponent,\r\n            DxoDataSourceModule,\r\n            DxiFieldModule,\r\n            DxoFormatModule,\r\n            DxoHeaderFilterModule,\r\n            DxoStoreModule,\r\n            DxoExportModule,\r\n            DxoFieldChooserModule,\r\n            DxoTextsModule,\r\n            DxoFieldPanelModule,\r\n            DxoLoadPanelModule,\r\n            DxoScrollingModule,\r\n            DxoStateStoringModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxPivotGridModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxPivotGridComponent, DxPivotGridModule };\n"]}