{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-date-box.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAqmLAyniCA4kB+B,AAY9B;;;;;;;;;;;;;;;;;;;;;;;EAQD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAwBkB","file":"devextreme-angular-ui-date-box.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport 'devextreme/bundles/dx.all';\nimport DxDateBox from 'devextreme/ui/date_box';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiButtonComponent, DxiButtonModule, DxoOptionsModule, DxoCalendarOptionsModule, DxoDisplayFormatModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nconst CUSTOM_VALUE_ACCESSOR_PROVIDER = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => DxDateBoxComponent),\r\n    multi: true\r\n};\r\n/**\r\n * The DateBox is a widget that displays date and time in a specified format, and enables a user to pick or type in the required date/time value.\r\n */\r\nlet DxDateBoxComponent = class DxDateBoxComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._watcherHelper = _watcherHelper;\r\n        this._idh = _idh;\r\n        this.touched = (_) => { };\r\n        this._createEventEmitters([\r\n            { subscribe: 'change', emit: 'onChange' },\r\n            { subscribe: 'closed', emit: 'onClosed' },\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'copy', emit: 'onCopy' },\r\n            { subscribe: 'cut', emit: 'onCut' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'enterKey', emit: 'onEnterKey' },\r\n            { subscribe: 'focusIn', emit: 'onFocusIn' },\r\n            { subscribe: 'focusOut', emit: 'onFocusOut' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'input', emit: 'onInput' },\r\n            { subscribe: 'keyDown', emit: 'onKeyDown' },\r\n            { subscribe: 'keyPress', emit: 'onKeyPress' },\r\n            { subscribe: 'keyUp', emit: 'onKeyUp' },\r\n            { subscribe: 'opened', emit: 'onOpened' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'paste', emit: 'onPaste' },\r\n            { subscribe: 'valueChanged', emit: 'onValueChanged' },\r\n            { emit: 'acceptCustomValueChange' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'adaptivityEnabledChange' },\r\n            { emit: 'applyButtonTextChange' },\r\n            { emit: 'applyValueModeChange' },\r\n            { emit: 'buttonsChange' },\r\n            { emit: 'calendarOptionsChange' },\r\n            { emit: 'cancelButtonTextChange' },\r\n            { emit: 'dateOutOfRangeMessageChange' },\r\n            { emit: 'dateSerializationFormatChange' },\r\n            { emit: 'deferRenderingChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'disabledDatesChange' },\r\n            { emit: 'displayFormatChange' },\r\n            { emit: 'dropDownButtonTemplateChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'inputAttrChange' },\r\n            { emit: 'intervalChange' },\r\n            { emit: 'invalidDateMessageChange' },\r\n            { emit: 'isValidChange' },\r\n            { emit: 'maxChange' },\r\n            { emit: 'maxLengthChange' },\r\n            { emit: 'maxZoomLevelChange' },\r\n            { emit: 'minChange' },\r\n            { emit: 'minZoomLevelChange' },\r\n            { emit: 'nameChange' },\r\n            { emit: 'openedChange' },\r\n            { emit: 'openOnFieldClickChange' },\r\n            { emit: 'pickerTypeChange' },\r\n            { emit: 'placeholderChange' },\r\n            { emit: 'readOnlyChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'showAnalogClockChange' },\r\n            { emit: 'showClearButtonChange' },\r\n            { emit: 'showDropDownButtonChange' },\r\n            { emit: 'spellcheckChange' },\r\n            { emit: 'stylingModeChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'textChange' },\r\n            { emit: 'typeChange' },\r\n            { emit: 'useMaskBehaviorChange' },\r\n            { emit: 'validationErrorChange' },\r\n            { emit: 'validationErrorsChange' },\r\n            { emit: 'validationMessageModeChange' },\r\n            { emit: 'validationStatusChange' },\r\n            { emit: 'valueChange' },\r\n            { emit: 'valueChangeEventChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' },\r\n            { emit: 'onBlur' }\r\n        ]);\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Specifies whether or not the widget allows an end-user to enter a custom value.\r\n     */\r\n    get acceptCustomValue() {\r\n        return this._getOption('acceptCustomValue');\r\n    }\r\n    set acceptCustomValue(value) {\r\n        this._setOption('acceptCustomValue', value);\r\n    }\r\n    /**\r\n     * Specifies the shortcut key that sets focus on the widget.\r\n     */\r\n    get accessKey() {\r\n        return this._getOption('accessKey');\r\n    }\r\n    set accessKey(value) {\r\n        this._setOption('accessKey', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the widget changes its state when interacting with a user.\r\n     */\r\n    get activeStateEnabled() {\r\n        return this._getOption('activeStateEnabled');\r\n    }\r\n    set activeStateEnabled(value) {\r\n        this._setOption('activeStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not adaptive widget rendering is enabled on a small screen.\r\n     */\r\n    get adaptivityEnabled() {\r\n        return this._getOption('adaptivityEnabled');\r\n    }\r\n    set adaptivityEnabled(value) {\r\n        this._setOption('adaptivityEnabled', value);\r\n    }\r\n    /**\r\n     * The text displayed on the Apply button.\r\n     */\r\n    get applyButtonText() {\r\n        return this._getOption('applyButtonText');\r\n    }\r\n    set applyButtonText(value) {\r\n        this._setOption('applyButtonText', value);\r\n    }\r\n    /**\r\n     * Specifies the way an end-user applies the selected value.\r\n     */\r\n    get applyValueMode() {\r\n        return this._getOption('applyValueMode');\r\n    }\r\n    set applyValueMode(value) {\r\n        this._setOption('applyValueMode', value);\r\n    }\r\n    /**\r\n     * Allows you to add custom buttons to the input text field.\r\n     */\r\n    get buttons() {\r\n        return this._getOption('buttons');\r\n    }\r\n    set buttons(value) {\r\n        this._setOption('buttons', value);\r\n    }\r\n    /**\r\n     * Configures the calendar's value picker. Applies only if the pickerType is \"calendar\".\r\n     */\r\n    get calendarOptions() {\r\n        return this._getOption('calendarOptions');\r\n    }\r\n    set calendarOptions(value) {\r\n        this._setOption('calendarOptions', value);\r\n    }\r\n    /**\r\n     * The text displayed on the Cancel button.\r\n     */\r\n    get cancelButtonText() {\r\n        return this._getOption('cancelButtonText');\r\n    }\r\n    set cancelButtonText(value) {\r\n        this._setOption('cancelButtonText', value);\r\n    }\r\n    /**\r\n     * Specifies the message displayed if the specified date is later than the max value or earlier than the min value.\r\n     */\r\n    get dateOutOfRangeMessage() {\r\n        return this._getOption('dateOutOfRangeMessage');\r\n    }\r\n    set dateOutOfRangeMessage(value) {\r\n        this._setOption('dateOutOfRangeMessage', value);\r\n    }\r\n    /**\r\n     * Specifies the date-time value serialization format. Use it only if you do not specify the value at design time.\r\n     */\r\n    get dateSerializationFormat() {\r\n        return this._getOption('dateSerializationFormat');\r\n    }\r\n    set dateSerializationFormat(value) {\r\n        this._setOption('dateSerializationFormat', value);\r\n    }\r\n    /**\r\n     * Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately.\r\n     */\r\n    get deferRendering() {\r\n        return this._getOption('deferRendering');\r\n    }\r\n    set deferRendering(value) {\r\n        this._setOption('deferRendering', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies dates to be disabled. Applies only if pickerType is \"calendar\".\r\n     */\r\n    get disabledDates() {\r\n        return this._getOption('disabledDates');\r\n    }\r\n    set disabledDates(value) {\r\n        this._setOption('disabledDates', value);\r\n    }\r\n    /**\r\n     * Specifies the date display format. Ignored if the pickerType option is \"native\"\r\n     */\r\n    get displayFormat() {\r\n        return this._getOption('displayFormat');\r\n    }\r\n    set displayFormat(value) {\r\n        this._setOption('displayFormat', value);\r\n    }\r\n    /**\r\n     * Specifies a custom template for the drop-down button.\r\n     */\r\n    get dropDownButtonTemplate() {\r\n        return this._getOption('dropDownButtonTemplate');\r\n    }\r\n    set dropDownButtonTemplate(value) {\r\n        this._setOption('dropDownButtonTemplate', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget can be focused using keyboard navigation.\r\n     */\r\n    get focusStateEnabled() {\r\n        return this._getOption('focusStateEnabled');\r\n    }\r\n    set focusStateEnabled(value) {\r\n        this._setOption('focusStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    get height() {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value) {\r\n        this._setOption('height', value);\r\n    }\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the widget.\r\n     */\r\n    get hint() {\r\n        return this._getOption('hint');\r\n    }\r\n    set hint(value) {\r\n        this._setOption('hint', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget changes its state when a user pauses on it.\r\n     */\r\n    get hoverStateEnabled() {\r\n        return this._getOption('hoverStateEnabled');\r\n    }\r\n    set hoverStateEnabled(value) {\r\n        this._setOption('hoverStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be passed on to the underlying HTML element.\r\n     */\r\n    get inputAttr() {\r\n        return this._getOption('inputAttr');\r\n    }\r\n    set inputAttr(value) {\r\n        this._setOption('inputAttr', value);\r\n    }\r\n    /**\r\n     * Specifies the interval between neighboring values in the popup list in minutes.\r\n     */\r\n    get interval() {\r\n        return this._getOption('interval');\r\n    }\r\n    set interval(value) {\r\n        this._setOption('interval', value);\r\n    }\r\n    /**\r\n     * Specifies the message displayed if the typed value is not a valid date or time.\r\n     */\r\n    get invalidDateMessage() {\r\n        return this._getOption('invalidDateMessage');\r\n    }\r\n    set invalidDateMessage(value) {\r\n        this._setOption('invalidDateMessage', value);\r\n    }\r\n    /**\r\n     * Specifies or indicates whether the editor's value is valid.\r\n     */\r\n    get isValid() {\r\n        return this._getOption('isValid');\r\n    }\r\n    set isValid(value) {\r\n        this._setOption('isValid', value);\r\n    }\r\n    /**\r\n     * The last date that can be selected within the widget.\r\n     */\r\n    get max() {\r\n        return this._getOption('max');\r\n    }\r\n    set max(value) {\r\n        this._setOption('max', value);\r\n    }\r\n    /**\r\n     * Specifies the maximum number of characters you can enter into the textbox.\r\n     */\r\n    get maxLength() {\r\n        return this._getOption('maxLength');\r\n    }\r\n    set maxLength(value) {\r\n        this._setOption('maxLength', value);\r\n    }\r\n    /**\r\n     * Use the calendarOptions option instead.\r\n     */\r\n    get maxZoomLevel() {\r\n        return this._getOption('maxZoomLevel');\r\n    }\r\n    set maxZoomLevel(value) {\r\n        this._setOption('maxZoomLevel', value);\r\n    }\r\n    /**\r\n     * The minimum date that can be selected within the widget.\r\n     */\r\n    get min() {\r\n        return this._getOption('min');\r\n    }\r\n    set min(value) {\r\n        this._setOption('min', value);\r\n    }\r\n    /**\r\n     * Use the calendarOptions option instead.\r\n     */\r\n    get minZoomLevel() {\r\n        return this._getOption('minZoomLevel');\r\n    }\r\n    set minZoomLevel(value) {\r\n        this._setOption('minZoomLevel', value);\r\n    }\r\n    /**\r\n     * The value to be assigned to the `name` attribute of the underlying HTML element.\r\n     */\r\n    get name() {\r\n        return this._getOption('name');\r\n    }\r\n    set name(value) {\r\n        this._setOption('name', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the drop-down editor is displayed.\r\n     */\r\n    get opened() {\r\n        return this._getOption('opened');\r\n    }\r\n    set opened(value) {\r\n        this._setOption('opened', value);\r\n    }\r\n    /**\r\n     * Specifies whether a user can open the drop-down list by clicking a text field.\r\n     */\r\n    get openOnFieldClick() {\r\n        return this._getOption('openOnFieldClick');\r\n    }\r\n    set openOnFieldClick(value) {\r\n        this._setOption('openOnFieldClick', value);\r\n    }\r\n    /**\r\n     * Specifies the type of the date/time picker.\r\n     */\r\n    get pickerType() {\r\n        return this._getOption('pickerType');\r\n    }\r\n    set pickerType(value) {\r\n        this._setOption('pickerType', value);\r\n    }\r\n    /**\r\n     * Specifies a placeholder for the input field.\r\n     */\r\n    get placeholder() {\r\n        return this._getOption('placeholder');\r\n    }\r\n    set placeholder(value) {\r\n        this._setOption('placeholder', value);\r\n    }\r\n    /**\r\n     * Specifies whether the editor is read-only.\r\n     */\r\n    get readOnly() {\r\n        return this._getOption('readOnly');\r\n    }\r\n    set readOnly(value) {\r\n        this._setOption('readOnly', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies whether to show the analog clock in the value picker. Applies only if type is \"datetime\" and pickerType is \"calendar\".\r\n     */\r\n    get showAnalogClock() {\r\n        return this._getOption('showAnalogClock');\r\n    }\r\n    set showAnalogClock(value) {\r\n        this._setOption('showAnalogClock', value);\r\n    }\r\n    /**\r\n     * Specifies whether to display the Clear button in the widget.\r\n     */\r\n    get showClearButton() {\r\n        return this._getOption('showClearButton');\r\n    }\r\n    set showClearButton(value) {\r\n        this._setOption('showClearButton', value);\r\n    }\r\n    /**\r\n     * Specifies whether the drop-down button is visible.\r\n     */\r\n    get showDropDownButton() {\r\n        return this._getOption('showDropDownButton');\r\n    }\r\n    set showDropDownButton(value) {\r\n        this._setOption('showDropDownButton', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the widget checks the inner text for spelling mistakes.\r\n     */\r\n    get spellcheck() {\r\n        return this._getOption('spellcheck');\r\n    }\r\n    set spellcheck(value) {\r\n        this._setOption('spellcheck', value);\r\n    }\r\n    /**\r\n     * Specifies how the widget's text field is styled.\r\n     */\r\n    get stylingMode() {\r\n        return this._getOption('stylingMode');\r\n    }\r\n    set stylingMode(value) {\r\n        this._setOption('stylingMode', value);\r\n    }\r\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n     */\r\n    get tabIndex() {\r\n        return this._getOption('tabIndex');\r\n    }\r\n    set tabIndex(value) {\r\n        this._setOption('tabIndex', value);\r\n    }\r\n    /**\r\n     * The read-only option that holds the text displayed by the widget input element.\r\n     */\r\n    get text() {\r\n        return this._getOption('text');\r\n    }\r\n    set text(value) {\r\n        this._setOption('text', value);\r\n    }\r\n    /**\r\n     * A format used to display date/time information.\r\n     */\r\n    get type() {\r\n        return this._getOption('type');\r\n    }\r\n    set type(value) {\r\n        this._setOption('type', value);\r\n    }\r\n    /**\r\n     * Specifies whether to control user input using a mask created based on the displayFormat.\r\n     */\r\n    get useMaskBehavior() {\r\n        return this._getOption('useMaskBehavior');\r\n    }\r\n    set useMaskBehavior(value) {\r\n        this._setOption('useMaskBehavior', value);\r\n    }\r\n    /**\r\n     * Information on the broken validation rule. Contains the first item from the validationErrors array.\r\n     */\r\n    get validationError() {\r\n        return this._getOption('validationError');\r\n    }\r\n    set validationError(value) {\r\n        this._setOption('validationError', value);\r\n    }\r\n    /**\r\n     * An array of the validation rules that failed.\r\n     */\r\n    get validationErrors() {\r\n        return this._getOption('validationErrors');\r\n    }\r\n    set validationErrors(value) {\r\n        this._setOption('validationErrors', value);\r\n    }\r\n    /**\r\n     * Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed.\r\n     */\r\n    get validationMessageMode() {\r\n        return this._getOption('validationMessageMode');\r\n    }\r\n    set validationMessageMode(value) {\r\n        this._setOption('validationMessageMode', value);\r\n    }\r\n    /**\r\n     * Indicates or specifies the current validation status.\r\n     */\r\n    get validationStatus() {\r\n        return this._getOption('validationStatus');\r\n    }\r\n    set validationStatus(value) {\r\n        this._setOption('validationStatus', value);\r\n    }\r\n    /**\r\n     * An object or a value specifying the date and time currently selected using the date box.\r\n     */\r\n    get value() {\r\n        return this._getOption('value');\r\n    }\r\n    set value(value) {\r\n        this._setOption('value', value);\r\n    }\r\n    /**\r\n     * Specifies the DOM events after which the widget's value should be updated.\r\n     */\r\n    get valueChangeEvent() {\r\n        return this._getOption('valueChangeEvent');\r\n    }\r\n    set valueChangeEvent(value) {\r\n        this._setOption('valueChangeEvent', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget is visible.\r\n     */\r\n    get visible() {\r\n        return this._getOption('visible');\r\n    }\r\n    set visible(value) {\r\n        this._setOption('visible', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    get width() {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value) {\r\n        this._setOption('width', value);\r\n    }\r\n    change(_) { }\r\n    get buttonsChildren() {\r\n        return this._getOption('buttons');\r\n    }\r\n    set buttonsChildren(value) {\r\n        this.setChildren('buttons', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxDateBox(element, options);\r\n    }\r\n    writeValue(value) {\r\n        this.eventHelper.lockedValueChangeEvent = true;\r\n        this.value = value;\r\n        this.eventHelper.lockedValueChangeEvent = false;\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    registerOnChange(fn) { this.change = fn; }\r\n    registerOnTouched(fn) { this.touched = fn; }\r\n    _createWidget(element) {\r\n        super._createWidget(element);\r\n        this.instance.on('focusOut', (e) => {\r\n            this.eventHelper.fireNgEvent('onBlur', [e]);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('buttons', changes);\r\n        this.setupChanges('disabledDates', changes);\r\n        this.setupChanges('validationErrors', changes);\r\n    }\r\n    setupChanges(prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        this._idh.doCheck('buttons');\r\n        this._idh.doCheck('disabledDates');\r\n        this._idh.doCheck('validationErrors');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n    _setOption(name, value) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n};\r\nDxDateBoxComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: IterableDifferHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"acceptCustomValue\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"accessKey\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"activeStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"adaptivityEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"applyButtonText\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"applyValueMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], DxDateBoxComponent.prototype, \"buttons\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"calendarOptions\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"cancelButtonText\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"dateOutOfRangeMessage\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"dateSerializationFormat\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"deferRendering\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"disabledDates\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"displayFormat\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"dropDownButtonTemplate\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"focusStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"height\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"hint\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"hoverStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"inputAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDateBoxComponent.prototype, \"interval\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"invalidDateMessage\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"isValid\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"max\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"maxLength\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"maxZoomLevel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"min\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"minZoomLevel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"name\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"opened\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"openOnFieldClick\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"pickerType\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"placeholder\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"readOnly\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"showAnalogClock\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"showClearButton\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"showDropDownButton\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"spellcheck\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"stylingMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDateBoxComponent.prototype, \"tabIndex\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"text\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"type\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"useMaskBehavior\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"validationError\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], DxDateBoxComponent.prototype, \"validationErrors\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"validationMessageMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"validationStatus\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"value\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDateBoxComponent.prototype, \"valueChangeEvent\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDateBoxComponent.prototype, \"visible\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"width\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onClosed\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onContentReady\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onCopy\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onCut\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onEnterKey\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onFocusIn\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onFocusOut\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onInput\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onKeyDown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onKeyPress\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onKeyUp\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onOpened\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onPaste\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onValueChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"acceptCustomValueChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"accessKeyChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"adaptivityEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"applyButtonTextChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"applyValueModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"buttonsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"calendarOptionsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"cancelButtonTextChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"dateOutOfRangeMessageChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"dateSerializationFormatChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"deferRenderingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"disabledDatesChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"displayFormatChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"dropDownButtonTemplateChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"heightChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"hintChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"inputAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"intervalChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"invalidDateMessageChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"isValidChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"maxChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"maxLengthChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"maxZoomLevelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"minChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"minZoomLevelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"nameChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"openedChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"openOnFieldClickChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"pickerTypeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"placeholderChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"readOnlyChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"showAnalogClockChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"showClearButtonChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"showDropDownButtonChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"spellcheckChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"stylingModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"tabIndexChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"textChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"typeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"useMaskBehaviorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"validationErrorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"validationErrorsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"validationMessageModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"validationStatusChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"valueChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"valueChangeEventChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"visibleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"widthChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDateBoxComponent.prototype, \"onBlur\", void 0);\r\n__decorate([\r\n    HostListener('valueChange', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], DxDateBoxComponent.prototype, \"change\", null);\r\n__decorate([\r\n    HostListener('onBlur', ['$event']),\r\n    __metadata(\"design:type\", Object)\r\n], DxDateBoxComponent.prototype, \"touched\", void 0);\r\n__decorate([\r\n    ContentChildren(DxiButtonComponent),\r\n    __metadata(\"design:type\", QueryList),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDateBoxComponent.prototype, \"buttonsChildren\", null);\r\nDxDateBoxComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-date-box',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            CUSTOM_VALUE_ACCESSOR_PROVIDER,\r\n            NestedOptionHost,\r\n            IterableDifferHelper\r\n        ]\r\n    }),\r\n    __param(7, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        IterableDifferHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxDateBoxComponent);\r\nlet DxDateBoxModule = class DxDateBoxModule {\r\n};\r\nDxDateBoxModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxiButtonModule,\r\n            DxoOptionsModule,\r\n            DxoCalendarOptionsModule,\r\n            DxoDisplayFormatModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxDateBoxComponent\r\n        ],\r\n        exports: [\r\n            DxDateBoxComponent,\r\n            DxiButtonModule,\r\n            DxoOptionsModule,\r\n            DxoCalendarOptionsModule,\r\n            DxoDisplayFormatModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxDateBoxModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxDateBoxComponent, DxDateBoxModule };\n"]}