/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for typeahead
 */
import * as ɵngcc0 from '@angular/core';
var TypeaheadConfig = /** @class */ (function () {
    function TypeaheadConfig() {
        /**
         * sets use adaptive position
         */
        this.adaptivePosition = false;
        /**
         * turn on/off animation
         */
        this.isAnimated = false;
        /**
         * used to hide results on blur
         */
        this.hideResultsOnBlur = true;
        /**
         * used to choose the first item in typeahead container
         */
        this.selectFirstItem = true;
        /**
         * used to active/inactive the first item in typeahead container
         */
        this.isFirstItemActive = true;
        /**
         * used to choose set minimal no of characters that needs to
         * be entered before typeahead kicks-in
         */
        this.minLength = 1;
    }
TypeaheadConfig.ɵfac = function TypeaheadConfig_Factory(t) { return new (t || TypeaheadConfig)(); };
TypeaheadConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TypeaheadConfig, factory: function (t) { return TypeaheadConfig.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TypeaheadConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return TypeaheadConfig;
}());
export { TypeaheadConfig };
if (false) {
    /**
     * sets use adaptive position
     * @type {?}
     */
    TypeaheadConfig.prototype.adaptivePosition;
    /**
     * turn on/off animation
     * @type {?}
     */
    TypeaheadConfig.prototype.isAnimated;
    /**
     * used to hide results on blur
     * @type {?}
     */
    TypeaheadConfig.prototype.hideResultsOnBlur;
    /**
     * used to choose the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.selectFirstItem;
    /**
     * used to active/inactive the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.isFirstItemActive;
    /**
     * used to choose set minimal no of characters that needs to
     * be entered before typeahead kicks-in
     * @type {?}
     */
    TypeaheadConfig.prototype.minLength;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL25neC1ib290c3RyYXAvdHlwZWFoZWFkL2VzbTUvdHlwZWFoZWFkLmNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQTJCSzs7Ozs7Z0RBR0MiLCJmaWxlIjoidHlwZWFoZWFkLmNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIERlZmF1bHQgdmFsdWVzIHByb3ZpZGVyIGZvciB0eXBlYWhlYWRcbiAqL1xudmFyIFR5cGVhaGVhZENvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUeXBlYWhlYWRDb25maWcoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXRzIHVzZSBhZGFwdGl2ZSBwb3NpdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hZGFwdGl2ZVBvc2l0aW9uID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0dXJuIG9uL29mZiBhbmltYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNBbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdXNlZCB0byBoaWRlIHJlc3VsdHMgb24gYmx1clxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oaWRlUmVzdWx0c09uQmx1ciA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VkIHRvIGNob29zZSB0aGUgZmlyc3QgaXRlbSBpbiB0eXBlYWhlYWQgY29udGFpbmVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlbGVjdEZpcnN0SXRlbSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VkIHRvIGFjdGl2ZS9pbmFjdGl2ZSB0aGUgZmlyc3QgaXRlbSBpbiB0eXBlYWhlYWQgY29udGFpbmVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzRmlyc3RJdGVtQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVzZWQgdG8gY2hvb3NlIHNldCBtaW5pbWFsIG5vIG9mIGNoYXJhY3RlcnMgdGhhdCBuZWVkcyB0b1xuICAgICAgICAgKiBiZSBlbnRlcmVkIGJlZm9yZSB0eXBlYWhlYWQga2lja3MtaW5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWluTGVuZ3RoID0gMTtcbiAgICB9XG4gICAgVHlwZWFoZWFkQ29uZmlnLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9XG4gICAgXTtcbiAgICByZXR1cm4gVHlwZWFoZWFkQ29uZmlnO1xufSgpKTtcbmV4cG9ydCB7IFR5cGVhaGVhZENvbmZpZyB9O1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogc2V0cyB1c2UgYWRhcHRpdmUgcG9zaXRpb25cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLmFkYXB0aXZlUG9zaXRpb247XG4gICAgLyoqXG4gICAgICogdHVybiBvbi9vZmYgYW5pbWF0aW9uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5pc0FuaW1hdGVkO1xuICAgIC8qKlxuICAgICAqIHVzZWQgdG8gaGlkZSByZXN1bHRzIG9uIGJsdXJcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLmhpZGVSZXN1bHRzT25CbHVyO1xuICAgIC8qKlxuICAgICAqIHVzZWQgdG8gY2hvb3NlIHRoZSBmaXJzdCBpdGVtIGluIHR5cGVhaGVhZCBjb250YWluZXJcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLnNlbGVjdEZpcnN0SXRlbTtcbiAgICAvKipcbiAgICAgKiB1c2VkIHRvIGFjdGl2ZS9pbmFjdGl2ZSB0aGUgZmlyc3QgaXRlbSBpbiB0eXBlYWhlYWQgY29udGFpbmVyXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5pc0ZpcnN0SXRlbUFjdGl2ZTtcbiAgICAvKipcbiAgICAgKiB1c2VkIHRvIGNob29zZSBzZXQgbWluaW1hbCBubyBvZiBjaGFyYWN0ZXJzIHRoYXQgbmVlZHMgdG9cbiAgICAgKiBiZSBlbnRlcmVkIGJlZm9yZSB0eXBlYWhlYWQga2lja3MtaW5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLm1pbkxlbmd0aDtcbn1cbiJdfQ==