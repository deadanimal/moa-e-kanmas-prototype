{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-bar-gauge.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qNAsTE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCA6RgC,AAY/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAQD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAgDmB","file":"devextreme-angular-ui-bar-gauge.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxBarGauge from 'devextreme/viz/bar_gauge';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoAnimationModule, DxoExportModule, DxoGeometryModule, DxoLabelModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoBorderModule, DxoItemTextFormatModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The BarGauge widget contains several circular bars that each indicates a single value.\r\n */\r\nlet DxBarGaugeComponent = class DxBarGaugeComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._watcherHelper = _watcherHelper;\r\n        this._idh = _idh;\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },\r\n            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },\r\n            { emit: 'animationChange' },\r\n            { emit: 'backgroundColorChange' },\r\n            { emit: 'barSpacingChange' },\r\n            { emit: 'baseValueChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'endValueChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'geometryChange' },\r\n            { emit: 'labelChange' },\r\n            { emit: 'legendChange' },\r\n            { emit: 'loadingIndicatorChange' },\r\n            { emit: 'marginChange' },\r\n            { emit: 'paletteChange' },\r\n            { emit: 'paletteExtensionModeChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'redrawOnResizeChange' },\r\n            { emit: 'relativeInnerRadiusChange' },\r\n            { emit: 'resolveLabelOverlappingChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'startValueChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'titleChange' },\r\n            { emit: 'tooltipChange' },\r\n            { emit: 'valuesChange' }\r\n        ]);\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Specifies animation options.\r\n     */\r\n    get animation() {\r\n        return this._getOption('animation');\r\n    }\r\n    set animation(value) {\r\n        this._setOption('animation', value);\r\n    }\r\n    /**\r\n     * Specifies a color for the remaining segment of the bar's track.\r\n     */\r\n    get backgroundColor() {\r\n        return this._getOption('backgroundColor');\r\n    }\r\n    set backgroundColor(value) {\r\n        this._setOption('backgroundColor', value);\r\n    }\r\n    /**\r\n     * Specifies a distance between bars in pixels.\r\n     */\r\n    get barSpacing() {\r\n        return this._getOption('barSpacing');\r\n    }\r\n    set barSpacing(value) {\r\n        this._setOption('barSpacing', value);\r\n    }\r\n    /**\r\n     * Specifies a base value for bars.\r\n     */\r\n    get baseValue() {\r\n        return this._getOption('baseValue');\r\n    }\r\n    set baseValue(value) {\r\n        this._setOption('baseValue', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to the user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Specifies an end value for the gauge's invisible scale.\r\n     */\r\n    get endValue() {\r\n        return this._getOption('endValue');\r\n    }\r\n    set endValue(value) {\r\n        this._setOption('endValue', value);\r\n    }\r\n    /**\r\n     * Configures the exporting and printing features.\r\n     */\r\n    get export() {\r\n        return this._getOption('export');\r\n    }\r\n    set export(value) {\r\n        this._setOption('export', value);\r\n    }\r\n    /**\r\n     * Defines the shape of the gauge's arc.\r\n     */\r\n    get geometry() {\r\n        return this._getOption('geometry');\r\n    }\r\n    set geometry(value) {\r\n        this._setOption('geometry', value);\r\n    }\r\n    /**\r\n     * Specifies the options of the labels that accompany gauge bars.\r\n     */\r\n    get label() {\r\n        return this._getOption('label');\r\n    }\r\n    set label(value) {\r\n        this._setOption('label', value);\r\n    }\r\n    /**\r\n     * Configures the legend.\r\n     */\r\n    get legend() {\r\n        return this._getOption('legend');\r\n    }\r\n    set legend(value) {\r\n        this._setOption('legend', value);\r\n    }\r\n    /**\r\n     * Configures the loading indicator.\r\n     */\r\n    get loadingIndicator() {\r\n        return this._getOption('loadingIndicator');\r\n    }\r\n    set loadingIndicator(value) {\r\n        this._setOption('loadingIndicator', value);\r\n    }\r\n    /**\r\n     * Generates space around the widget.\r\n     */\r\n    get margin() {\r\n        return this._getOption('margin');\r\n    }\r\n    set margin(value) {\r\n        this._setOption('margin', value);\r\n    }\r\n    /**\r\n     * Sets the palette to be used for colorizing bars in the gauge.\r\n     */\r\n    get palette() {\r\n        return this._getOption('palette');\r\n    }\r\n    set palette(value) {\r\n        this._setOption('palette', value);\r\n    }\r\n    /**\r\n     * Specifies what to do with colors in the palette when their number is less than the number of bars in the gauge.\r\n     */\r\n    get paletteExtensionMode() {\r\n        return this._getOption('paletteExtensionMode');\r\n    }\r\n    set paletteExtensionMode(value) {\r\n        this._setOption('paletteExtensionMode', value);\r\n    }\r\n    /**\r\n     * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n     */\r\n    get pathModified() {\r\n        return this._getOption('pathModified');\r\n    }\r\n    set pathModified(value) {\r\n        this._setOption('pathModified', value);\r\n    }\r\n    /**\r\n     * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n     */\r\n    get redrawOnResize() {\r\n        return this._getOption('redrawOnResize');\r\n    }\r\n    set redrawOnResize(value) {\r\n        this._setOption('redrawOnResize', value);\r\n    }\r\n    /**\r\n     * Defines the radius of the bar that is closest to the center relatively to the radius of the topmost bar.\r\n     */\r\n    get relativeInnerRadius() {\r\n        return this._getOption('relativeInnerRadius');\r\n    }\r\n    set relativeInnerRadius(value) {\r\n        this._setOption('relativeInnerRadius', value);\r\n    }\r\n    /**\r\n     * Specifies how the widget should behave when bar labels overlap: hide certain labels or leave them overlapped.\r\n     */\r\n    get resolveLabelOverlapping() {\r\n        return this._getOption('resolveLabelOverlapping');\r\n    }\r\n    set resolveLabelOverlapping(value) {\r\n        this._setOption('resolveLabelOverlapping', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's size in pixels.\r\n     */\r\n    get size() {\r\n        return this._getOption('size');\r\n    }\r\n    set size(value) {\r\n        this._setOption('size', value);\r\n    }\r\n    /**\r\n     * Specifies a start value for the gauge's invisible scale.\r\n     */\r\n    get startValue() {\r\n        return this._getOption('startValue');\r\n    }\r\n    set startValue(value) {\r\n        this._setOption('startValue', value);\r\n    }\r\n    /**\r\n     * Sets the name of the theme the widget uses.\r\n     */\r\n    get theme() {\r\n        return this._getOption('theme');\r\n    }\r\n    set theme(value) {\r\n        this._setOption('theme', value);\r\n    }\r\n    /**\r\n     * Configures the widget's title.\r\n     */\r\n    get title() {\r\n        return this._getOption('title');\r\n    }\r\n    set title(value) {\r\n        this._setOption('title', value);\r\n    }\r\n    /**\r\n     * Configures tooltips.\r\n     */\r\n    get tooltip() {\r\n        return this._getOption('tooltip');\r\n    }\r\n    set tooltip(value) {\r\n        this._setOption('tooltip', value);\r\n    }\r\n    /**\r\n     * Specifies the array of values to be indicated on a bar gauge.\r\n     */\r\n    get values() {\r\n        return this._getOption('values');\r\n    }\r\n    set values(value) {\r\n        this._setOption('values', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxBarGauge(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('palette', changes);\r\n        this.setupChanges('values', changes);\r\n    }\r\n    setupChanges(prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        this._idh.doCheck('palette');\r\n        this._idh.doCheck('values');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n    _setOption(name, value) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n};\r\nDxBarGaugeComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: IterableDifferHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"animation\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxBarGaugeComponent.prototype, \"backgroundColor\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxBarGaugeComponent.prototype, \"barSpacing\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxBarGaugeComponent.prototype, \"baseValue\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxBarGaugeComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxBarGaugeComponent.prototype, \"endValue\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"export\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"geometry\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"label\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"legend\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"loadingIndicator\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"margin\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"palette\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxBarGaugeComponent.prototype, \"paletteExtensionMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxBarGaugeComponent.prototype, \"pathModified\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxBarGaugeComponent.prototype, \"redrawOnResize\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxBarGaugeComponent.prototype, \"relativeInnerRadius\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxBarGaugeComponent.prototype, \"resolveLabelOverlapping\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxBarGaugeComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"size\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxBarGaugeComponent.prototype, \"startValue\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxBarGaugeComponent.prototype, \"theme\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"title\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxBarGaugeComponent.prototype, \"tooltip\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], DxBarGaugeComponent.prototype, \"values\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onDrawn\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onExported\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onExporting\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onFileSaving\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onIncidentOccurred\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onTooltipHidden\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"onTooltipShown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"animationChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"backgroundColorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"barSpacingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"baseValueChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"endValueChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"exportChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"geometryChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"labelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"legendChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"marginChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"paletteChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"paletteExtensionModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"pathModifiedChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"relativeInnerRadiusChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"resolveLabelOverlappingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"sizeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"startValueChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"themeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"titleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"tooltipChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxBarGaugeComponent.prototype, \"valuesChange\", void 0);\r\nDxBarGaugeComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-bar-gauge',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            IterableDifferHelper\r\n        ],\r\n        styles: [' :host {  display: block; }']\r\n    }),\r\n    __param(7, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        IterableDifferHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxBarGaugeComponent);\r\nlet DxBarGaugeModule = class DxBarGaugeModule {\r\n};\r\nDxBarGaugeModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoAnimationModule,\r\n            DxoExportModule,\r\n            DxoGeometryModule,\r\n            DxoLabelModule,\r\n            DxoFontModule,\r\n            DxoFormatModule,\r\n            DxoLegendModule,\r\n            DxoBorderModule,\r\n            DxoItemTextFormatModule,\r\n            DxoMarginModule,\r\n            DxoTitleModule,\r\n            DxoSubtitleModule,\r\n            DxoLoadingIndicatorModule,\r\n            DxoSizeModule,\r\n            DxoTooltipModule,\r\n            DxoShadowModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxBarGaugeComponent\r\n        ],\r\n        exports: [\r\n            DxBarGaugeComponent,\r\n            DxoAnimationModule,\r\n            DxoExportModule,\r\n            DxoGeometryModule,\r\n            DxoLabelModule,\r\n            DxoFontModule,\r\n            DxoFormatModule,\r\n            DxoLegendModule,\r\n            DxoBorderModule,\r\n            DxoItemTextFormatModule,\r\n            DxoMarginModule,\r\n            DxoTitleModule,\r\n            DxoSubtitleModule,\r\n            DxoLoadingIndicatorModule,\r\n            DxoSizeModule,\r\n            DxoTooltipModule,\r\n            DxoShadowModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxBarGaugeModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxBarGaugeComponent, DxBarGaugeModule };\n"]}