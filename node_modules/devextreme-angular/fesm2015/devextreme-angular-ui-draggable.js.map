{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-draggable.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAmLE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAkLiC,AAUhC;;;;;;;;;;;;;;;;EAOD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAkBoB","file":"devextreme-angular-ui-draggable.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxDraggable from 'devextreme/ui/draggable';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoCursorOffsetModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * Draggable is a user interface utility that allows widget elements to be dragged and dropped.\r\n */\r\nlet DxDraggableComponent = class DxDraggableComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'dragEnd', emit: 'onDragEnd' },\r\n            { subscribe: 'dragMove', emit: 'onDragMove' },\r\n            { subscribe: 'dragStart', emit: 'onDragStart' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { emit: 'autoScrollChange' },\r\n            { emit: 'boundaryChange' },\r\n            { emit: 'cloneChange' },\r\n            { emit: 'containerChange' },\r\n            { emit: 'cursorOffsetChange' },\r\n            { emit: 'dataChange' },\r\n            { emit: 'dragDirectionChange' },\r\n            { emit: 'dragTemplateChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'groupChange' },\r\n            { emit: 'handleChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollSensitivityChange' },\r\n            { emit: 'scrollSpeedChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Enables automatic scrolling while dragging an item beyond the viewport.\r\n     */\r\n    get autoScroll() {\r\n        return this._getOption('autoScroll');\r\n    }\r\n    set autoScroll(value) {\r\n        this._setOption('autoScroll', value);\r\n    }\r\n    /**\r\n     * Specifies a DOM element that limits the dragging area.\r\n     */\r\n    get boundary() {\r\n        return this._getOption('boundary');\r\n    }\r\n    set boundary(value) {\r\n        this._setOption('boundary', value);\r\n    }\r\n    /**\r\n     * Allows a user to drag clones of items instead of actual items.\r\n     */\r\n    get clone() {\r\n        return this._getOption('clone');\r\n    }\r\n    set clone(value) {\r\n        this._setOption('clone', value);\r\n    }\r\n    /**\r\n     * Specifies a custom container in which the draggable item should be rendered.\r\n     */\r\n    get container() {\r\n        return this._getOption('container');\r\n    }\r\n    set container(value) {\r\n        this._setOption('container', value);\r\n    }\r\n    /**\r\n     * Specifies the cursor offset from the dragged item.\r\n     */\r\n    get cursorOffset() {\r\n        return this._getOption('cursorOffset');\r\n    }\r\n    set cursorOffset(value) {\r\n        this._setOption('cursorOffset', value);\r\n    }\r\n    /**\r\n     * A container for custom data.\r\n     */\r\n    get data() {\r\n        return this._getOption('data');\r\n    }\r\n    set data(value) {\r\n        this._setOption('data', value);\r\n    }\r\n    /**\r\n     * Specifies the directions in which an item can be dragged.\r\n     */\r\n    get dragDirection() {\r\n        return this._getOption('dragDirection');\r\n    }\r\n    set dragDirection(value) {\r\n        this._setOption('dragDirection', value);\r\n    }\r\n    /**\r\n     * Specifies custom markup to be shown instead of the item being dragged.\r\n     */\r\n    get dragTemplate() {\r\n        return this._getOption('dragTemplate');\r\n    }\r\n    set dragTemplate(value) {\r\n        this._setOption('dragTemplate', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Allows you to group several widgets, so that users can drag and drop items between them.\r\n     */\r\n    get group() {\r\n        return this._getOption('group');\r\n    }\r\n    set group(value) {\r\n        this._setOption('group', value);\r\n    }\r\n    /**\r\n     * Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s).\r\n     */\r\n    get handle() {\r\n        return this._getOption('handle');\r\n    }\r\n    set handle(value) {\r\n        this._setOption('handle', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    get height() {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value) {\r\n        this._setOption('height', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.\r\n     */\r\n    get scrollSensitivity() {\r\n        return this._getOption('scrollSensitivity');\r\n    }\r\n    set scrollSensitivity(value) {\r\n        this._setOption('scrollSensitivity', value);\r\n    }\r\n    /**\r\n     * Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true.\r\n     */\r\n    get scrollSpeed() {\r\n        return this._getOption('scrollSpeed');\r\n    }\r\n    set scrollSpeed(value) {\r\n        this._setOption('scrollSpeed', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    get width() {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value) {\r\n        this._setOption('width', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxDraggable(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n};\r\nDxDraggableComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDraggableComponent.prototype, \"autoScroll\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDraggableComponent.prototype, \"boundary\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDraggableComponent.prototype, \"clone\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDraggableComponent.prototype, \"container\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDraggableComponent.prototype, \"cursorOffset\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDraggableComponent.prototype, \"data\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDraggableComponent.prototype, \"dragDirection\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDraggableComponent.prototype, \"dragTemplate\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDraggableComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDraggableComponent.prototype, \"group\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDraggableComponent.prototype, \"handle\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDraggableComponent.prototype, \"height\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDraggableComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDraggableComponent.prototype, \"scrollSensitivity\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDraggableComponent.prototype, \"scrollSpeed\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDraggableComponent.prototype, \"width\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"onDragEnd\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"onDragMove\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"onDragStart\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"autoScrollChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"boundaryChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"cloneChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"containerChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"cursorOffsetChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"dataChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"dragDirectionChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"dragTemplateChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"groupChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"handleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"heightChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"scrollSensitivityChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"scrollSpeedChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDraggableComponent.prototype, \"widthChange\", void 0);\r\nDxDraggableComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-draggable',\r\n        template: '<ng-content></ng-content>',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost\r\n        ]\r\n    }),\r\n    __param(6, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxDraggableComponent);\r\nlet DxDraggableModule = class DxDraggableModule {\r\n};\r\nDxDraggableModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoCursorOffsetModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxDraggableComponent\r\n        ],\r\n        exports: [\r\n            DxDraggableComponent,\r\n            DxoCursorOffsetModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxDraggableModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxDraggableComponent, DxDraggableModule };\n"]}