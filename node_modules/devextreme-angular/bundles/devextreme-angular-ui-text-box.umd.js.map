{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/bundles/devextreme-angular-ui-text-box.umd.js"],"names":[],"mappings":"AAAA;oNAC2E;gMACgB;gJACrD;+CACnyCA8sCsB,AAY9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMoB;;;;;SAKtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAoBmB","file":"devextreme-angular-ui-text-box.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/ui/text_box'), require('@angular/forms'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :\n    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/text-box', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/ui/text_box', '@angular/forms', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :\n    (global = global || self, factory((global['devextreme-angular'] = global['devextreme-angular'] || {}, global['devextreme-angular'].ui = global['devextreme-angular'].ui || {}, global['devextreme-angular'].ui['text-box'] = {}), global.ng.platformBrowser, global.ng.core, global.DxTextBox, global.ng.forms, global['devextreme-angular'].core, global['devextreme-angular'].ui.nested));\n}(this, (function (exports, platformBrowser, core, DxTextBox, forms, core$1, nested) { 'use strict';\n\n    DxTextBox = DxTextBox && DxTextBox.hasOwnProperty('default') ? DxTextBox['default'] : DxTextBox;\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /*!\r\n     * devextreme-angular\r\n     * Version: 19.2.6\r\n     * Build date: Thu Jan 30 2020\r\n     *\r\n     * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n     *\r\n     * This software may be modified and distributed under the terms\r\n     * of the MIT license. See the LICENSE file in the root of the project for details.\r\n     *\r\n     * https://github.com/DevExpress/devextreme-angular\r\n     */\r\n    var CUSTOM_VALUE_ACCESSOR_PROVIDER = {\r\n        provide: forms.NG_VALUE_ACCESSOR,\r\n        useExisting: core.forwardRef(function () { return DxTextBoxComponent; }),\r\n        multi: true\r\n    };\r\n    /**\r\n     * The TextBox is a widget that enables a user to enter and edit a single line of text.\r\n     */\r\n    var DxTextBoxComponent = /** @class */ (function (_super) {\r\n        __extends(DxTextBoxComponent, _super);\r\n        function DxTextBoxComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n            _this._watcherHelper = _watcherHelper;\r\n            _this._idh = _idh;\r\n            _this.touched = function (_) { };\r\n            _this._createEventEmitters([\r\n                { subscribe: 'change', emit: 'onChange' },\r\n                { subscribe: 'contentReady', emit: 'onContentReady' },\r\n                { subscribe: 'copy', emit: 'onCopy' },\r\n                { subscribe: 'cut', emit: 'onCut' },\r\n                { subscribe: 'disposing', emit: 'onDisposing' },\r\n                { subscribe: 'enterKey', emit: 'onEnterKey' },\r\n                { subscribe: 'focusIn', emit: 'onFocusIn' },\r\n                { subscribe: 'focusOut', emit: 'onFocusOut' },\r\n                { subscribe: 'initialized', emit: 'onInitialized' },\r\n                { subscribe: 'input', emit: 'onInput' },\r\n                { subscribe: 'keyDown', emit: 'onKeyDown' },\r\n                { subscribe: 'keyPress', emit: 'onKeyPress' },\r\n                { subscribe: 'keyUp', emit: 'onKeyUp' },\r\n                { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n                { subscribe: 'paste', emit: 'onPaste' },\r\n                { subscribe: 'valueChanged', emit: 'onValueChanged' },\r\n                { emit: 'accessKeyChange' },\r\n                { emit: 'activeStateEnabledChange' },\r\n                { emit: 'buttonsChange' },\r\n                { emit: 'disabledChange' },\r\n                { emit: 'elementAttrChange' },\r\n                { emit: 'focusStateEnabledChange' },\r\n                { emit: 'heightChange' },\r\n                { emit: 'hintChange' },\r\n                { emit: 'hoverStateEnabledChange' },\r\n                { emit: 'inputAttrChange' },\r\n                { emit: 'isValidChange' },\r\n                { emit: 'maskChange' },\r\n                { emit: 'maskCharChange' },\r\n                { emit: 'maskInvalidMessageChange' },\r\n                { emit: 'maskRulesChange' },\r\n                { emit: 'maxLengthChange' },\r\n                { emit: 'modeChange' },\r\n                { emit: 'nameChange' },\r\n                { emit: 'placeholderChange' },\r\n                { emit: 'readOnlyChange' },\r\n                { emit: 'rtlEnabledChange' },\r\n                { emit: 'showClearButtonChange' },\r\n                { emit: 'showMaskModeChange' },\r\n                { emit: 'spellcheckChange' },\r\n                { emit: 'stylingModeChange' },\r\n                { emit: 'tabIndexChange' },\r\n                { emit: 'textChange' },\r\n                { emit: 'useMaskedValueChange' },\r\n                { emit: 'validationErrorChange' },\r\n                { emit: 'validationErrorsChange' },\r\n                { emit: 'validationMessageModeChange' },\r\n                { emit: 'validationStatusChange' },\r\n                { emit: 'valueChange' },\r\n                { emit: 'valueChangeEventChange' },\r\n                { emit: 'visibleChange' },\r\n                { emit: 'widthChange' },\r\n                { emit: 'onBlur' }\r\n            ]);\r\n            _this._idh.setHost(_this);\r\n            optionHost.setHost(_this);\r\n            return _this;\r\n        }\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"accessKey\", {\r\n            /**\r\n             * Specifies the shortcut key that sets focus on the widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('accessKey');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('accessKey', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"activeStateEnabled\", {\r\n            /**\r\n             * Specifies whether or not the widget changes its state when interacting with a user.\r\n             */\r\n            get: function () {\r\n                return this._getOption('activeStateEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('activeStateEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"buttons\", {\r\n            /**\r\n             * Allows you to add custom buttons to the input text field.\r\n             */\r\n            get: function () {\r\n                return this._getOption('buttons');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('buttons', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"disabled\", {\r\n            /**\r\n             * Specifies whether the widget responds to user interaction.\r\n             */\r\n            get: function () {\r\n                return this._getOption('disabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('disabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"elementAttr\", {\r\n            /**\r\n             * Specifies the attributes to be attached to the widget's root element.\r\n             */\r\n            get: function () {\r\n                return this._getOption('elementAttr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('elementAttr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"focusStateEnabled\", {\r\n            /**\r\n             * Specifies whether the widget can be focused using keyboard navigation.\r\n             */\r\n            get: function () {\r\n                return this._getOption('focusStateEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('focusStateEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"height\", {\r\n            /**\r\n             * Specifies the widget's height.\r\n             */\r\n            get: function () {\r\n                return this._getOption('height');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('height', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"hint\", {\r\n            /**\r\n             * Specifies text for a hint that appears when a user pauses on the widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('hint');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('hint', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"hoverStateEnabled\", {\r\n            /**\r\n             * Specifies whether the widget changes its state when a user pauses on it.\r\n             */\r\n            get: function () {\r\n                return this._getOption('hoverStateEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('hoverStateEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"inputAttr\", {\r\n            /**\r\n             * Specifies the attributes to be passed on to the underlying HTML element.\r\n             */\r\n            get: function () {\r\n                return this._getOption('inputAttr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('inputAttr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"isValid\", {\r\n            /**\r\n             * Specifies or indicates whether the editor's value is valid.\r\n             */\r\n            get: function () {\r\n                return this._getOption('isValid');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('isValid', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"mask\", {\r\n            /**\r\n             * The editor mask that specifies the custom format of the entered string.\r\n             */\r\n            get: function () {\r\n                return this._getOption('mask');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('mask', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"maskChar\", {\r\n            /**\r\n             * Specifies a mask placeholder. A single character is recommended.\r\n             */\r\n            get: function () {\r\n                return this._getOption('maskChar');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('maskChar', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"maskInvalidMessage\", {\r\n            /**\r\n             * A message displayed when the entered text does not match the specified pattern.\r\n             */\r\n            get: function () {\r\n                return this._getOption('maskInvalidMessage');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('maskInvalidMessage', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"maskRules\", {\r\n            /**\r\n             * Specifies custom mask rules.\r\n             */\r\n            get: function () {\r\n                return this._getOption('maskRules');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('maskRules', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"maxLength\", {\r\n            /**\r\n             * Specifies the maximum number of characters you can enter into the textbox.\r\n             */\r\n            get: function () {\r\n                return this._getOption('maxLength');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('maxLength', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"mode\", {\r\n            /**\r\n             * The \"mode\" attribute value of the actual HTML input element representing the text box.\r\n             */\r\n            get: function () {\r\n                return this._getOption('mode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('mode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"name\", {\r\n            /**\r\n             * The value to be assigned to the `name` attribute of the underlying HTML element.\r\n             */\r\n            get: function () {\r\n                return this._getOption('name');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('name', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"placeholder\", {\r\n            /**\r\n             * The text displayed by the widget when the widget value is empty.\r\n             */\r\n            get: function () {\r\n                return this._getOption('placeholder');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('placeholder', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"readOnly\", {\r\n            /**\r\n             * Specifies whether the editor is read-only.\r\n             */\r\n            get: function () {\r\n                return this._getOption('readOnly');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('readOnly', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"rtlEnabled\", {\r\n            /**\r\n             * Switches the widget to a right-to-left representation.\r\n             */\r\n            get: function () {\r\n                return this._getOption('rtlEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('rtlEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"showClearButton\", {\r\n            /**\r\n             * Specifies whether to display the Clear button in the widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('showClearButton');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('showClearButton', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"showMaskMode\", {\r\n            /**\r\n             * Specifies when the widget shows the mask. Applies only if useMaskedValue is true.\r\n             */\r\n            get: function () {\r\n                return this._getOption('showMaskMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('showMaskMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"spellcheck\", {\r\n            /**\r\n             * Specifies whether or not the widget checks the inner text for spelling mistakes.\r\n             */\r\n            get: function () {\r\n                return this._getOption('spellcheck');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('spellcheck', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"stylingMode\", {\r\n            /**\r\n             * Specifies how the widget's text field is styled.\r\n             */\r\n            get: function () {\r\n                return this._getOption('stylingMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('stylingMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"tabIndex\", {\r\n            /**\r\n             * Specifies the number of the element when the Tab key is used for navigating.\r\n             */\r\n            get: function () {\r\n                return this._getOption('tabIndex');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('tabIndex', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"text\", {\r\n            /**\r\n             * The read-only option that holds the text displayed by the widget input element.\r\n             */\r\n            get: function () {\r\n                return this._getOption('text');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('text', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"useMaskedValue\", {\r\n            /**\r\n             * Specifies whether the value should contain mask characters or not.\r\n             */\r\n            get: function () {\r\n                return this._getOption('useMaskedValue');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('useMaskedValue', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"validationError\", {\r\n            /**\r\n             * Information on the broken validation rule. Contains the first item from the validationErrors array.\r\n             */\r\n            get: function () {\r\n                return this._getOption('validationError');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('validationError', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"validationErrors\", {\r\n            /**\r\n             * An array of the validation rules that failed.\r\n             */\r\n            get: function () {\r\n                return this._getOption('validationErrors');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('validationErrors', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"validationMessageMode\", {\r\n            /**\r\n             * Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed.\r\n             */\r\n            get: function () {\r\n                return this._getOption('validationMessageMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('validationMessageMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"validationStatus\", {\r\n            /**\r\n             * Indicates or specifies the current validation status.\r\n             */\r\n            get: function () {\r\n                return this._getOption('validationStatus');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('validationStatus', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"value\", {\r\n            /**\r\n             * Specifies a value the widget displays.\r\n             */\r\n            get: function () {\r\n                return this._getOption('value');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('value', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"valueChangeEvent\", {\r\n            /**\r\n             * Specifies the DOM events after which the widget's value should be updated.\r\n             */\r\n            get: function () {\r\n                return this._getOption('valueChangeEvent');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('valueChangeEvent', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"visible\", {\r\n            /**\r\n             * Specifies whether the widget is visible.\r\n             */\r\n            get: function () {\r\n                return this._getOption('visible');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('visible', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"width\", {\r\n            /**\r\n             * Specifies the widget's width.\r\n             */\r\n            get: function () {\r\n                return this._getOption('width');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('width', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DxTextBoxComponent.prototype.change = function (_) { };\r\n        Object.defineProperty(DxTextBoxComponent.prototype, \"buttonsChildren\", {\r\n            get: function () {\r\n                return this._getOption('buttons');\r\n            },\r\n            set: function (value) {\r\n                this.setChildren('buttons', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DxTextBoxComponent.prototype._createInstance = function (element, options) {\r\n            return new DxTextBox(element, options);\r\n        };\r\n        DxTextBoxComponent.prototype.writeValue = function (value) {\r\n            this.eventHelper.lockedValueChangeEvent = true;\r\n            this.value = value;\r\n            this.eventHelper.lockedValueChangeEvent = false;\r\n        };\r\n        DxTextBoxComponent.prototype.setDisabledState = function (isDisabled) {\r\n            this.disabled = isDisabled;\r\n        };\r\n        DxTextBoxComponent.prototype.registerOnChange = function (fn) { this.change = fn; };\r\n        DxTextBoxComponent.prototype.registerOnTouched = function (fn) { this.touched = fn; };\r\n        DxTextBoxComponent.prototype._createWidget = function (element) {\r\n            var _this = this;\r\n            _super.prototype._createWidget.call(this, element);\r\n            this.instance.on('focusOut', function (e) {\r\n                _this.eventHelper.fireNgEvent('onBlur', [e]);\r\n            });\r\n        };\r\n        DxTextBoxComponent.prototype.ngOnDestroy = function () {\r\n            this._destroyWidget();\r\n        };\r\n        DxTextBoxComponent.prototype.ngOnChanges = function (changes) {\r\n            _super.prototype.ngOnChanges.call(this, changes);\r\n            this.setupChanges('buttons', changes);\r\n            this.setupChanges('validationErrors', changes);\r\n        };\r\n        DxTextBoxComponent.prototype.setupChanges = function (prop, changes) {\r\n            if (!(prop in this._optionsToUpdate)) {\r\n                this._idh.setup(prop, changes);\r\n            }\r\n        };\r\n        DxTextBoxComponent.prototype.ngDoCheck = function () {\r\n            this._idh.doCheck('buttons');\r\n            this._idh.doCheck('validationErrors');\r\n            this._watcherHelper.checkWatchers();\r\n            _super.prototype.ngDoCheck.call(this);\r\n            _super.prototype.clearChangedOptions.call(this);\r\n        };\r\n        DxTextBoxComponent.prototype._setOption = function (name, value) {\r\n            var isSetup = this._idh.setupSingle(name, value);\r\n            var isChanged = this._idh.getChanges(name, value) !== null;\r\n            if (isSetup || isChanged) {\r\n                _super.prototype._setOption.call(this, name, value);\r\n            }\r\n        };\r\n        DxTextBoxComponent.ctorParameters = function () { return [\r\n            { type: core.ElementRef },\r\n            { type: core.NgZone },\r\n            { type: core$1.DxTemplateHost },\r\n            { type: core$1.WatcherHelper },\r\n            { type: core$1.IterableDifferHelper },\r\n            { type: core$1.NestedOptionHost },\r\n            { type: platformBrowser.TransferState },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }\r\n        ]; };\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"accessKey\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"activeStateEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Array),\r\n            __metadata(\"design:paramtypes\", [Array])\r\n        ], DxTextBoxComponent.prototype, \"buttons\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"disabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTextBoxComponent.prototype, \"elementAttr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"focusStateEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTextBoxComponent.prototype, \"height\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"hint\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"hoverStateEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTextBoxComponent.prototype, \"inputAttr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"isValid\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"mask\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"maskChar\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"maskInvalidMessage\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTextBoxComponent.prototype, \"maskRules\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTextBoxComponent.prototype, \"maxLength\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"mode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"name\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"placeholder\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"readOnly\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"rtlEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"showClearButton\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"showMaskMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"spellcheck\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"stylingMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxTextBoxComponent.prototype, \"tabIndex\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"text\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"useMaskedValue\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTextBoxComponent.prototype, \"validationError\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Array),\r\n            __metadata(\"design:paramtypes\", [Array])\r\n        ], DxTextBoxComponent.prototype, \"validationErrors\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"validationMessageMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"validationStatus\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"value\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTextBoxComponent.prototype, \"valueChangeEvent\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTextBoxComponent.prototype, \"visible\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTextBoxComponent.prototype, \"width\", null);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onContentReady\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onCopy\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onCut\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onDisposing\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onEnterKey\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onFocusIn\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onFocusOut\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onInitialized\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onInput\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onKeyDown\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onKeyPress\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onKeyUp\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onOptionChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onPaste\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onValueChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"accessKeyChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"buttonsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"disabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"elementAttrChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"heightChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"hintChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"inputAttrChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"isValidChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"maskChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"maskCharChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"maskInvalidMessageChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"maskRulesChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"maxLengthChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"modeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"nameChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"placeholderChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"readOnlyChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"rtlEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"showClearButtonChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"showMaskModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"spellcheckChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"stylingModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"tabIndexChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"textChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"useMaskedValueChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"validationErrorChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"validationErrorsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"validationMessageModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"validationStatusChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"valueChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"valueChangeEventChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"visibleChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"widthChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTextBoxComponent.prototype, \"onBlur\", void 0);\r\n        __decorate([\r\n            core.HostListener('valueChange', ['$event']),\r\n            __metadata(\"design:type\", Function),\r\n            __metadata(\"design:paramtypes\", [Object]),\r\n            __metadata(\"design:returntype\", void 0)\r\n        ], DxTextBoxComponent.prototype, \"change\", null);\r\n        __decorate([\r\n            core.HostListener('onBlur', ['$event']),\r\n            __metadata(\"design:type\", Object)\r\n        ], DxTextBoxComponent.prototype, \"touched\", void 0);\r\n        __decorate([\r\n            core.ContentChildren(nested.DxiButtonComponent),\r\n            __metadata(\"design:type\", core.QueryList),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTextBoxComponent.prototype, \"buttonsChildren\", null);\r\n        DxTextBoxComponent = __decorate([\r\n            core.Component({\r\n                selector: 'dx-text-box',\r\n                template: '',\r\n                providers: [\r\n                    core$1.DxTemplateHost,\r\n                    core$1.WatcherHelper,\r\n                    CUSTOM_VALUE_ACCESSOR_PROVIDER,\r\n                    core$1.NestedOptionHost,\r\n                    core$1.IterableDifferHelper\r\n                ]\r\n            }),\r\n            __param(7, core.Inject(core.PLATFORM_ID)),\r\n            __metadata(\"design:paramtypes\", [core.ElementRef, core.NgZone, core$1.DxTemplateHost,\r\n                core$1.WatcherHelper,\r\n                core$1.IterableDifferHelper,\r\n                core$1.NestedOptionHost,\r\n                platformBrowser.TransferState, Object])\r\n        ], DxTextBoxComponent);\r\n        return DxTextBoxComponent;\r\n    }(core$1.DxComponent));\r\n    var DxTextBoxModule = /** @class */ (function () {\r\n        function DxTextBoxModule() {\r\n        }\r\n        DxTextBoxModule = __decorate([\r\n            core.NgModule({\r\n                imports: [\r\n                    nested.DxiButtonModule,\r\n                    nested.DxoOptionsModule,\r\n                    core$1.DxIntegrationModule,\r\n                    core$1.DxTemplateModule,\r\n                    platformBrowser.BrowserTransferStateModule\r\n                ],\r\n                declarations: [\r\n                    DxTextBoxComponent\r\n                ],\r\n                exports: [\r\n                    DxTextBoxComponent,\r\n                    nested.DxiButtonModule,\r\n                    nested.DxoOptionsModule,\r\n                    core$1.DxTemplateModule\r\n                ]\r\n            })\r\n        ], DxTextBoxModule);\r\n        return DxTextBoxModule;\r\n    }());\n\n    exports.DxTextBoxComponent = DxTextBoxComponent;\n    exports.DxTextBoxModule = DxTextBoxModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}