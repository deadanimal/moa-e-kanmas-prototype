{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-range-selector.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0NAmUE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA8RqC,AAapwB","file":"devextreme-angular-ui-range-selector.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, Component, NgModule } from '@angular/core';\nimport DxRangeSelector from 'devextreme/viz/range_selector';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nconst CUSTOM_VALUE_ACCESSOR_PROVIDER = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => DxRangeSelectorComponent),\r\n    multi: true\r\n};\r\n/**\r\n * The RangeSelector is a widget that allows a user to select a range of values on a scale.\r\n */\r\nlet DxRangeSelectorComponent = class DxRangeSelectorComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._watcherHelper = _watcherHelper;\r\n        this._idh = _idh;\r\n        this.touched = (_) => { };\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'valueChanged', emit: 'onValueChanged' },\r\n            { emit: 'backgroundChange' },\r\n            { emit: 'behaviorChange' },\r\n            { emit: 'chartChange' },\r\n            { emit: 'containerBackgroundColorChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'dataSourceFieldChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'indentChange' },\r\n            { emit: 'loadingIndicatorChange' },\r\n            { emit: 'marginChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'redrawOnResizeChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scaleChange' },\r\n            { emit: 'selectedRangeColorChange' },\r\n            { emit: 'selectedRangeUpdateModeChange' },\r\n            { emit: 'shutterChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'sliderHandleChange' },\r\n            { emit: 'sliderMarkerChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'titleChange' },\r\n            { emit: 'valueChange' },\r\n            { emit: 'onBlur' }\r\n        ]);\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Specifies the options for the range selector's background.\r\n     */\r\n    get background() {\r\n        return this._getOption('background');\r\n    }\r\n    set background(value) {\r\n        this._setOption('background', value);\r\n    }\r\n    /**\r\n     * Specifies the RangeSelector's behavior options.\r\n     */\r\n    get behavior() {\r\n        return this._getOption('behavior');\r\n    }\r\n    set behavior(value) {\r\n        this._setOption('behavior', value);\r\n    }\r\n    /**\r\n     * Specifies the options required to display a chart as the range selector's background.\r\n     */\r\n    get chart() {\r\n        return this._getOption('chart');\r\n    }\r\n    set chart(value) {\r\n        this._setOption('chart', value);\r\n    }\r\n    /**\r\n     * Specifies the color of the parent page element.\r\n     */\r\n    get containerBackgroundColor() {\r\n        return this._getOption('containerBackgroundColor');\r\n    }\r\n    set containerBackgroundColor(value) {\r\n        this._setOption('containerBackgroundColor', value);\r\n    }\r\n    /**\r\n     * Specifies a data source for the scale values and for the chart at the background.\r\n     */\r\n    get dataSource() {\r\n        return this._getOption('dataSource');\r\n    }\r\n    set dataSource(value) {\r\n        this._setOption('dataSource', value);\r\n    }\r\n    /**\r\n     * Specifies the data source field that provides data for the scale.\r\n     */\r\n    get dataSourceField() {\r\n        return this._getOption('dataSourceField');\r\n    }\r\n    set dataSourceField(value) {\r\n        this._setOption('dataSourceField', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to the user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Configures the exporting and printing features.\r\n     */\r\n    get export() {\r\n        return this._getOption('export');\r\n    }\r\n    set export(value) {\r\n        this._setOption('export', value);\r\n    }\r\n    /**\r\n     * Range selector's indent options.\r\n     */\r\n    get indent() {\r\n        return this._getOption('indent');\r\n    }\r\n    set indent(value) {\r\n        this._setOption('indent', value);\r\n    }\r\n    /**\r\n     * Configures the loading indicator.\r\n     */\r\n    get loadingIndicator() {\r\n        return this._getOption('loadingIndicator');\r\n    }\r\n    set loadingIndicator(value) {\r\n        this._setOption('loadingIndicator', value);\r\n    }\r\n    /**\r\n     * Generates space around the widget.\r\n     */\r\n    get margin() {\r\n        return this._getOption('margin');\r\n    }\r\n    set margin(value) {\r\n        this._setOption('margin', value);\r\n    }\r\n    /**\r\n     * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n     */\r\n    get pathModified() {\r\n        return this._getOption('pathModified');\r\n    }\r\n    set pathModified(value) {\r\n        this._setOption('pathModified', value);\r\n    }\r\n    /**\r\n     * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n     */\r\n    get redrawOnResize() {\r\n        return this._getOption('redrawOnResize');\r\n    }\r\n    set redrawOnResize(value) {\r\n        this._setOption('redrawOnResize', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies options of the range selector's scale.\r\n     */\r\n    get scale() {\r\n        return this._getOption('scale');\r\n    }\r\n    set scale(value) {\r\n        this._setOption('scale', value);\r\n    }\r\n    /**\r\n     * Specifies the color of the selected range.\r\n     */\r\n    get selectedRangeColor() {\r\n        return this._getOption('selectedRangeColor');\r\n    }\r\n    set selectedRangeColor(value) {\r\n        this._setOption('selectedRangeColor', value);\r\n    }\r\n    /**\r\n     * Specifies how the selected range should behave when data is updated. Applies only when the RangeSelector is bound to a data source.\r\n     */\r\n    get selectedRangeUpdateMode() {\r\n        return this._getOption('selectedRangeUpdateMode');\r\n    }\r\n    set selectedRangeUpdateMode(value) {\r\n        this._setOption('selectedRangeUpdateMode', value);\r\n    }\r\n    /**\r\n     * Specifies range selector shutter options.\r\n     */\r\n    get shutter() {\r\n        return this._getOption('shutter');\r\n    }\r\n    set shutter(value) {\r\n        this._setOption('shutter', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's size in pixels.\r\n     */\r\n    get size() {\r\n        return this._getOption('size');\r\n    }\r\n    set size(value) {\r\n        this._setOption('size', value);\r\n    }\r\n    /**\r\n     * Specifies the appearance of the range selector's slider handles.\r\n     */\r\n    get sliderHandle() {\r\n        return this._getOption('sliderHandle');\r\n    }\r\n    set sliderHandle(value) {\r\n        this._setOption('sliderHandle', value);\r\n    }\r\n    /**\r\n     * Defines the options of the range selector slider markers.\r\n     */\r\n    get sliderMarker() {\r\n        return this._getOption('sliderMarker');\r\n    }\r\n    set sliderMarker(value) {\r\n        this._setOption('sliderMarker', value);\r\n    }\r\n    /**\r\n     * Sets the name of the theme the widget uses.\r\n     */\r\n    get theme() {\r\n        return this._getOption('theme');\r\n    }\r\n    set theme(value) {\r\n        this._setOption('theme', value);\r\n    }\r\n    /**\r\n     * Configures the widget's title.\r\n     */\r\n    get title() {\r\n        return this._getOption('title');\r\n    }\r\n    set title(value) {\r\n        this._setOption('title', value);\r\n    }\r\n    /**\r\n     * The selected range (initial or current). Equals the entire scale when not set.\r\n     */\r\n    get value() {\r\n        return this._getOption('value');\r\n    }\r\n    set value(value) {\r\n        this._setOption('value', value);\r\n    }\r\n    change(_) { }\r\n    _createInstance(element, options) {\r\n        return new DxRangeSelector(element, options);\r\n    }\r\n    writeValue(value) {\r\n        this.eventHelper.lockedValueChangeEvent = true;\r\n        this.value = value;\r\n        this.eventHelper.lockedValueChangeEvent = false;\r\n    }\r\n    registerOnChange(fn) { this.change = fn; }\r\n    registerOnTouched(fn) { this.touched = fn; }\r\n    _createWidget(element) {\r\n        super._createWidget(element);\r\n        this.instance.on('focusOut', (e) => {\r\n            this.eventHelper.fireNgEvent('onBlur', [e]);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('dataSource', changes);\r\n        this.setupChanges('value', changes);\r\n    }\r\n    setupChanges(prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        this._idh.doCheck('dataSource');\r\n        this._idh.doCheck('value');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n    _setOption(name, value) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n};\r\nDxRangeSelectorComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: IterableDifferHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"background\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"behavior\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"chart\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxRangeSelectorComponent.prototype, \"containerBackgroundColor\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"dataSource\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxRangeSelectorComponent.prototype, \"dataSourceField\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxRangeSelectorComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"export\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"indent\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"loadingIndicator\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"margin\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxRangeSelectorComponent.prototype, \"pathModified\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxRangeSelectorComponent.prototype, \"redrawOnResize\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxRangeSelectorComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"scale\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxRangeSelectorComponent.prototype, \"selectedRangeColor\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxRangeSelectorComponent.prototype, \"selectedRangeUpdateMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"shutter\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"size\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"sliderHandle\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"sliderMarker\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxRangeSelectorComponent.prototype, \"theme\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"title\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxRangeSelectorComponent.prototype, \"value\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onDrawn\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onExported\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onExporting\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onFileSaving\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onIncidentOccurred\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onValueChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"backgroundChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"behaviorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"chartChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"containerBackgroundColorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"dataSourceChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"dataSourceFieldChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"exportChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"indentChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"marginChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"pathModifiedChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"scaleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"selectedRangeColorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"selectedRangeUpdateModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"shutterChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"sizeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"sliderHandleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"sliderMarkerChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"themeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"titleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"valueChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxRangeSelectorComponent.prototype, \"onBlur\", void 0);\r\n__decorate([\r\n    HostListener('valueChange', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], DxRangeSelectorComponent.prototype, \"change\", null);\r\n__decorate([\r\n    HostListener('onBlur', ['$event']),\r\n    __metadata(\"design:type\", Object)\r\n], DxRangeSelectorComponent.prototype, \"touched\", void 0);\r\nDxRangeSelectorComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-range-selector',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            CUSTOM_VALUE_ACCESSOR_PROVIDER,\r\n            NestedOptionHost,\r\n            IterableDifferHelper\r\n        ],\r\n        styles: [' :host {  display: block; }']\r\n    }),\r\n    __param(7, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        IterableDifferHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxRangeSelectorComponent);\r\nlet DxRangeSelectorModule = class DxRangeSelectorModule {\r\n};\r\nDxRangeSelectorModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoBackgroundModule,\r\n            DxoImageModule,\r\n            DxoBehaviorModule,\r\n            DxoChartModule,\r\n            DxoCommonSeriesSettingsModule,\r\n            DxoAggregationModule,\r\n            DxoAreaModule,\r\n            DxoBorderModule,\r\n            DxoHoverStyleModule,\r\n            DxoHatchingModule,\r\n            DxoLabelModule,\r\n            DxoConnectorModule,\r\n            DxoPointModule,\r\n            DxoHeightModule,\r\n            DxoUrlModule,\r\n            DxoWidthModule,\r\n            DxoSelectionStyleModule,\r\n            DxoReductionModule,\r\n            DxoValueErrorBarModule,\r\n            DxoBarModule,\r\n            DxoBubbleModule,\r\n            DxoCandlestickModule,\r\n            DxoFullstackedareaModule,\r\n            DxoFullstackedbarModule,\r\n            DxoFullstackedlineModule,\r\n            DxoFullstackedsplineModule,\r\n            DxoFullstackedsplineareaModule,\r\n            DxoArgumentFormatModule,\r\n            DxoFontModule,\r\n            DxoFormatModule,\r\n            DxoLineModule,\r\n            DxoRangeareaModule,\r\n            DxoRangebarModule,\r\n            DxoScatterModule,\r\n            DxoSplineModule,\r\n            DxoSplineareaModule,\r\n            DxoStackedareaModule,\r\n            DxoStackedbarModule,\r\n            DxoStackedlineModule,\r\n            DxoStackedsplineModule,\r\n            DxoStackedsplineareaModule,\r\n            DxoStepareaModule,\r\n            DxoSteplineModule,\r\n            DxoStockModule,\r\n            DxoDataPrepareSettingsModule,\r\n            DxiSeriesModule,\r\n            DxoSeriesTemplateModule,\r\n            DxoValueAxisModule,\r\n            DxoExportModule,\r\n            DxoIndentModule,\r\n            DxoLoadingIndicatorModule,\r\n            DxoMarginModule,\r\n            DxoScaleModule,\r\n            DxoAggregationIntervalModule,\r\n            DxiBreakModule,\r\n            DxoBreakStyleModule,\r\n            DxoMarkerModule,\r\n            DxoMaxRangeModule,\r\n            DxoMinorTickModule,\r\n            DxoMinorTickIntervalModule,\r\n            DxoMinRangeModule,\r\n            DxoTickModule,\r\n            DxoTickIntervalModule,\r\n            DxoShutterModule,\r\n            DxoSizeModule,\r\n            DxoSliderHandleModule,\r\n            DxoSliderMarkerModule,\r\n            DxoTitleModule,\r\n            DxoSubtitleModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxRangeSelectorComponent\r\n        ],\r\n        exports: [\r\n            DxRangeSelectorComponent,\r\n            DxoBackgroundModule,\r\n            DxoImageModule,\r\n            DxoBehaviorModule,\r\n            DxoChartModule,\r\n            DxoCommonSeriesSettingsModule,\r\n            DxoAggregationModule,\r\n            DxoAreaModule,\r\n            DxoBorderModule,\r\n            DxoHoverStyleModule,\r\n            DxoHatchingModule,\r\n            DxoLabelModule,\r\n            DxoConnectorModule,\r\n            DxoPointModule,\r\n            DxoHeightModule,\r\n            DxoUrlModule,\r\n            DxoWidthModule,\r\n            DxoSelectionStyleModule,\r\n            DxoReductionModule,\r\n            DxoValueErrorBarModule,\r\n            DxoBarModule,\r\n            DxoBubbleModule,\r\n            DxoCandlestickModule,\r\n            DxoFullstackedareaModule,\r\n            DxoFullstackedbarModule,\r\n            DxoFullstackedlineModule,\r\n            DxoFullstackedsplineModule,\r\n            DxoFullstackedsplineareaModule,\r\n            DxoArgumentFormatModule,\r\n            DxoFontModule,\r\n            DxoFormatModule,\r\n            DxoLineModule,\r\n            DxoRangeareaModule,\r\n            DxoRangebarModule,\r\n            DxoScatterModule,\r\n            DxoSplineModule,\r\n            DxoSplineareaModule,\r\n            DxoStackedareaModule,\r\n            DxoStackedbarModule,\r\n            DxoStackedlineModule,\r\n            DxoStackedsplineModule,\r\n            DxoStackedsplineareaModule,\r\n            DxoStepareaModule,\r\n            DxoSteplineModule,\r\n            DxoStockModule,\r\n            DxoDataPrepareSettingsModule,\r\n            DxiSeriesModule,\r\n            DxoSeriesTemplateModule,\r\n            DxoValueAxisModule,\r\n            DxoExportModule,\r\n            DxoIndentModule,\r\n            DxoLoadingIndicatorModule,\r\n            DxoMarginModule,\r\n            DxoScaleModule,\r\n            DxoAggregationIntervalModule,\r\n            DxiBreakModule,\r\n            DxoBreakStyleModule,\r\n            DxoMarkerModule,\r\n            DxoMaxRangeModule,\r\n            DxoMinorTickModule,\r\n            DxoMinorTickIntervalModule,\r\n            DxoMinRangeModule,\r\n            DxoTickModule,\r\n            DxoTickIntervalModule,\r\n            DxoShutterModule,\r\n            DxoSizeModule,\r\n            DxoSliderHandleModule,\r\n            DxoSliderMarkerModule,\r\n            DxoTitleModule,\r\n            DxoSubtitleModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxRangeSelectorModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxRangeSelectorComponent, DxRangeSelectorModule };\n"]}