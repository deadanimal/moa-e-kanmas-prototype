{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-defer-rendering.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2JAmLE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCAkLsC,AAUrC;;;;;;;;;;;;;;;;EAOD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAkByB","file":"devextreme-angular-ui-defer-rendering.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport 'devextreme/bundles/dx.all';\nimport DxDeferRendering from 'devextreme/ui/defer_rendering';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoAnimationModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The DeferRendering is a widget that waits for its content to be ready before rendering it. While the content is getting ready, the DeferRendering displays a loading indicator.\r\n */\r\nlet DxDeferRenderingComponent = class DxDeferRenderingComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._createEventEmitters([\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'rendered', emit: 'onRendered' },\r\n            { subscribe: 'shown', emit: 'onShown' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'animationChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'renderWhenChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'showLoadIndicatorChange' },\r\n            { emit: 'staggerItemSelectorChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Specifies the shortcut key that sets focus on the widget.\r\n     */\r\n    get accessKey() {\r\n        return this._getOption('accessKey');\r\n    }\r\n    set accessKey(value) {\r\n        this._setOption('accessKey', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the widget changes its state when interacting with a user.\r\n     */\r\n    get activeStateEnabled() {\r\n        return this._getOption('activeStateEnabled');\r\n    }\r\n    set activeStateEnabled(value) {\r\n        this._setOption('activeStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the animation to be used to show the rendered content.\r\n     */\r\n    get animation() {\r\n        return this._getOption('animation');\r\n    }\r\n    set animation(value) {\r\n        this._setOption('animation', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget can be focused using keyboard navigation.\r\n     */\r\n    get focusStateEnabled() {\r\n        return this._getOption('focusStateEnabled');\r\n    }\r\n    set focusStateEnabled(value) {\r\n        this._setOption('focusStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    get height() {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value) {\r\n        this._setOption('height', value);\r\n    }\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the widget.\r\n     */\r\n    get hint() {\r\n        return this._getOption('hint');\r\n    }\r\n    set hint(value) {\r\n        this._setOption('hint', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget changes its state when a user pauses on it.\r\n     */\r\n    get hoverStateEnabled() {\r\n        return this._getOption('hoverStateEnabled');\r\n    }\r\n    set hoverStateEnabled(value) {\r\n        this._setOption('hoverStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies when the widget content is rendered.\r\n     */\r\n    get renderWhen() {\r\n        return this._getOption('renderWhen');\r\n    }\r\n    set renderWhen(value) {\r\n        this._setOption('renderWhen', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Indicates if a load indicator should be shown until the widget's content is rendered.\r\n     */\r\n    get showLoadIndicator() {\r\n        return this._getOption('showLoadIndicator');\r\n    }\r\n    set showLoadIndicator(value) {\r\n        this._setOption('showLoadIndicator', value);\r\n    }\r\n    /**\r\n     * Specifies a jQuery selector of items that should be rendered using a staggered animation.\r\n     */\r\n    get staggerItemSelector() {\r\n        return this._getOption('staggerItemSelector');\r\n    }\r\n    set staggerItemSelector(value) {\r\n        this._setOption('staggerItemSelector', value);\r\n    }\r\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n     */\r\n    get tabIndex() {\r\n        return this._getOption('tabIndex');\r\n    }\r\n    set tabIndex(value) {\r\n        this._setOption('tabIndex', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget is visible.\r\n     */\r\n    get visible() {\r\n        return this._getOption('visible');\r\n    }\r\n    set visible(value) {\r\n        this._setOption('visible', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    get width() {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value) {\r\n        this._setOption('width', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxDeferRendering(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n};\r\nDxDeferRenderingComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDeferRenderingComponent.prototype, \"accessKey\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDeferRenderingComponent.prototype, \"activeStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDeferRenderingComponent.prototype, \"animation\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDeferRenderingComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDeferRenderingComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDeferRenderingComponent.prototype, \"focusStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDeferRenderingComponent.prototype, \"height\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDeferRenderingComponent.prototype, \"hint\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDeferRenderingComponent.prototype, \"hoverStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDeferRenderingComponent.prototype, \"renderWhen\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDeferRenderingComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDeferRenderingComponent.prototype, \"showLoadIndicator\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDeferRenderingComponent.prototype, \"staggerItemSelector\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDeferRenderingComponent.prototype, \"tabIndex\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDeferRenderingComponent.prototype, \"visible\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDeferRenderingComponent.prototype, \"width\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"onContentReady\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"onRendered\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"onShown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"accessKeyChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"animationChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"heightChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"hintChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"renderWhenChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"showLoadIndicatorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"staggerItemSelectorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"tabIndexChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"visibleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDeferRenderingComponent.prototype, \"widthChange\", void 0);\r\nDxDeferRenderingComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-defer-rendering',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost\r\n        ]\r\n    }),\r\n    __param(6, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxDeferRenderingComponent);\r\nlet DxDeferRenderingModule = class DxDeferRenderingModule {\r\n};\r\nDxDeferRenderingModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoAnimationModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxDeferRenderingComponent\r\n        ],\r\n        exports: [\r\n            DxDeferRenderingComponent,\r\n            DxoAnimationModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxDeferRenderingModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxDeferRenderingComponent, DxDeferRenderingModule };\n"]}