/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for typeahead
 */
import * as ɵngcc0 from '@angular/core';
export class TypeaheadConfig {
    constructor() {
        /**
         * sets use adaptive position
         */
        this.adaptivePosition = false;
        /**
         * turn on/off animation
         */
        this.isAnimated = false;
        /**
         * used to hide results on blur
         */
        this.hideResultsOnBlur = true;
        /**
         * used to choose the first item in typeahead container
         */
        this.selectFirstItem = true;
        /**
         * used to active/inactive the first item in typeahead container
         */
        this.isFirstItemActive = true;
        /**
         * used to choose set minimal no of characters that needs to
         * be entered before typeahead kicks-in
         */
        this.minLength = 1;
    }
}
TypeaheadConfig.ɵfac = function TypeaheadConfig_Factory(t) { return new (t || TypeaheadConfig)(); };
TypeaheadConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TypeaheadConfig, factory: TypeaheadConfig.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TypeaheadConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * sets use adaptive position
     * @type {?}
     */
    TypeaheadConfig.prototype.adaptivePosition;
    /**
     * turn on/off animation
     * @type {?}
     */
    TypeaheadConfig.prototype.isAnimated;
    /**
     * used to hide results on blur
     * @type {?}
     */
    TypeaheadConfig.prototype.hideResultsOnBlur;
    /**
     * used to choose the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.selectFirstItem;
    /**
     * used to active/inactive the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.isFirstItemActive;
    /**
     * used to choose set minimal no of characters that needs to
     * be entered before typeahead kicks-in
     * @type {?}
     */
    TypeaheadConfig.prototype.minLength;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL25neC1ib290c3RyYXAvdHlwZWFoZWFkL2VzbTIwMTUvdHlwZWFoZWFkLmNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTRCQzs7O2dEQUdDIiwiZmlsZSI6InR5cGVhaGVhZC5jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBEZWZhdWx0IHZhbHVlcyBwcm92aWRlciBmb3IgdHlwZWFoZWFkXG4gKi9cbmV4cG9ydCBjbGFzcyBUeXBlYWhlYWRDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogc2V0cyB1c2UgYWRhcHRpdmUgcG9zaXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWRhcHRpdmVQb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdHVybiBvbi9vZmYgYW5pbWF0aW9uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVzZWQgdG8gaGlkZSByZXN1bHRzIG9uIGJsdXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGlkZVJlc3VsdHNPbkJsdXIgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdXNlZCB0byBjaG9vc2UgdGhlIGZpcnN0IGl0ZW0gaW4gdHlwZWFoZWFkIGNvbnRhaW5lclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWxlY3RGaXJzdEl0ZW0gPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdXNlZCB0byBhY3RpdmUvaW5hY3RpdmUgdGhlIGZpcnN0IGl0ZW0gaW4gdHlwZWFoZWFkIGNvbnRhaW5lclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc0ZpcnN0SXRlbUFjdGl2ZSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VkIHRvIGNob29zZSBzZXQgbWluaW1hbCBubyBvZiBjaGFyYWN0ZXJzIHRoYXQgbmVlZHMgdG9cbiAgICAgICAgICogYmUgZW50ZXJlZCBiZWZvcmUgdHlwZWFoZWFkIGtpY2tzLWluXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1pbkxlbmd0aCA9IDE7XG4gICAgfVxufVxuVHlwZWFoZWFkQ29uZmlnLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbl07XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBzZXRzIHVzZSBhZGFwdGl2ZSBwb3NpdGlvblxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuYWRhcHRpdmVQb3NpdGlvbjtcbiAgICAvKipcbiAgICAgKiB0dXJuIG9uL29mZiBhbmltYXRpb25cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLmlzQW5pbWF0ZWQ7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBoaWRlIHJlc3VsdHMgb24gYmx1clxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuaGlkZVJlc3VsdHNPbkJsdXI7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBjaG9vc2UgdGhlIGZpcnN0IGl0ZW0gaW4gdHlwZWFoZWFkIGNvbnRhaW5lclxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuc2VsZWN0Rmlyc3RJdGVtO1xuICAgIC8qKlxuICAgICAqIHVzZWQgdG8gYWN0aXZlL2luYWN0aXZlIHRoZSBmaXJzdCBpdGVtIGluIHR5cGVhaGVhZCBjb250YWluZXJcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLmlzRmlyc3RJdGVtQWN0aXZlO1xuICAgIC8qKlxuICAgICAqIHVzZWQgdG8gY2hvb3NlIHNldCBtaW5pbWFsIG5vIG9mIGNoYXJhY3RlcnMgdGhhdCBuZWVkcyB0b1xuICAgICAqIGJlIGVudGVyZWQgYmVmb3JlIHR5cGVhaGVhZCBraWNrcy1pblxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUubWluTGVuZ3RoO1xufVxuIl19