{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/bundles/devextreme-angular-ui-tree-list.umd.js"],"names":[],"mappings":"AAAA;oNAC2E;iMACiB;gJACtD;+CACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CA8nEuB,AAW/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMqB;;;;;SAKvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAoHoB","file":"devextreme-angular-ui-tree-list.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/bundles/dx.all'), require('devextreme/ui/tree_list'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :\n    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/tree-list', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/bundles/dx.all', 'devextreme/ui/tree_list', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :\n    (global = global || self, factory((global['devextreme-angular'] = global['devextreme-angular'] || {}, global['devextreme-angular'].ui = global['devextreme-angular'].ui || {}, global['devextreme-angular'].ui['tree-list'] = {}), global.ng.platformBrowser, global.ng.core, null, global.DxTreeList, global['devextreme-angular'].core, global['devextreme-angular'].ui.nested));\n}(this, (function (exports, platformBrowser, core, dx_all, DxTreeList, core$1, nested) { 'use strict';\n\n    DxTreeList = DxTreeList && DxTreeList.hasOwnProperty('default') ? DxTreeList['default'] : DxTreeList;\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /*!\r\n     * devextreme-angular\r\n     * Version: 19.2.6\r\n     * Build date: Thu Jan 30 2020\r\n     *\r\n     * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n     *\r\n     * This software may be modified and distributed under the terms\r\n     * of the MIT license. See the LICENSE file in the root of the project for details.\r\n     *\r\n     * https://github.com/DevExpress/devextreme-angular\r\n     */\r\n    /**\r\n     * The TreeList is a widget that represents data from a local or remote source in the form of a multi-column tree view. This widget offers such features as sorting, filtering, editing, selection, etc.\r\n     */\r\n    var DxTreeListComponent = /** @class */ (function (_super) {\r\n        __extends(DxTreeListComponent, _super);\r\n        function DxTreeListComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n            _this._watcherHelper = _watcherHelper;\r\n            _this._idh = _idh;\r\n            _this._createEventEmitters([\r\n                { subscribe: 'adaptiveDetailRowPreparing', emit: 'onAdaptiveDetailRowPreparing' },\r\n                { subscribe: 'cellClick', emit: 'onCellClick' },\r\n                { subscribe: 'cellDblClick', emit: 'onCellDblClick' },\r\n                { subscribe: 'cellHoverChanged', emit: 'onCellHoverChanged' },\r\n                { subscribe: 'cellPrepared', emit: 'onCellPrepared' },\r\n                { subscribe: 'contentReady', emit: 'onContentReady' },\r\n                { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },\r\n                { subscribe: 'dataErrorOccurred', emit: 'onDataErrorOccurred' },\r\n                { subscribe: 'disposing', emit: 'onDisposing' },\r\n                { subscribe: 'editingStart', emit: 'onEditingStart' },\r\n                { subscribe: 'editorPrepared', emit: 'onEditorPrepared' },\r\n                { subscribe: 'editorPreparing', emit: 'onEditorPreparing' },\r\n                { subscribe: 'focusedCellChanged', emit: 'onFocusedCellChanged' },\r\n                { subscribe: 'focusedCellChanging', emit: 'onFocusedCellChanging' },\r\n                { subscribe: 'focusedRowChanged', emit: 'onFocusedRowChanged' },\r\n                { subscribe: 'focusedRowChanging', emit: 'onFocusedRowChanging' },\r\n                { subscribe: 'initialized', emit: 'onInitialized' },\r\n                { subscribe: 'initNewRow', emit: 'onInitNewRow' },\r\n                { subscribe: 'keyDown', emit: 'onKeyDown' },\r\n                { subscribe: 'nodesInitialized', emit: 'onNodesInitialized' },\r\n                { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n                { subscribe: 'rowClick', emit: 'onRowClick' },\r\n                { subscribe: 'rowCollapsed', emit: 'onRowCollapsed' },\r\n                { subscribe: 'rowCollapsing', emit: 'onRowCollapsing' },\r\n                { subscribe: 'rowDblClick', emit: 'onRowDblClick' },\r\n                { subscribe: 'rowExpanded', emit: 'onRowExpanded' },\r\n                { subscribe: 'rowExpanding', emit: 'onRowExpanding' },\r\n                { subscribe: 'rowInserted', emit: 'onRowInserted' },\r\n                { subscribe: 'rowInserting', emit: 'onRowInserting' },\r\n                { subscribe: 'rowPrepared', emit: 'onRowPrepared' },\r\n                { subscribe: 'rowRemoved', emit: 'onRowRemoved' },\r\n                { subscribe: 'rowRemoving', emit: 'onRowRemoving' },\r\n                { subscribe: 'rowUpdated', emit: 'onRowUpdated' },\r\n                { subscribe: 'rowUpdating', emit: 'onRowUpdating' },\r\n                { subscribe: 'rowValidating', emit: 'onRowValidating' },\r\n                { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },\r\n                { subscribe: 'toolbarPreparing', emit: 'onToolbarPreparing' },\r\n                { emit: 'accessKeyChange' },\r\n                { emit: 'activeStateEnabledChange' },\r\n                { emit: 'allowColumnReorderingChange' },\r\n                { emit: 'allowColumnResizingChange' },\r\n                { emit: 'autoExpandAllChange' },\r\n                { emit: 'autoNavigateToFocusedRowChange' },\r\n                { emit: 'cacheEnabledChange' },\r\n                { emit: 'cellHintEnabledChange' },\r\n                { emit: 'columnAutoWidthChange' },\r\n                { emit: 'columnChooserChange' },\r\n                { emit: 'columnFixingChange' },\r\n                { emit: 'columnHidingEnabledChange' },\r\n                { emit: 'columnMinWidthChange' },\r\n                { emit: 'columnResizingModeChange' },\r\n                { emit: 'columnsChange' },\r\n                { emit: 'columnWidthChange' },\r\n                { emit: 'customizeColumnsChange' },\r\n                { emit: 'dataSourceChange' },\r\n                { emit: 'dataStructureChange' },\r\n                { emit: 'dateSerializationFormatChange' },\r\n                { emit: 'disabledChange' },\r\n                { emit: 'editingChange' },\r\n                { emit: 'elementAttrChange' },\r\n                { emit: 'errorRowEnabledChange' },\r\n                { emit: 'expandedRowKeysChange' },\r\n                { emit: 'expandNodesOnFilteringChange' },\r\n                { emit: 'filterBuilderChange' },\r\n                { emit: 'filterBuilderPopupChange' },\r\n                { emit: 'filterModeChange' },\r\n                { emit: 'filterPanelChange' },\r\n                { emit: 'filterRowChange' },\r\n                { emit: 'filterSyncEnabledChange' },\r\n                { emit: 'filterValueChange' },\r\n                { emit: 'focusedColumnIndexChange' },\r\n                { emit: 'focusedRowEnabledChange' },\r\n                { emit: 'focusedRowIndexChange' },\r\n                { emit: 'focusedRowKeyChange' },\r\n                { emit: 'focusStateEnabledChange' },\r\n                { emit: 'hasItemsExprChange' },\r\n                { emit: 'headerFilterChange' },\r\n                { emit: 'heightChange' },\r\n                { emit: 'highlightChangesChange' },\r\n                { emit: 'hintChange' },\r\n                { emit: 'hoverStateEnabledChange' },\r\n                { emit: 'itemsExprChange' },\r\n                { emit: 'keyboardNavigationChange' },\r\n                { emit: 'keyExprChange' },\r\n                { emit: 'loadPanelChange' },\r\n                { emit: 'noDataTextChange' },\r\n                { emit: 'pagerChange' },\r\n                { emit: 'pagingChange' },\r\n                { emit: 'parentIdExprChange' },\r\n                { emit: 'remoteOperationsChange' },\r\n                { emit: 'renderAsyncChange' },\r\n                { emit: 'repaintChangesOnlyChange' },\r\n                { emit: 'rootValueChange' },\r\n                { emit: 'rowAlternationEnabledChange' },\r\n                { emit: 'rowDraggingChange' },\r\n                { emit: 'rtlEnabledChange' },\r\n                { emit: 'scrollingChange' },\r\n                { emit: 'searchPanelChange' },\r\n                { emit: 'selectedRowKeysChange' },\r\n                { emit: 'selectionChange' },\r\n                { emit: 'showBordersChange' },\r\n                { emit: 'showColumnHeadersChange' },\r\n                { emit: 'showColumnLinesChange' },\r\n                { emit: 'showRowLinesChange' },\r\n                { emit: 'sortingChange' },\r\n                { emit: 'stateStoringChange' },\r\n                { emit: 'tabIndexChange' },\r\n                { emit: 'twoWayBindingEnabledChange' },\r\n                { emit: 'visibleChange' },\r\n                { emit: 'widthChange' },\r\n                { emit: 'wordWrapEnabledChange' }\r\n            ]);\r\n            _this._idh.setHost(_this);\r\n            optionHost.setHost(_this);\r\n            return _this;\r\n        }\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"accessKey\", {\r\n            /**\r\n             * Specifies the shortcut key that sets focus on the widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('accessKey');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('accessKey', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"activeStateEnabled\", {\r\n            /**\r\n             * Specifies whether or not the widget changes its state when interacting with a user.\r\n             */\r\n            get: function () {\r\n                return this._getOption('activeStateEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('activeStateEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"allowColumnReordering\", {\r\n            /**\r\n             * Specifies whether a user can reorder columns.\r\n             */\r\n            get: function () {\r\n                return this._getOption('allowColumnReordering');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('allowColumnReordering', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"allowColumnResizing\", {\r\n            /**\r\n             * Specifies whether a user can resize columns.\r\n             */\r\n            get: function () {\r\n                return this._getOption('allowColumnResizing');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('allowColumnResizing', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"autoExpandAll\", {\r\n            /**\r\n             * Specifies whether all rows are expanded initially.\r\n             */\r\n            get: function () {\r\n                return this._getOption('autoExpandAll');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('autoExpandAll', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"autoNavigateToFocusedRow\", {\r\n            /**\r\n             * Automatically scrolls to the focused row when the focusedRowKey is changed.\r\n             */\r\n            get: function () {\r\n                return this._getOption('autoNavigateToFocusedRow');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('autoNavigateToFocusedRow', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"cacheEnabled\", {\r\n            /**\r\n             * Specifies whether data should be cached.\r\n             */\r\n            get: function () {\r\n                return this._getOption('cacheEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('cacheEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"cellHintEnabled\", {\r\n            /**\r\n             * Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content.\r\n             */\r\n            get: function () {\r\n                return this._getOption('cellHintEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('cellHintEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"columnAutoWidth\", {\r\n            /**\r\n             * Specifies whether columns should adjust their widths to the content.\r\n             */\r\n            get: function () {\r\n                return this._getOption('columnAutoWidth');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('columnAutoWidth', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"columnChooser\", {\r\n            /**\r\n             * Configures the column chooser.\r\n             */\r\n            get: function () {\r\n                return this._getOption('columnChooser');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('columnChooser', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"columnFixing\", {\r\n            /**\r\n             * Configures column fixing.\r\n             */\r\n            get: function () {\r\n                return this._getOption('columnFixing');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('columnFixing', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"columnHidingEnabled\", {\r\n            /**\r\n             * Specifies whether the widget should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\".\r\n             */\r\n            get: function () {\r\n                return this._getOption('columnHidingEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('columnHidingEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"columnMinWidth\", {\r\n            /**\r\n             * Specifies the minimum width of columns.\r\n             */\r\n            get: function () {\r\n                return this._getOption('columnMinWidth');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('columnMinWidth', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"columnResizingMode\", {\r\n            /**\r\n             * Specifies how the widget resizes columns. Applies only if allowColumnResizing is true.\r\n             */\r\n            get: function () {\r\n                return this._getOption('columnResizingMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('columnResizingMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"columns\", {\r\n            /**\r\n             * Configures columns.\r\n             */\r\n            get: function () {\r\n                return this._getOption('columns');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('columns', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"columnWidth\", {\r\n            /**\r\n             * Specifies the width for all data columns. Has a lower priority than the column.width option.\r\n             */\r\n            get: function () {\r\n                return this._getOption('columnWidth');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('columnWidth', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"customizeColumns\", {\r\n            /**\r\n             * Customizes columns after they are created.\r\n             */\r\n            get: function () {\r\n                return this._getOption('customizeColumns');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('customizeColumns', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"dataSource\", {\r\n            /**\r\n             * Binds the widget to data.\r\n             */\r\n            get: function () {\r\n                return this._getOption('dataSource');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('dataSource', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"dataStructure\", {\r\n            /**\r\n             * Notifies the widget of the used data structure.\r\n             */\r\n            get: function () {\r\n                return this._getOption('dataStructure');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('dataStructure', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"dateSerializationFormat\", {\r\n            /**\r\n             * Specifies the format in which date-time values should be sent to the server. Use it only if you do not specify the dataSource at design time.\r\n             */\r\n            get: function () {\r\n                return this._getOption('dateSerializationFormat');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('dateSerializationFormat', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"disabled\", {\r\n            /**\r\n             * Specifies whether the widget responds to user interaction.\r\n             */\r\n            get: function () {\r\n                return this._getOption('disabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('disabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"editing\", {\r\n            /**\r\n             * Configures editing.\r\n             */\r\n            get: function () {\r\n                return this._getOption('editing');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('editing', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"elementAttr\", {\r\n            /**\r\n             * Specifies the attributes to be attached to the widget's root element.\r\n             */\r\n            get: function () {\r\n                return this._getOption('elementAttr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('elementAttr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"errorRowEnabled\", {\r\n            /**\r\n             * Indicates whether to show the error row.\r\n             */\r\n            get: function () {\r\n                return this._getOption('errorRowEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('errorRowEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"expandedRowKeys\", {\r\n            /**\r\n             * Specifies keys of the initially expanded rows.\r\n             */\r\n            get: function () {\r\n                return this._getOption('expandedRowKeys');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('expandedRowKeys', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"expandNodesOnFiltering\", {\r\n            /**\r\n             * Specifies whether nodes appear expanded or collapsed after filtering is applied.\r\n             */\r\n            get: function () {\r\n                return this._getOption('expandNodesOnFiltering');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('expandNodesOnFiltering', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"filterBuilder\", {\r\n            /**\r\n             * Configures the integrated filter builder.\r\n             */\r\n            get: function () {\r\n                return this._getOption('filterBuilder');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('filterBuilder', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"filterBuilderPopup\", {\r\n            /**\r\n             * Configures the popup in which the integrated filter builder is shown.\r\n             */\r\n            get: function () {\r\n                return this._getOption('filterBuilderPopup');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('filterBuilderPopup', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"filterMode\", {\r\n            /**\r\n             * Specifies whether filter and search results should include matching rows only, matching rows with ancestors, or matching rows with ancestors and descendants (full branch).\r\n             */\r\n            get: function () {\r\n                return this._getOption('filterMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('filterMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"filterPanel\", {\r\n            /**\r\n             * Configures the filter panel.\r\n             */\r\n            get: function () {\r\n                return this._getOption('filterPanel');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('filterPanel', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"filterRow\", {\r\n            /**\r\n             * Configures the filter row.\r\n             */\r\n            get: function () {\r\n                return this._getOption('filterRow');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('filterRow', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"filterSyncEnabled\", {\r\n            /**\r\n             * Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue option.\r\n             */\r\n            get: function () {\r\n                return this._getOption('filterSyncEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('filterSyncEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"filterValue\", {\r\n            /**\r\n             * Specifies a filter expression.\r\n             */\r\n            get: function () {\r\n                return this._getOption('filterValue');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('filterValue', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"focusedColumnIndex\", {\r\n            /**\r\n             * The index of the column that contains the focused data cell.\r\n             */\r\n            get: function () {\r\n                return this._getOption('focusedColumnIndex');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('focusedColumnIndex', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"focusedRowEnabled\", {\r\n            /**\r\n             * Specifies whether the focused row feature is enabled.\r\n             */\r\n            get: function () {\r\n                return this._getOption('focusedRowEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('focusedRowEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"focusedRowIndex\", {\r\n            /**\r\n             * Specifies the initially or currently focused grid row's index. Use it when focusedRowEnabled is true.\r\n             */\r\n            get: function () {\r\n                return this._getOption('focusedRowIndex');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('focusedRowIndex', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"focusedRowKey\", {\r\n            /**\r\n             * Specifies initially or currently focused grid row's key. Use it when focusedRowEnabled is true.\r\n             */\r\n            get: function () {\r\n                return this._getOption('focusedRowKey');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('focusedRowKey', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"focusStateEnabled\", {\r\n            /**\r\n             * Specifies whether the widget can be focused using keyboard navigation.\r\n             */\r\n            get: function () {\r\n                return this._getOption('focusStateEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('focusStateEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"hasItemsExpr\", {\r\n            /**\r\n             * Specifies which data field defines whether the node has children.\r\n             */\r\n            get: function () {\r\n                return this._getOption('hasItemsExpr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('hasItemsExpr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"headerFilter\", {\r\n            /**\r\n             * Configures the header filter feature.\r\n             */\r\n            get: function () {\r\n                return this._getOption('headerFilter');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('headerFilter', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"height\", {\r\n            /**\r\n             * Specifies the widget's height.\r\n             */\r\n            get: function () {\r\n                return this._getOption('height');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('height', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"highlightChanges\", {\r\n            /**\r\n             * Specifies whether to highlight rows and cells with edited data. repaintChangesOnly should be true.\r\n             */\r\n            get: function () {\r\n                return this._getOption('highlightChanges');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('highlightChanges', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"hint\", {\r\n            /**\r\n             * Specifies text for a hint that appears when a user pauses on the widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('hint');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('hint', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"hoverStateEnabled\", {\r\n            /**\r\n             * Specifies whether the widget changes its state when a user pauses on it.\r\n             */\r\n            get: function () {\r\n                return this._getOption('hoverStateEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('hoverStateEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"itemsExpr\", {\r\n            /**\r\n             * Specifies which data field contains nested items. Set this option when your data has a hierarchical structure.\r\n             */\r\n            get: function () {\r\n                return this._getOption('itemsExpr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('itemsExpr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"keyboardNavigation\", {\r\n            /**\r\n             * Configures keyboard navigation.\r\n             */\r\n            get: function () {\r\n                return this._getOption('keyboardNavigation');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('keyboardNavigation', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"keyExpr\", {\r\n            /**\r\n             * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique.\r\n             */\r\n            get: function () {\r\n                return this._getOption('keyExpr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('keyExpr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"loadPanel\", {\r\n            /**\r\n             * Configures the load panel.\r\n             */\r\n            get: function () {\r\n                return this._getOption('loadPanel');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('loadPanel', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"noDataText\", {\r\n            /**\r\n             * Specifies text shown when the widget does not display any data.\r\n             */\r\n            get: function () {\r\n                return this._getOption('noDataText');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('noDataText', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"pager\", {\r\n            /**\r\n             * Configures the pager.\r\n             */\r\n            get: function () {\r\n                return this._getOption('pager');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('pager', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"paging\", {\r\n            /**\r\n             * Configures paging.\r\n             */\r\n            get: function () {\r\n                return this._getOption('paging');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('paging', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"parentIdExpr\", {\r\n            /**\r\n             * Specifies which data field provides parent keys.\r\n             */\r\n            get: function () {\r\n                return this._getOption('parentIdExpr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('parentIdExpr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"remoteOperations\", {\r\n            /**\r\n             * Notifies the TreeList of the server's data processing operations. Applies only if data has a plain structure.\r\n             */\r\n            get: function () {\r\n                return this._getOption('remoteOperations');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('remoteOperations', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"renderAsync\", {\r\n            /**\r\n             * Specifies whether to render the filter row, command columns, and columns with showEditorAlways set to true after other elements.\r\n             */\r\n            get: function () {\r\n                return this._getOption('renderAsync');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('renderAsync', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"repaintChangesOnly\", {\r\n            /**\r\n             * Specifies whether to repaint only those cells whose data changed.\r\n             */\r\n            get: function () {\r\n                return this._getOption('repaintChangesOnly');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('repaintChangesOnly', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"rootValue\", {\r\n            /**\r\n             * Specifies the root node's identifier. Applies if dataStructure is \"plain\".\r\n             */\r\n            get: function () {\r\n                return this._getOption('rootValue');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('rootValue', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"rowAlternationEnabled\", {\r\n            /**\r\n             * Specifies whether rows should be shaded differently.\r\n             */\r\n            get: function () {\r\n                return this._getOption('rowAlternationEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('rowAlternationEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"rowDragging\", {\r\n            /**\r\n             * Configures row reordering using drag and drop gestures.\r\n             */\r\n            get: function () {\r\n                return this._getOption('rowDragging');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('rowDragging', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"rtlEnabled\", {\r\n            /**\r\n             * Switches the widget to a right-to-left representation.\r\n             */\r\n            get: function () {\r\n                return this._getOption('rtlEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('rtlEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"scrolling\", {\r\n            /**\r\n             * Configures scrolling.\r\n             */\r\n            get: function () {\r\n                return this._getOption('scrolling');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('scrolling', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"searchPanel\", {\r\n            /**\r\n             * Configures the search panel.\r\n             */\r\n            get: function () {\r\n                return this._getOption('searchPanel');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('searchPanel', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"selectedRowKeys\", {\r\n            /**\r\n             * Allows you to select rows or determine which rows are selected.\r\n             */\r\n            get: function () {\r\n                return this._getOption('selectedRowKeys');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('selectedRowKeys', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"selection\", {\r\n            /**\r\n             * Configures runtime selection.\r\n             */\r\n            get: function () {\r\n                return this._getOption('selection');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('selection', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"showBorders\", {\r\n            /**\r\n             * Specifies whether the outer borders of the widget are visible.\r\n             */\r\n            get: function () {\r\n                return this._getOption('showBorders');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('showBorders', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"showColumnHeaders\", {\r\n            /**\r\n             * Specifies whether column headers are visible.\r\n             */\r\n            get: function () {\r\n                return this._getOption('showColumnHeaders');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('showColumnHeaders', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"showColumnLines\", {\r\n            /**\r\n             * Specifies whether vertical lines that separate one column from another are visible.\r\n             */\r\n            get: function () {\r\n                return this._getOption('showColumnLines');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('showColumnLines', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"showRowLines\", {\r\n            /**\r\n             * Specifies whether horizontal lines that separate one row from another are visible.\r\n             */\r\n            get: function () {\r\n                return this._getOption('showRowLines');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('showRowLines', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"sorting\", {\r\n            /**\r\n             * Configures runtime sorting.\r\n             */\r\n            get: function () {\r\n                return this._getOption('sorting');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('sorting', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"stateStoring\", {\r\n            /**\r\n             * Configures state storing.\r\n             */\r\n            get: function () {\r\n                return this._getOption('stateStoring');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('stateStoring', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"tabIndex\", {\r\n            /**\r\n             * Specifies the number of the element when the Tab key is used for navigating.\r\n             */\r\n            get: function () {\r\n                return this._getOption('tabIndex');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('tabIndex', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"twoWayBindingEnabled\", {\r\n            /**\r\n             * Specifies whether to enable two-way data binding.\r\n             */\r\n            get: function () {\r\n                return this._getOption('twoWayBindingEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('twoWayBindingEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"visible\", {\r\n            /**\r\n             * Specifies whether the widget is visible.\r\n             */\r\n            get: function () {\r\n                return this._getOption('visible');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('visible', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"width\", {\r\n            /**\r\n             * Specifies the widget's width.\r\n             */\r\n            get: function () {\r\n                return this._getOption('width');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('width', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"wordWrapEnabled\", {\r\n            /**\r\n             * Specifies whether text that does not fit into a column should be wrapped.\r\n             */\r\n            get: function () {\r\n                return this._getOption('wordWrapEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('wordWrapEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxTreeListComponent.prototype, \"columnsChildren\", {\r\n            get: function () {\r\n                return this._getOption('columns');\r\n            },\r\n            set: function (value) {\r\n                this.setChildren('columns', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DxTreeListComponent.prototype._createInstance = function (element, options) {\r\n            return new DxTreeList(element, options);\r\n        };\r\n        DxTreeListComponent.prototype.ngOnDestroy = function () {\r\n            this._destroyWidget();\r\n        };\r\n        DxTreeListComponent.prototype.ngOnChanges = function (changes) {\r\n            _super.prototype.ngOnChanges.call(this, changes);\r\n            this.setupChanges('columns', changes);\r\n            this.setupChanges('dataSource', changes);\r\n            this.setupChanges('expandedRowKeys', changes);\r\n            this.setupChanges('selectedRowKeys', changes);\r\n        };\r\n        DxTreeListComponent.prototype.setupChanges = function (prop, changes) {\r\n            if (!(prop in this._optionsToUpdate)) {\r\n                this._idh.setup(prop, changes);\r\n            }\r\n        };\r\n        DxTreeListComponent.prototype.ngDoCheck = function () {\r\n            this._idh.doCheck('columns');\r\n            this._idh.doCheck('dataSource');\r\n            this._idh.doCheck('expandedRowKeys');\r\n            this._idh.doCheck('selectedRowKeys');\r\n            this._watcherHelper.checkWatchers();\r\n            _super.prototype.ngDoCheck.call(this);\r\n            _super.prototype.clearChangedOptions.call(this);\r\n        };\r\n        DxTreeListComponent.prototype._setOption = function (name, value) {\r\n            var isSetup = this._idh.setupSingle(name, value);\r\n            var isChanged = this._idh.getChanges(name, value) !== null;\r\n            if (isSetup || isChanged) {\r\n                _super.prototype._setOption.call(this, name, value);\r\n            }\r\n        };\r\n        DxTreeListComponent.ctorParameters = function () { return [\r\n            { type: core.ElementRef },\r\n            { type: core.NgZone },\r\n            { type: core$1.DxTemplateHost },\r\n            { type: core$1.WatcherHelper },\r\n            { type: core$1.IterableDifferHelper },\r\n            { type: core$1.NestedOptionHost },\r\n            { type: platformBrowser.TransferState },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }\r\n        ]; };\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTreeListComponent.prototype, \"accessKey\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"activeStateEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"allowColumnReordering\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"allowColumnResizing\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"autoExpandAll\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"autoNavigateToFocusedRow\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"cacheEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"cellHintEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"columnAutoWidth\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"columnChooser\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"columnFixing\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"columnHidingEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxTreeListComponent.prototype, \"columnMinWidth\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTreeListComponent.prototype, \"columnResizingMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Array),\r\n            __metadata(\"design:paramtypes\", [Array])\r\n        ], DxTreeListComponent.prototype, \"columns\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxTreeListComponent.prototype, \"columnWidth\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Function),\r\n            __metadata(\"design:paramtypes\", [Function])\r\n        ], DxTreeListComponent.prototype, \"customizeColumns\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"dataSource\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTreeListComponent.prototype, \"dataStructure\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTreeListComponent.prototype, \"dateSerializationFormat\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"disabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"editing\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"elementAttr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"errorRowEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Array),\r\n            __metadata(\"design:paramtypes\", [Array])\r\n        ], DxTreeListComponent.prototype, \"expandedRowKeys\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"expandNodesOnFiltering\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"filterBuilder\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"filterBuilderPopup\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTreeListComponent.prototype, \"filterMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"filterPanel\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"filterRow\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"filterSyncEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"filterValue\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxTreeListComponent.prototype, \"focusedColumnIndex\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"focusedRowEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxTreeListComponent.prototype, \"focusedRowIndex\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"focusedRowKey\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"focusStateEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"hasItemsExpr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"headerFilter\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"height\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"highlightChanges\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTreeListComponent.prototype, \"hint\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"hoverStateEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"itemsExpr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"keyboardNavigation\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"keyExpr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"loadPanel\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxTreeListComponent.prototype, \"noDataText\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"pager\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"paging\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"parentIdExpr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"remoteOperations\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"renderAsync\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"repaintChangesOnly\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"rootValue\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"rowAlternationEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"rowDragging\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"rtlEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"scrolling\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"searchPanel\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Array),\r\n            __metadata(\"design:paramtypes\", [Array])\r\n        ], DxTreeListComponent.prototype, \"selectedRowKeys\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"selection\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"showBorders\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"showColumnHeaders\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"showColumnLines\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"showRowLines\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"sorting\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"stateStoring\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxTreeListComponent.prototype, \"tabIndex\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"twoWayBindingEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"visible\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"width\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxTreeListComponent.prototype, \"wordWrapEnabled\", null);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onAdaptiveDetailRowPreparing\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onCellClick\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onCellDblClick\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onCellHoverChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onCellPrepared\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onContentReady\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onContextMenuPreparing\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onDataErrorOccurred\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onDisposing\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onEditingStart\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onEditorPrepared\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onEditorPreparing\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onFocusedCellChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onFocusedCellChanging\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onFocusedRowChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onFocusedRowChanging\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onInitialized\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onInitNewRow\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onKeyDown\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onNodesInitialized\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onOptionChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowClick\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowCollapsed\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowCollapsing\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowDblClick\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowExpanded\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowExpanding\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowInserted\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowInserting\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowPrepared\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowRemoved\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowRemoving\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowUpdated\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowUpdating\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onRowValidating\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onSelectionChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"onToolbarPreparing\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"accessKeyChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"allowColumnReorderingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"allowColumnResizingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"autoExpandAllChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"autoNavigateToFocusedRowChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"cacheEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"cellHintEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"columnAutoWidthChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"columnChooserChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"columnFixingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"columnHidingEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"columnMinWidthChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"columnResizingModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"columnsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"columnWidthChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"customizeColumnsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"dataSourceChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"dataStructureChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"dateSerializationFormatChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"disabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"editingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"elementAttrChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"errorRowEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"expandedRowKeysChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"expandNodesOnFilteringChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"filterBuilderChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"filterBuilderPopupChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"filterModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"filterPanelChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"filterRowChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"filterSyncEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"filterValueChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"focusedColumnIndexChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"focusedRowEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"focusedRowIndexChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"focusedRowKeyChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"hasItemsExprChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"headerFilterChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"heightChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"highlightChangesChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"hintChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"itemsExprChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"keyboardNavigationChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"keyExprChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"loadPanelChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"noDataTextChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"pagerChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"pagingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"parentIdExprChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"remoteOperationsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"renderAsyncChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"repaintChangesOnlyChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"rootValueChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"rowAlternationEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"rowDraggingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"rtlEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"scrollingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"searchPanelChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"selectedRowKeysChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"selectionChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"showBordersChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"showColumnHeadersChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"showColumnLinesChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"showRowLinesChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"sortingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"stateStoringChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"tabIndexChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"twoWayBindingEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"visibleChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"widthChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxTreeListComponent.prototype, \"wordWrapEnabledChange\", void 0);\r\n        __decorate([\r\n            core.ContentChildren(nested.DxiColumnComponent),\r\n            __metadata(\"design:type\", core.QueryList),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxTreeListComponent.prototype, \"columnsChildren\", null);\r\n        DxTreeListComponent = __decorate([\r\n            core.Component({\r\n                selector: 'dx-tree-list',\r\n                template: '',\r\n                providers: [\r\n                    core$1.DxTemplateHost,\r\n                    core$1.WatcherHelper,\r\n                    core$1.NestedOptionHost,\r\n                    core$1.IterableDifferHelper\r\n                ]\r\n            }),\r\n            __param(7, core.Inject(core.PLATFORM_ID)),\r\n            __metadata(\"design:paramtypes\", [core.ElementRef, core.NgZone, core$1.DxTemplateHost,\r\n                core$1.WatcherHelper,\r\n                core$1.IterableDifferHelper,\r\n                core$1.NestedOptionHost,\r\n                platformBrowser.TransferState, Object])\r\n        ], DxTreeListComponent);\r\n        return DxTreeListComponent;\r\n    }(core$1.DxComponent));\r\n    var DxTreeListModule = /** @class */ (function () {\r\n        function DxTreeListModule() {\r\n        }\r\n        DxTreeListModule = __decorate([\r\n            core.NgModule({\r\n                imports: [\r\n                    nested.DxoColumnChooserModule,\r\n                    nested.DxoColumnFixingModule,\r\n                    nested.DxoTextsModule,\r\n                    nested.DxiColumnModule,\r\n                    nested.DxiButtonModule,\r\n                    nested.DxoHeaderFilterModule,\r\n                    nested.DxoLookupModule,\r\n                    nested.DxoFormatModule,\r\n                    nested.DxoFormItemModule,\r\n                    nested.DxoLabelModule,\r\n                    nested.DxiValidationRuleModule,\r\n                    nested.DxoEditingModule,\r\n                    nested.DxoFormModule,\r\n                    nested.DxoColCountByScreenModule,\r\n                    nested.DxiItemModule,\r\n                    nested.DxoTabPanelOptionsModule,\r\n                    nested.DxiTabModule,\r\n                    nested.DxoButtonOptionsModule,\r\n                    nested.DxoPopupModule,\r\n                    nested.DxoAnimationModule,\r\n                    nested.DxoHideModule,\r\n                    nested.DxoShowModule,\r\n                    nested.DxoPositionModule,\r\n                    nested.DxoAtModule,\r\n                    nested.DxoBoundaryOffsetModule,\r\n                    nested.DxoCollisionModule,\r\n                    nested.DxoMyModule,\r\n                    nested.DxoOffsetModule,\r\n                    nested.DxiToolbarItemModule,\r\n                    nested.DxoFilterBuilderModule,\r\n                    nested.DxiCustomOperationModule,\r\n                    nested.DxiFieldModule,\r\n                    nested.DxoFilterOperationDescriptionsModule,\r\n                    nested.DxoGroupOperationDescriptionsModule,\r\n                    nested.DxoFilterBuilderPopupModule,\r\n                    nested.DxoFilterPanelModule,\r\n                    nested.DxoFilterRowModule,\r\n                    nested.DxoOperationDescriptionsModule,\r\n                    nested.DxoKeyboardNavigationModule,\r\n                    nested.DxoLoadPanelModule,\r\n                    nested.DxoPagerModule,\r\n                    nested.DxoPagingModule,\r\n                    nested.DxoRemoteOperationsModule,\r\n                    nested.DxoRowDraggingModule,\r\n                    nested.DxoCursorOffsetModule,\r\n                    nested.DxoScrollingModule,\r\n                    nested.DxoSearchPanelModule,\r\n                    nested.DxoSelectionModule,\r\n                    nested.DxoSortingModule,\r\n                    nested.DxoStateStoringModule,\r\n                    core$1.DxIntegrationModule,\r\n                    core$1.DxTemplateModule,\r\n                    platformBrowser.BrowserTransferStateModule\r\n                ],\r\n                declarations: [\r\n                    DxTreeListComponent\r\n                ],\r\n                exports: [\r\n                    DxTreeListComponent,\r\n                    nested.DxoColumnChooserModule,\r\n                    nested.DxoColumnFixingModule,\r\n                    nested.DxoTextsModule,\r\n                    nested.DxiColumnModule,\r\n                    nested.DxiButtonModule,\r\n                    nested.DxoHeaderFilterModule,\r\n                    nested.DxoLookupModule,\r\n                    nested.DxoFormatModule,\r\n                    nested.DxoFormItemModule,\r\n                    nested.DxoLabelModule,\r\n                    nested.DxiValidationRuleModule,\r\n                    nested.DxoEditingModule,\r\n                    nested.DxoFormModule,\r\n                    nested.DxoColCountByScreenModule,\r\n                    nested.DxiItemModule,\r\n                    nested.DxoTabPanelOptionsModule,\r\n                    nested.DxiTabModule,\r\n                    nested.DxoButtonOptionsModule,\r\n                    nested.DxoPopupModule,\r\n                    nested.DxoAnimationModule,\r\n                    nested.DxoHideModule,\r\n                    nested.DxoShowModule,\r\n                    nested.DxoPositionModule,\r\n                    nested.DxoAtModule,\r\n                    nested.DxoBoundaryOffsetModule,\r\n                    nested.DxoCollisionModule,\r\n                    nested.DxoMyModule,\r\n                    nested.DxoOffsetModule,\r\n                    nested.DxiToolbarItemModule,\r\n                    nested.DxoFilterBuilderModule,\r\n                    nested.DxiCustomOperationModule,\r\n                    nested.DxiFieldModule,\r\n                    nested.DxoFilterOperationDescriptionsModule,\r\n                    nested.DxoGroupOperationDescriptionsModule,\r\n                    nested.DxoFilterBuilderPopupModule,\r\n                    nested.DxoFilterPanelModule,\r\n                    nested.DxoFilterRowModule,\r\n                    nested.DxoOperationDescriptionsModule,\r\n                    nested.DxoKeyboardNavigationModule,\r\n                    nested.DxoLoadPanelModule,\r\n                    nested.DxoPagerModule,\r\n                    nested.DxoPagingModule,\r\n                    nested.DxoRemoteOperationsModule,\r\n                    nested.DxoRowDraggingModule,\r\n                    nested.DxoCursorOffsetModule,\r\n                    nested.DxoScrollingModule,\r\n                    nested.DxoSearchPanelModule,\r\n                    nested.DxoSelectionModule,\r\n                    nested.DxoSortingModule,\r\n                    nested.DxoStateStoringModule,\r\n                    core$1.DxTemplateModule\r\n                ]\r\n            })\r\n        ], DxTreeListModule);\r\n        return DxTreeListModule;\r\n    }());\n\n    exports.DxTreeListComponent = DxTreeListComponent;\n    exports.DxTreeListModule = DxTreeListModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}