/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
import { NgModule, Inject, NgZone, Optional } from '@angular/core';
import { XhrFactory } from '@angular/common/http';
import * as httpRequest from 'devextreme/core/http_request';
import { DOCUMENT } from '@angular/common';
import * as domAdapter from 'devextreme/core/dom_adapter';
import * as readyCallbacks from 'devextreme/core/utils/ready_callbacks';
import * as eventsEngine from 'devextreme/events/core/events_engine';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
const outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
const insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
let originalAdd;
let callbacks = [];
readyCallbacks.inject({
    add: function (callback) {
        originalAdd = this.callBase.bind(this);
        callbacks.push(callback);
    }
});
let doInjections = (document, ngZone, xhrFactory) => {
    domAdapter.inject({
        _document: document,
        listen: function (...args) {
            const eventName = args[1];
            if (outsideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.runOutsideAngular(() => {
                    return this.callBase.apply(this, args);
                });
            }
            if (ngZone.isStable && insideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.run(() => {
                    return this.callBase.apply(this, args);
                });
            }
            return this.callBase.apply(this, args);
        },
        isElementNode: function (element) {
            return element && element.nodeType === 1;
        },
        isTextNode: function (element) {
            return element && element.nodeType === 3;
        },
        isDocument: function (element) {
            return element && element.nodeType === 9;
        }
    });
    httpRequest.inject({
        getXhr: function () {
            if (!xhrFactory) {
                return this.callBase.apply(this);
            }
            let _xhr = xhrFactory.build();
            if (!('withCredentials' in _xhr)) {
                _xhr['withCredentials'] = false;
            }
            return _xhr;
        }
    });
    const runReadyCallbacksInZone = () => {
        ngZone.run(() => {
            eventsEngine.set({});
            callbacks.forEach(callback => originalAdd.call(null, callback));
            callbacks = [];
            readyCallbacks.fire();
        });
    };
    runReadyCallbacksInZone();
    doInjections = runReadyCallbacksInZone;
};
const ɵ0 = doInjections;
let DxIntegrationModule = class DxIntegrationModule {
    constructor(document, ngZone, xhrFactory) {
        doInjections(document, ngZone, xhrFactory);
    }
};
DxIntegrationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxIntegrationModule });
DxIntegrationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxIntegrationModule_Factory(t) { return new (t || DxIntegrationModule)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory, 8)); } });
DxIntegrationModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone },
    { type: XhrFactory, decorators: [{ type: Optional }] }
];
DxIntegrationModule = tslib_1.__decorate([ tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__param(2, Optional()),
    tslib_1.__metadata("design:paramtypes", [Object, NgZone, XhrFactory])
], DxIntegrationModule);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxIntegrationModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.XhrFactory, decorators: [{
                type: Optional
            }] }]; }, null); })();
export { DxIntegrationModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL2RldmV4dHJlbWUtYW5ndWxhci9lc20yMDE1L2NvcmUvaW50ZWdyYXRpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c1BBaUVFOzs7Ozs7MENBTXdDLEFBRXZDOzs7Ozs7Ozs7OztrQ0FFcUIiLCJmaWxlIjoiaW50ZWdyYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqIFZlcnNpb246IDE5LjIuNlxyXG4gKiBCdWlsZCBkYXRlOiBUaHUgSmFuIDMwIDIwMjBcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xyXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcclxuICovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IE5nTW9kdWxlLCBJbmplY3QsIE5nWm9uZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgWGhyRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0ICogYXMgaHR0cFJlcXVlc3QgZnJvbSAnZGV2ZXh0cmVtZS9jb3JlL2h0dHBfcmVxdWVzdCc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0ICogYXMgZG9tQWRhcHRlciBmcm9tICdkZXZleHRyZW1lL2NvcmUvZG9tX2FkYXB0ZXInO1xyXG5pbXBvcnQgKiBhcyByZWFkeUNhbGxiYWNrcyBmcm9tICdkZXZleHRyZW1lL2NvcmUvdXRpbHMvcmVhZHlfY2FsbGJhY2tzJztcclxuaW1wb3J0ICogYXMgZXZlbnRzRW5naW5lIGZyb20gJ2RldmV4dHJlbWUvZXZlbnRzL2NvcmUvZXZlbnRzX2VuZ2luZSc7XHJcbmNvbnN0IG91dHNpZGVab25lRXZlbnRzID0gWydtb3VzZW1vdmUnLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0J107XHJcbmNvbnN0IGluc2lkZVpvbmVFdmVudHMgPSBbJ21vdXNldXAnLCAnY2xpY2snLCAnbW91c2Vkb3duJywgJ3RyYW5zaXRpb25lbmQnLCAnd2hlZWwnXTtcclxubGV0IG9yaWdpbmFsQWRkO1xyXG5sZXQgY2FsbGJhY2tzID0gW107XHJcbnJlYWR5Q2FsbGJhY2tzLmluamVjdCh7XHJcbiAgICBhZGQ6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIG9yaWdpbmFsQWRkID0gdGhpcy5jYWxsQmFzZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH1cclxufSk7XHJcbmxldCBkb0luamVjdGlvbnMgPSAoZG9jdW1lbnQsIG5nWm9uZSwgeGhyRmFjdG9yeSkgPT4ge1xyXG4gICAgZG9tQWRhcHRlci5pbmplY3Qoe1xyXG4gICAgICAgIF9kb2N1bWVudDogZG9jdW1lbnQsXHJcbiAgICAgICAgbGlzdGVuOiBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgICAgICBjb25zdCBldmVudE5hbWUgPSBhcmdzWzFdO1xyXG4gICAgICAgICAgICBpZiAob3V0c2lkZVpvbmVFdmVudHMuaW5kZXhPZihldmVudE5hbWUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsbEJhc2UuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobmdab25lLmlzU3RhYmxlICYmIGluc2lkZVpvbmVFdmVudHMuaW5kZXhPZihldmVudE5hbWUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGxCYXNlLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsbEJhc2UuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0VsZW1lbnROb2RlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNUZXh0Tm9kZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzRG9jdW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBodHRwUmVxdWVzdC5pbmplY3Qoe1xyXG4gICAgICAgIGdldFhocjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXhockZhY3RvcnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGxCYXNlLmFwcGx5KHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBfeGhyID0geGhyRmFjdG9yeS5idWlsZCgpO1xyXG4gICAgICAgICAgICBpZiAoISgnd2l0aENyZWRlbnRpYWxzJyBpbiBfeGhyKSkge1xyXG4gICAgICAgICAgICAgICAgX3hoclsnd2l0aENyZWRlbnRpYWxzJ10gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX3hocjtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHJ1blJlYWR5Q2FsbGJhY2tzSW5ab25lID0gKCkgPT4ge1xyXG4gICAgICAgIG5nWm9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudHNFbmdpbmUuc2V0KHt9KTtcclxuICAgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gb3JpZ2luYWxBZGQuY2FsbChudWxsLCBjYWxsYmFjaykpO1xyXG4gICAgICAgICAgICBjYWxsYmFja3MgPSBbXTtcclxuICAgICAgICAgICAgcmVhZHlDYWxsYmFja3MuZmlyZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJ1blJlYWR5Q2FsbGJhY2tzSW5ab25lKCk7XHJcbiAgICBkb0luamVjdGlvbnMgPSBydW5SZWFkeUNhbGxiYWNrc0luWm9uZTtcclxufTtcclxuY29uc3QgybUwID0gZG9JbmplY3Rpb25zO1xyXG5sZXQgRHhJbnRlZ3JhdGlvbk1vZHVsZSA9IGNsYXNzIER4SW50ZWdyYXRpb25Nb2R1bGUge1xyXG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIG5nWm9uZSwgeGhyRmFjdG9yeSkge1xyXG4gICAgICAgIGRvSW5qZWN0aW9ucyhkb2N1bWVudCwgbmdab25lLCB4aHJGYWN0b3J5KTtcclxuICAgIH1cclxufTtcclxuRHhJbnRlZ3JhdGlvbk1vZHVsZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcclxuICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtET0NVTUVOVCxdIH1dIH0sXHJcbiAgICB7IHR5cGU6IE5nWm9uZSB9LFxyXG4gICAgeyB0eXBlOiBYaHJGYWN0b3J5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9XSB9XHJcbl07XHJcbkR4SW50ZWdyYXRpb25Nb2R1bGUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgTmdNb2R1bGUoe30pLFxyXG4gICAgdHNsaWJfMS5fX3BhcmFtKDAsIEluamVjdChET0NVTUVOVCkpLCB0c2xpYl8xLl9fcGFyYW0oMiwgT3B0aW9uYWwoKSksXHJcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0LCBOZ1pvbmUsIFhockZhY3RvcnldKVxyXG5dLCBEeEludGVncmF0aW9uTW9kdWxlKTtcclxuZXhwb3J0IHsgRHhJbnRlZ3JhdGlvbk1vZHVsZSB9O1xyXG5leHBvcnQgeyDJtTAgfTtcciJdfQ==