{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/ngx-clipboard/bundles/ngx-clipboard.umd.js"],"names":[],"mappings":"AAAA;+HAC2E;4GACD;sEACpC;iCACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA0WoB,AAE5B;;;;;;;;;;;;;;kCACkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAsE6B;;;;;;;;;;;;;;;;;;;;;;;;;;oBAK3B;;;;;;;;;;;;;;;;;;;aAmBlB;;;;;;;;2IAK6B;;;;;;SAMjC;;;;;;;;;;;;;gDAOmB","file":"ngx-clipboard.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('ngx-window-token'), require('rxjs')) :\n    typeof define === 'function' && define.amd ? define('ngx-clipboard', ['exports', '@angular/common', '@angular/core', 'ngx-window-token', 'rxjs'], factory) :\n    (global = global || self, factory(global['ngx-clipboard'] = {}, global.ng.common, global.ng.core, global.ngxWindowToken, global.rxjs));\n}(this, (function (exports, common, core, ngxWindowToken, rxjs) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\r\n     * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n     */\r\n    var ClipboardService = /** @class */ (function () {\r\n        function ClipboardService(document, window) {\r\n            this.document = document;\r\n            this.window = window;\r\n            this.copySubject = new rxjs.Subject();\r\n            this.copyResponse$ = this.copySubject.asObservable();\r\n            this.config = {};\r\n        }\r\n        ClipboardService.prototype.configure = function (config) {\r\n            this.config = config;\r\n        };\r\n        ClipboardService.prototype.copy = function (content) {\r\n            if (!this.isSupported || !content) {\r\n                return this.pushCopyResponse({ isSuccess: false, content: content });\r\n            }\r\n            var copyResult = this.copyFromContent(content);\r\n            if (copyResult) {\r\n                return this.pushCopyResponse({ content: content, isSuccess: copyResult });\r\n            }\r\n            return this.pushCopyResponse({ isSuccess: false, content: content });\r\n        };\r\n        Object.defineProperty(ClipboardService.prototype, \"isSupported\", {\r\n            get: function () {\r\n                return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        ClipboardService.prototype.isTargetValid = function (element) {\r\n            if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n                if (element.hasAttribute('disabled')) {\r\n                    throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n                }\r\n                return true;\r\n            }\r\n            throw new Error('Target should be input or textarea');\r\n        };\r\n        /**\r\n         * Attempts to copy from an input `targetElm`\r\n         */\r\n        ClipboardService.prototype.copyFromInputElement = function (targetElm, isFocus) {\r\n            if (isFocus === void 0) { isFocus = true; }\r\n            try {\r\n                this.selectTarget(targetElm);\r\n                var re = this.copyText();\r\n                this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n                return re && this.isCopySuccessInIE11();\r\n            }\r\n            catch (error) {\r\n                return false;\r\n            }\r\n        };\r\n        /**\r\n         * This is a hack for IE11 to return `true` even if copy fails.\r\n         */\r\n        ClipboardService.prototype.isCopySuccessInIE11 = function () {\r\n            var clipboardData = this.window['clipboardData'];\r\n            if (clipboardData && clipboardData.getData) {\r\n                if (!clipboardData.getData('Text')) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        /**\r\n         * Creates a fake textarea element, sets its value from `text` property,\r\n         * and makes a selection on it.\r\n         */\r\n        ClipboardService.prototype.copyFromContent = function (content, container) {\r\n            if (container === void 0) { container = this.document.body; }\r\n            // check if the temp textarea still belongs to the current container.\r\n            // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n            if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n                this.destroy(this.tempTextArea.parentElement);\r\n            }\r\n            if (!this.tempTextArea) {\r\n                this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n                try {\r\n                    container.appendChild(this.tempTextArea);\r\n                }\r\n                catch (error) {\r\n                    throw new Error('Container should be a Dom element');\r\n                }\r\n            }\r\n            this.tempTextArea.value = content;\r\n            var toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n            if (this.config.cleanUpAfterCopy) {\r\n                this.destroy(this.tempTextArea.parentElement);\r\n            }\r\n            return toReturn;\r\n        };\r\n        /**\r\n         * Remove temporary textarea if any exists.\r\n         */\r\n        ClipboardService.prototype.destroy = function (container) {\r\n            if (container === void 0) { container = this.document.body; }\r\n            if (this.tempTextArea) {\r\n                container.removeChild(this.tempTextArea);\r\n                // removeChild doesn't remove the reference from memory\r\n                this.tempTextArea = undefined;\r\n            }\r\n        };\r\n        /**\r\n         * Select the target html input element.\r\n         */\r\n        ClipboardService.prototype.selectTarget = function (inputElement) {\r\n            inputElement.select();\r\n            inputElement.setSelectionRange(0, inputElement.value.length);\r\n            return inputElement.value.length;\r\n        };\r\n        ClipboardService.prototype.copyText = function () {\r\n            return this.document.execCommand('copy');\r\n        };\r\n        /**\r\n         * Moves focus away from `target` and back to the trigger, removes current selection.\r\n         */\r\n        ClipboardService.prototype.clearSelection = function (inputElement, window) {\r\n            inputElement && inputElement.focus();\r\n            window.getSelection().removeAllRanges();\r\n        };\r\n        /**\r\n         * Creates a fake textarea for copy command.\r\n         */\r\n        ClipboardService.prototype.createTempTextArea = function (doc, window) {\r\n            var isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n            var ta;\r\n            ta = doc.createElement('textarea');\r\n            // Prevent zooming on iOS\r\n            ta.style.fontSize = '12pt';\r\n            // Reset box model\r\n            ta.style.border = '0';\r\n            ta.style.padding = '0';\r\n            ta.style.margin = '0';\r\n            // Move element out of screen horizontally\r\n            ta.style.position = 'absolute';\r\n            ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n            // Move element to the same position vertically\r\n            var yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n            ta.style.top = yPosition + 'px';\r\n            ta.setAttribute('readonly', '');\r\n            return ta;\r\n        };\r\n        /**\r\n         * Pushes copy operation response to copySubject, to provide global access\r\n         * to the response.\r\n         */\r\n        ClipboardService.prototype.pushCopyResponse = function (response) {\r\n            this.copySubject.next(response);\r\n        };\r\n        /**\r\n         * @deprecated use pushCopyResponse instead.\r\n         */\r\n        ClipboardService.prototype.pushCopyReponse = function (response) {\r\n            this.pushCopyResponse(response);\r\n        };\r\n        ClipboardService.ctorParameters = function () { return [\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\r\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [ngxWindowToken.WINDOW,] }] }\r\n        ]; };\r\n        ClipboardService.ɵprov = core[\"ɵɵdefineInjectable\"]({ factory: function ClipboardService_Factory() { return new ClipboardService(core[\"ɵɵinject\"](common.DOCUMENT), core[\"ɵɵinject\"](ngxWindowToken.WINDOW, 8)); }, token: ClipboardService, providedIn: \"root\" });\r\n        ClipboardService = __decorate([\r\n            core.Injectable({ providedIn: 'root' }),\r\n            __param(0, core.Inject(common.DOCUMENT)), __param(1, core.Optional()), __param(1, core.Inject(ngxWindowToken.WINDOW))\r\n        ], ClipboardService);\r\n        return ClipboardService;\r\n    }());\n\n    var ClipboardDirective = /** @class */ (function () {\r\n        function ClipboardDirective(clipboardSrv) {\r\n            this.clipboardSrv = clipboardSrv;\r\n            this.cbOnSuccess = new core.EventEmitter();\r\n            this.cbOnError = new core.EventEmitter();\r\n        }\r\n        // tslint:disable-next-line:no-empty\r\n        ClipboardDirective.prototype.ngOnInit = function () { };\r\n        ClipboardDirective.prototype.ngOnDestroy = function () {\r\n            this.clipboardSrv.destroy(this.container);\r\n        };\r\n        ClipboardDirective.prototype.onClick = function (event) {\r\n            if (!this.clipboardSrv.isSupported) {\r\n                this.handleResult(false, undefined, event);\r\n            }\r\n            else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n                this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n            }\r\n            else if (this.cbContent) {\r\n                this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n            }\r\n        };\r\n        /**\r\n         * Fires an event based on the copy operation result.\r\n         * @param succeeded\r\n         */\r\n        ClipboardDirective.prototype.handleResult = function (succeeded, copiedContent, event) {\r\n            var response = {\r\n                isSuccess: succeeded,\r\n                event: event\r\n            };\r\n            if (succeeded) {\r\n                response = Object.assign(response, {\r\n                    content: copiedContent,\r\n                    successMessage: this.cbSuccessMsg\r\n                });\r\n                this.cbOnSuccess.emit(response);\r\n            }\r\n            else {\r\n                this.cbOnError.emit(response);\r\n            }\r\n            this.clipboardSrv.pushCopyResponse(response);\r\n        };\r\n        ClipboardDirective.ctorParameters = function () { return [\r\n            { type: ClipboardService }\r\n        ]; };\r\n        __decorate([\r\n            core.Input('ngxClipboard')\r\n        ], ClipboardDirective.prototype, \"targetElm\", void 0);\r\n        __decorate([\r\n            core.Input()\r\n        ], ClipboardDirective.prototype, \"container\", void 0);\r\n        __decorate([\r\n            core.Input()\r\n        ], ClipboardDirective.prototype, \"cbContent\", void 0);\r\n        __decorate([\r\n            core.Input()\r\n        ], ClipboardDirective.prototype, \"cbSuccessMsg\", void 0);\r\n        __decorate([\r\n            core.Output()\r\n        ], ClipboardDirective.prototype, \"cbOnSuccess\", void 0);\r\n        __decorate([\r\n            core.Output()\r\n        ], ClipboardDirective.prototype, \"cbOnError\", void 0);\r\n        __decorate([\r\n            core.HostListener('click', ['$event.target'])\r\n        ], ClipboardDirective.prototype, \"onClick\", null);\r\n        ClipboardDirective = __decorate([\r\n            core.Directive({\r\n                selector: '[ngxClipboard]'\r\n            })\r\n        ], ClipboardDirective);\r\n        return ClipboardDirective;\r\n    }());\n\n    var ClipboardIfSupportedDirective = /** @class */ (function () {\r\n        function ClipboardIfSupportedDirective(_clipboardService, _viewContainerRef, _templateRef) {\r\n            this._clipboardService = _clipboardService;\r\n            this._viewContainerRef = _viewContainerRef;\r\n            this._templateRef = _templateRef;\r\n        }\r\n        ClipboardIfSupportedDirective.prototype.ngOnInit = function () {\r\n            if (this._clipboardService.isSupported) {\r\n                this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n            }\r\n        };\r\n        ClipboardIfSupportedDirective.ctorParameters = function () { return [\r\n            { type: ClipboardService },\r\n            { type: core.ViewContainerRef },\r\n            { type: core.TemplateRef }\r\n        ]; };\r\n        ClipboardIfSupportedDirective = __decorate([\r\n            core.Directive({\r\n                selector: '[ngxClipboardIfSupported]'\r\n            })\r\n        ], ClipboardIfSupportedDirective);\r\n        return ClipboardIfSupportedDirective;\r\n    }());\n\n    var ClipboardModule = /** @class */ (function () {\r\n        function ClipboardModule() {\r\n        }\r\n        ClipboardModule = __decorate([\r\n            core.NgModule({\r\n                imports: [common.CommonModule],\r\n                declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n                exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n            })\r\n        ], ClipboardModule);\r\n        return ClipboardModule;\r\n    }());\n\n    exports.ClipboardDirective = ClipboardDirective;\n    exports.ClipboardIfSupportedDirective = ClipboardIfSupportedDirective;\n    exports.ClipboardModule = ClipboardModule;\n    exports.ClipboardService = ClipboardService;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}