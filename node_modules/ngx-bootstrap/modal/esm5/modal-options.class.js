/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var ModalOptions = /** @class */ (function () {
    function ModalOptions() {
    }
ModalOptions.ɵfac = function ModalOptions_Factory(t) { return new (t || ModalOptions)(); };
ModalOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ModalOptions, factory: function (t) { return ModalOptions.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModalOptions, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return ModalOptions;
}());
export { ModalOptions };
if (false) {
    /**
     *  Includes a modal-backdrop element. Alternatively,
     *  specify static for a backdrop which doesn't close the modal on click.
     * @type {?}
     */
    ModalOptions.prototype.backdrop;
    /**
     * Closes the modal when escape key is pressed.
     * @type {?}
     */
    ModalOptions.prototype.keyboard;
    /** @type {?} */
    ModalOptions.prototype.focus;
    /**
     * Shows the modal when initialized.
     * @type {?}
     */
    ModalOptions.prototype.show;
    /**
     * Ignore the backdrop click
     * @type {?}
     */
    ModalOptions.prototype.ignoreBackdropClick;
    /**
     * Css class for opened modal
     * @type {?}
     */
    ModalOptions.prototype.class;
    /**
     * Toggle animation
     * @type {?}
     */
    ModalOptions.prototype.animated;
    /**
     * Modal data
     * @type {?}
     */
    ModalOptions.prototype.initialState;
}
/** @type {?} */
export var modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    animated: true,
    initialState: {}
};
/** @type {?} */
export var CLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
/** @type {?} */
export var SELECTOR = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'
};
/** @type {?} */
export var TRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
/** @type {?} */
export var DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL25neC1ib290c3RyYXAvbW9kYWwvZXNtNS9tb2RhbC1vcHRpb25zLmNsYXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7S0FFSzs7Ozs7Z0RBR0MiLCJmaWxlIjoibW9kYWwtb3B0aW9ucy5jbGFzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG52YXIgTW9kYWxPcHRpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vZGFsT3B0aW9ucygpIHtcbiAgICB9XG4gICAgTW9kYWxPcHRpb25zLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9XG4gICAgXTtcbiAgICByZXR1cm4gTW9kYWxPcHRpb25zO1xufSgpKTtcbmV4cG9ydCB7IE1vZGFsT3B0aW9ucyB9O1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogIEluY2x1ZGVzIGEgbW9kYWwtYmFja2Ryb3AgZWxlbWVudC4gQWx0ZXJuYXRpdmVseSxcbiAgICAgKiAgc3BlY2lmeSBzdGF0aWMgZm9yIGEgYmFja2Ryb3Agd2hpY2ggZG9lc24ndCBjbG9zZSB0aGUgbW9kYWwgb24gY2xpY2suXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5iYWNrZHJvcDtcbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUua2V5Ym9hcmQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuZm9jdXM7XG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIG1vZGFsIHdoZW4gaW5pdGlhbGl6ZWQuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5zaG93O1xuICAgIC8qKlxuICAgICAqIElnbm9yZSB0aGUgYmFja2Ryb3AgY2xpY2tcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmlnbm9yZUJhY2tkcm9wQ2xpY2s7XG4gICAgLyoqXG4gICAgICogQ3NzIGNsYXNzIGZvciBvcGVuZWQgbW9kYWxcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmNsYXNzO1xuICAgIC8qKlxuICAgICAqIFRvZ2dsZSBhbmltYXRpb25cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmFuaW1hdGVkO1xuICAgIC8qKlxuICAgICAqIE1vZGFsIGRhdGFcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmluaXRpYWxTdGF0ZTtcbn1cbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCB2YXIgbW9kYWxDb25maWdEZWZhdWx0cyA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBmb2N1czogdHJ1ZSxcbiAgICBzaG93OiBmYWxzZSxcbiAgICBpZ25vcmVCYWNrZHJvcENsaWNrOiBmYWxzZSxcbiAgICBjbGFzczogJycsXG4gICAgYW5pbWF0ZWQ6IHRydWUsXG4gICAgaW5pdGlhbFN0YXRlOiB7fVxufTtcbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCB2YXIgQ0xBU1NfTkFNRSA9IHtcbiAgICBTQ1JPTExCQVJfTUVBU1VSRVI6ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZScsXG4gICAgQkFDS0RST1A6ICdtb2RhbC1iYWNrZHJvcCcsXG4gICAgT1BFTjogJ21vZGFsLW9wZW4nLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBJTjogJ2luJyxcbiAgICAvLyBiczNcbiAgICBTSE9XOiAnc2hvdycgLy8gYnM0XG59O1xuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IHZhciBTRUxFQ1RPUiA9IHtcbiAgICBESUFMT0c6ICcubW9kYWwtZGlhbG9nJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxcbiAgICBEQVRBX0RJU01JU1M6ICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLFxuICAgIEZJWEVEX0NPTlRFTlQ6ICcubmF2YmFyLWZpeGVkLXRvcCwgLm5hdmJhci1maXhlZC1ib3R0b20sIC5pcy1maXhlZCdcbn07XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgdmFyIFRSQU5TSVRJT05fRFVSQVRJT05TID0ge1xuICAgIE1PREFMOiAzMDAsXG4gICAgQkFDS0RST1A6IDE1MFxufTtcbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCB2YXIgRElTTUlTU19SRUFTT05TID0ge1xuICAgIEJBQ0tSRE9QOiAnYmFja2Ryb3AtY2xpY2snLFxuICAgIEVTQzogJ2VzYydcbn07XG4iXX0=