{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/@asymmetrik/ngx-leaflet-markercluster/dist/leaflet-markercluster/leaflet-markercluster.directive.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAyDgD,AAIzC;;;;;;;;;;;;;;;;;;oBAC+B","file":"leaflet-markercluster.directive.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive, EventEmitter, Input, Output } from '@angular/core';\nimport { LeafletDirective, LeafletDirectiveWrapper } from '@asymmetrik/ngx-leaflet';\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\nvar LeafletMarkerClusterDirective = /** @class */ (function () {\n    function LeafletMarkerClusterDirective(leafletDirective) {\n        // Hexbin data binding\n        this.markerData = [];\n        // Fired when the marker cluster is created\n        this.markerClusterReady = new EventEmitter();\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    }\n    LeafletMarkerClusterDirective.prototype.ngOnInit = function () {\n        this.leafletDirective.init();\n        var map = this.leafletDirective.getMap();\n        this.markerClusterGroup = L.markerClusterGroup(this.markerClusterOptions);\n        // Add the marker cluster group to the map\n        this.markerClusterGroup.addTo(map);\n        // Set the data now that the markerClusterGroup exists\n        this.setData(this.markerData);\n        // Fire the ready event\n        this.markerClusterReady.emit(this.markerClusterGroup);\n    };\n    LeafletMarkerClusterDirective.prototype.ngOnChanges = function (changes) {\n        // Set the new data\n        if (changes['markerData']) {\n            this.setData(this.markerData);\n        }\n    };\n    LeafletMarkerClusterDirective.prototype.setData = function (layers) {\n        // Ignore until the markerClusterGroup exists\n        if (null != this.markerClusterGroup) {\n            this.markerClusterGroup.clearLayers();\n            this.markerClusterGroup.addLayers(layers);\n        }\n    };\n    __decorate([\n        Input('leafletMarkerCluster'),\n        __metadata(\"design:type\", Array)\n    ], LeafletMarkerClusterDirective.prototype, \"markerData\", void 0);\n    __decorate([\n        Input('leafletMarkerClusterOptions'),\n        __metadata(\"design:type\", Object)\n    ], LeafletMarkerClusterDirective.prototype, \"markerClusterOptions\", void 0);\n    __decorate([\n        Output('leafletMarkerClusterReady'),\n        __metadata(\"design:type\", EventEmitter)\n    ], LeafletMarkerClusterDirective.prototype, \"markerClusterReady\", void 0);\n    LeafletMarkerClusterDirective = __decorate([\n        Directive({\n            selector: '[leafletMarkerCluster]',\n        }),\n        __metadata(\"design:paramtypes\", [LeafletDirective])\n    ], LeafletMarkerClusterDirective);\n    return LeafletMarkerClusterDirective;\n}());\nexport { LeafletMarkerClusterDirective };\n"]}