{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-data-grid.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAuoLAqkCA20BgsImB","file":"devextreme-angular-ui-data-grid.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport 'devextreme/bundles/dx.all';\nimport DxDataGrid from 'devextreme/ui/data_grid';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiColumnComponent, DxiSortByGroupSummaryInfoComponent, DxoColumnChooserModule, DxoColumnFixingModule, DxoTextsModule, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoEditingModule, DxoFormModule, DxoColCountByScreenModule, DxiItemModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxoPopupModule, DxoAnimationModule, DxoHideModule, DxoShowModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxiToolbarItemModule, DxoExportModule, DxoFilterBuilderModule, DxiCustomOperationModule, DxiFieldModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxoFilterBuilderPopupModule, DxoFilterPanelModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoGroupingModule, DxoGroupPanelModule, DxoKeyboardNavigationModule, DxoLoadPanelModule, DxoMasterDetailModule, DxoPagerModule, DxoPagingModule, DxoRemoteOperationsModule, DxoRowDraggingModule, DxoCursorOffsetModule, DxoScrollingModule, DxoSearchPanelModule, DxoSelectionModule, DxiSortByGroupSummaryInfoModule, DxoSortingModule, DxoStateStoringModule, DxoSummaryModule, DxiGroupItemModule, DxoValueFormatModule, DxiTotalItemModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The DataGrid is a widget that represents data from a local or remote source in the form of a grid. This widget offers such basic features as sorting, grouping, filtering, as well as more advanced capabilities, like state storing, export to Excel, master-detail interface, and many others.\r\n */\r\nlet DxDataGridComponent = class DxDataGridComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._watcherHelper = _watcherHelper;\r\n        this._idh = _idh;\r\n        this._createEventEmitters([\r\n            { subscribe: 'adaptiveDetailRowPreparing', emit: 'onAdaptiveDetailRowPreparing' },\r\n            { subscribe: 'cellClick', emit: 'onCellClick' },\r\n            { subscribe: 'cellDblClick', emit: 'onCellDblClick' },\r\n            { subscribe: 'cellHoverChanged', emit: 'onCellHoverChanged' },\r\n            { subscribe: 'cellPrepared', emit: 'onCellPrepared' },\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },\r\n            { subscribe: 'dataErrorOccurred', emit: 'onDataErrorOccurred' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'editingStart', emit: 'onEditingStart' },\r\n            { subscribe: 'editorPrepared', emit: 'onEditorPrepared' },\r\n            { subscribe: 'editorPreparing', emit: 'onEditorPreparing' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'focusedCellChanged', emit: 'onFocusedCellChanged' },\r\n            { subscribe: 'focusedCellChanging', emit: 'onFocusedCellChanging' },\r\n            { subscribe: 'focusedRowChanged', emit: 'onFocusedRowChanged' },\r\n            { subscribe: 'focusedRowChanging', emit: 'onFocusedRowChanging' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'initNewRow', emit: 'onInitNewRow' },\r\n            { subscribe: 'keyDown', emit: 'onKeyDown' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'rowClick', emit: 'onRowClick' },\r\n            { subscribe: 'rowCollapsed', emit: 'onRowCollapsed' },\r\n            { subscribe: 'rowCollapsing', emit: 'onRowCollapsing' },\r\n            { subscribe: 'rowDblClick', emit: 'onRowDblClick' },\r\n            { subscribe: 'rowExpanded', emit: 'onRowExpanded' },\r\n            { subscribe: 'rowExpanding', emit: 'onRowExpanding' },\r\n            { subscribe: 'rowInserted', emit: 'onRowInserted' },\r\n            { subscribe: 'rowInserting', emit: 'onRowInserting' },\r\n            { subscribe: 'rowPrepared', emit: 'onRowPrepared' },\r\n            { subscribe: 'rowRemoved', emit: 'onRowRemoved' },\r\n            { subscribe: 'rowRemoving', emit: 'onRowRemoving' },\r\n            { subscribe: 'rowUpdated', emit: 'onRowUpdated' },\r\n            { subscribe: 'rowUpdating', emit: 'onRowUpdating' },\r\n            { subscribe: 'rowValidating', emit: 'onRowValidating' },\r\n            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },\r\n            { subscribe: 'toolbarPreparing', emit: 'onToolbarPreparing' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'allowColumnReorderingChange' },\r\n            { emit: 'allowColumnResizingChange' },\r\n            { emit: 'autoNavigateToFocusedRowChange' },\r\n            { emit: 'cacheEnabledChange' },\r\n            { emit: 'cellHintEnabledChange' },\r\n            { emit: 'columnAutoWidthChange' },\r\n            { emit: 'columnChooserChange' },\r\n            { emit: 'columnFixingChange' },\r\n            { emit: 'columnHidingEnabledChange' },\r\n            { emit: 'columnMinWidthChange' },\r\n            { emit: 'columnResizingModeChange' },\r\n            { emit: 'columnsChange' },\r\n            { emit: 'columnWidthChange' },\r\n            { emit: 'customizeColumnsChange' },\r\n            { emit: 'customizeExportDataChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'dateSerializationFormatChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'editingChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'errorRowEnabledChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'filterBuilderChange' },\r\n            { emit: 'filterBuilderPopupChange' },\r\n            { emit: 'filterPanelChange' },\r\n            { emit: 'filterRowChange' },\r\n            { emit: 'filterSyncEnabledChange' },\r\n            { emit: 'filterValueChange' },\r\n            { emit: 'focusedColumnIndexChange' },\r\n            { emit: 'focusedRowEnabledChange' },\r\n            { emit: 'focusedRowIndexChange' },\r\n            { emit: 'focusedRowKeyChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'groupingChange' },\r\n            { emit: 'groupPanelChange' },\r\n            { emit: 'headerFilterChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'highlightChangesChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'keyboardNavigationChange' },\r\n            { emit: 'keyExprChange' },\r\n            { emit: 'loadPanelChange' },\r\n            { emit: 'masterDetailChange' },\r\n            { emit: 'noDataTextChange' },\r\n            { emit: 'pagerChange' },\r\n            { emit: 'pagingChange' },\r\n            { emit: 'remoteOperationsChange' },\r\n            { emit: 'renderAsyncChange' },\r\n            { emit: 'repaintChangesOnlyChange' },\r\n            { emit: 'rowAlternationEnabledChange' },\r\n            { emit: 'rowDraggingChange' },\r\n            { emit: 'rowTemplateChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollingChange' },\r\n            { emit: 'searchPanelChange' },\r\n            { emit: 'selectedRowKeysChange' },\r\n            { emit: 'selectionChange' },\r\n            { emit: 'selectionFilterChange' },\r\n            { emit: 'showBordersChange' },\r\n            { emit: 'showColumnHeadersChange' },\r\n            { emit: 'showColumnLinesChange' },\r\n            { emit: 'showRowLinesChange' },\r\n            { emit: 'sortByGroupSummaryInfoChange' },\r\n            { emit: 'sortingChange' },\r\n            { emit: 'stateStoringChange' },\r\n            { emit: 'summaryChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'twoWayBindingEnabledChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' },\r\n            { emit: 'wordWrapEnabledChange' }\r\n        ]);\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Specifies the shortcut key that sets focus on the widget.\r\n     */\r\n    get accessKey() {\r\n        return this._getOption('accessKey');\r\n    }\r\n    set accessKey(value) {\r\n        this._setOption('accessKey', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the widget changes its state when interacting with a user.\r\n     */\r\n    get activeStateEnabled() {\r\n        return this._getOption('activeStateEnabled');\r\n    }\r\n    set activeStateEnabled(value) {\r\n        this._setOption('activeStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies whether a user can reorder columns.\r\n     */\r\n    get allowColumnReordering() {\r\n        return this._getOption('allowColumnReordering');\r\n    }\r\n    set allowColumnReordering(value) {\r\n        this._setOption('allowColumnReordering', value);\r\n    }\r\n    /**\r\n     * Specifies whether a user can resize columns.\r\n     */\r\n    get allowColumnResizing() {\r\n        return this._getOption('allowColumnResizing');\r\n    }\r\n    set allowColumnResizing(value) {\r\n        this._setOption('allowColumnResizing', value);\r\n    }\r\n    /**\r\n     * Automatically scrolls to the focused row when the focusedRowKey is changed.\r\n     */\r\n    get autoNavigateToFocusedRow() {\r\n        return this._getOption('autoNavigateToFocusedRow');\r\n    }\r\n    set autoNavigateToFocusedRow(value) {\r\n        this._setOption('autoNavigateToFocusedRow', value);\r\n    }\r\n    /**\r\n     * Specifies whether data should be cached.\r\n     */\r\n    get cacheEnabled() {\r\n        return this._getOption('cacheEnabled');\r\n    }\r\n    set cacheEnabled(value) {\r\n        this._setOption('cacheEnabled', value);\r\n    }\r\n    /**\r\n     * Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content.\r\n     */\r\n    get cellHintEnabled() {\r\n        return this._getOption('cellHintEnabled');\r\n    }\r\n    set cellHintEnabled(value) {\r\n        this._setOption('cellHintEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies whether columns should adjust their widths to the content.\r\n     */\r\n    get columnAutoWidth() {\r\n        return this._getOption('columnAutoWidth');\r\n    }\r\n    set columnAutoWidth(value) {\r\n        this._setOption('columnAutoWidth', value);\r\n    }\r\n    /**\r\n     * Configures the column chooser.\r\n     */\r\n    get columnChooser() {\r\n        return this._getOption('columnChooser');\r\n    }\r\n    set columnChooser(value) {\r\n        this._setOption('columnChooser', value);\r\n    }\r\n    /**\r\n     * Configures column fixing.\r\n     */\r\n    get columnFixing() {\r\n        return this._getOption('columnFixing');\r\n    }\r\n    set columnFixing(value) {\r\n        this._setOption('columnFixing', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\".\r\n     */\r\n    get columnHidingEnabled() {\r\n        return this._getOption('columnHidingEnabled');\r\n    }\r\n    set columnHidingEnabled(value) {\r\n        this._setOption('columnHidingEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the minimum width of columns.\r\n     */\r\n    get columnMinWidth() {\r\n        return this._getOption('columnMinWidth');\r\n    }\r\n    set columnMinWidth(value) {\r\n        this._setOption('columnMinWidth', value);\r\n    }\r\n    /**\r\n     * Specifies how the widget resizes columns. Applies only if allowColumnResizing is true.\r\n     */\r\n    get columnResizingMode() {\r\n        return this._getOption('columnResizingMode');\r\n    }\r\n    set columnResizingMode(value) {\r\n        this._setOption('columnResizingMode', value);\r\n    }\r\n    /**\r\n     * An array of grid columns.\r\n     */\r\n    get columns() {\r\n        return this._getOption('columns');\r\n    }\r\n    set columns(value) {\r\n        this._setOption('columns', value);\r\n    }\r\n    /**\r\n     * Specifies the width for all data columns. Has a lower priority than the column.width option.\r\n     */\r\n    get columnWidth() {\r\n        return this._getOption('columnWidth');\r\n    }\r\n    set columnWidth(value) {\r\n        this._setOption('columnWidth', value);\r\n    }\r\n    /**\r\n     * Customizes columns after they are created.\r\n     */\r\n    get customizeColumns() {\r\n        return this._getOption('customizeColumns');\r\n    }\r\n    set customizeColumns(value) {\r\n        this._setOption('customizeColumns', value);\r\n    }\r\n    /**\r\n     * Customizes data before export. You can use the export.customizeExcelCell function instead.\r\n     */\r\n    get customizeExportData() {\r\n        return this._getOption('customizeExportData');\r\n    }\r\n    set customizeExportData(value) {\r\n        this._setOption('customizeExportData', value);\r\n    }\r\n    /**\r\n     * Binds the widget to data.\r\n     */\r\n    get dataSource() {\r\n        return this._getOption('dataSource');\r\n    }\r\n    set dataSource(value) {\r\n        this._setOption('dataSource', value);\r\n    }\r\n    /**\r\n     * Specifies the format in which date-time values should be sent to the server. Use it only if you do not specify the dataSource at design time.\r\n     */\r\n    get dateSerializationFormat() {\r\n        return this._getOption('dateSerializationFormat');\r\n    }\r\n    set dateSerializationFormat(value) {\r\n        this._setOption('dateSerializationFormat', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Configures editing.\r\n     */\r\n    get editing() {\r\n        return this._getOption('editing');\r\n    }\r\n    set editing(value) {\r\n        this._setOption('editing', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Indicates whether to show the error row.\r\n     */\r\n    get errorRowEnabled() {\r\n        return this._getOption('errorRowEnabled');\r\n    }\r\n    set errorRowEnabled(value) {\r\n        this._setOption('errorRowEnabled', value);\r\n    }\r\n    /**\r\n     * Configures client-side exporting.\r\n     */\r\n    get export() {\r\n        return this._getOption('export');\r\n    }\r\n    set export(value) {\r\n        this._setOption('export', value);\r\n    }\r\n    /**\r\n     * Configures the integrated filter builder.\r\n     */\r\n    get filterBuilder() {\r\n        return this._getOption('filterBuilder');\r\n    }\r\n    set filterBuilder(value) {\r\n        this._setOption('filterBuilder', value);\r\n    }\r\n    /**\r\n     * Configures the popup in which the integrated filter builder is shown.\r\n     */\r\n    get filterBuilderPopup() {\r\n        return this._getOption('filterBuilderPopup');\r\n    }\r\n    set filterBuilderPopup(value) {\r\n        this._setOption('filterBuilderPopup', value);\r\n    }\r\n    /**\r\n     * Configures the filter panel.\r\n     */\r\n    get filterPanel() {\r\n        return this._getOption('filterPanel');\r\n    }\r\n    set filterPanel(value) {\r\n        this._setOption('filterPanel', value);\r\n    }\r\n    /**\r\n     * Configures the filter row.\r\n     */\r\n    get filterRow() {\r\n        return this._getOption('filterRow');\r\n    }\r\n    set filterRow(value) {\r\n        this._setOption('filterRow', value);\r\n    }\r\n    /**\r\n     * Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue option.\r\n     */\r\n    get filterSyncEnabled() {\r\n        return this._getOption('filterSyncEnabled');\r\n    }\r\n    set filterSyncEnabled(value) {\r\n        this._setOption('filterSyncEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies a filter expression.\r\n     */\r\n    get filterValue() {\r\n        return this._getOption('filterValue');\r\n    }\r\n    set filterValue(value) {\r\n        this._setOption('filterValue', value);\r\n    }\r\n    /**\r\n     * The index of the column that contains the focused data cell.\r\n     */\r\n    get focusedColumnIndex() {\r\n        return this._getOption('focusedColumnIndex');\r\n    }\r\n    set focusedColumnIndex(value) {\r\n        this._setOption('focusedColumnIndex', value);\r\n    }\r\n    /**\r\n     * Specifies whether the focused row feature is enabled.\r\n     */\r\n    get focusedRowEnabled() {\r\n        return this._getOption('focusedRowEnabled');\r\n    }\r\n    set focusedRowEnabled(value) {\r\n        this._setOption('focusedRowEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the initially or currently focused grid row's index. Use it when focusedRowEnabled is true.\r\n     */\r\n    get focusedRowIndex() {\r\n        return this._getOption('focusedRowIndex');\r\n    }\r\n    set focusedRowIndex(value) {\r\n        this._setOption('focusedRowIndex', value);\r\n    }\r\n    /**\r\n     * Specifies initially or currently focused grid row's key. Use it when focusedRowEnabled is true.\r\n     */\r\n    get focusedRowKey() {\r\n        return this._getOption('focusedRowKey');\r\n    }\r\n    set focusedRowKey(value) {\r\n        this._setOption('focusedRowKey', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget can be focused using keyboard navigation.\r\n     */\r\n    get focusStateEnabled() {\r\n        return this._getOption('focusStateEnabled');\r\n    }\r\n    set focusStateEnabled(value) {\r\n        this._setOption('focusStateEnabled', value);\r\n    }\r\n    /**\r\n     * Configures grouping.\r\n     */\r\n    get grouping() {\r\n        return this._getOption('grouping');\r\n    }\r\n    set grouping(value) {\r\n        this._setOption('grouping', value);\r\n    }\r\n    /**\r\n     * Configures the group panel.\r\n     */\r\n    get groupPanel() {\r\n        return this._getOption('groupPanel');\r\n    }\r\n    set groupPanel(value) {\r\n        this._setOption('groupPanel', value);\r\n    }\r\n    /**\r\n     * Configures the header filter feature.\r\n     */\r\n    get headerFilter() {\r\n        return this._getOption('headerFilter');\r\n    }\r\n    set headerFilter(value) {\r\n        this._setOption('headerFilter', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    get height() {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value) {\r\n        this._setOption('height', value);\r\n    }\r\n    /**\r\n     * Specifies whether to highlight rows and cells with edited data. repaintChangesOnly should be true.\r\n     */\r\n    get highlightChanges() {\r\n        return this._getOption('highlightChanges');\r\n    }\r\n    set highlightChanges(value) {\r\n        this._setOption('highlightChanges', value);\r\n    }\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the widget.\r\n     */\r\n    get hint() {\r\n        return this._getOption('hint');\r\n    }\r\n    set hint(value) {\r\n        this._setOption('hint', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget changes its state when a user pauses on it.\r\n     */\r\n    get hoverStateEnabled() {\r\n        return this._getOption('hoverStateEnabled');\r\n    }\r\n    set hoverStateEnabled(value) {\r\n        this._setOption('hoverStateEnabled', value);\r\n    }\r\n    /**\r\n     * Configures keyboard navigation.\r\n     */\r\n    get keyboardNavigation() {\r\n        return this._getOption('keyboardNavigation');\r\n    }\r\n    set keyboardNavigation(value) {\r\n        this._setOption('keyboardNavigation', value);\r\n    }\r\n    /**\r\n     * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique. This option applies only if data is a simple array.\r\n     */\r\n    get keyExpr() {\r\n        return this._getOption('keyExpr');\r\n    }\r\n    set keyExpr(value) {\r\n        this._setOption('keyExpr', value);\r\n    }\r\n    /**\r\n     * Configures the load panel.\r\n     */\r\n    get loadPanel() {\r\n        return this._getOption('loadPanel');\r\n    }\r\n    set loadPanel(value) {\r\n        this._setOption('loadPanel', value);\r\n    }\r\n    /**\r\n     * Allows you to build a master-detail interface in the grid.\r\n     */\r\n    get masterDetail() {\r\n        return this._getOption('masterDetail');\r\n    }\r\n    set masterDetail(value) {\r\n        this._setOption('masterDetail', value);\r\n    }\r\n    /**\r\n     * Specifies text shown when the widget does not display any data.\r\n     */\r\n    get noDataText() {\r\n        return this._getOption('noDataText');\r\n    }\r\n    set noDataText(value) {\r\n        this._setOption('noDataText', value);\r\n    }\r\n    /**\r\n     * Configures the pager.\r\n     */\r\n    get pager() {\r\n        return this._getOption('pager');\r\n    }\r\n    set pager(value) {\r\n        this._setOption('pager', value);\r\n    }\r\n    /**\r\n     * Configures paging.\r\n     */\r\n    get paging() {\r\n        return this._getOption('paging');\r\n    }\r\n    set paging(value) {\r\n        this._setOption('paging', value);\r\n    }\r\n    /**\r\n     * Notifies the DataGrid of the server's data processing operations.\r\n     */\r\n    get remoteOperations() {\r\n        return this._getOption('remoteOperations');\r\n    }\r\n    set remoteOperations(value) {\r\n        this._setOption('remoteOperations', value);\r\n    }\r\n    /**\r\n     * Specifies whether to render the filter row, command columns, and columns with showEditorAlways set to true after other elements.\r\n     */\r\n    get renderAsync() {\r\n        return this._getOption('renderAsync');\r\n    }\r\n    set renderAsync(value) {\r\n        this._setOption('renderAsync', value);\r\n    }\r\n    /**\r\n     * Specifies whether to repaint only those cells whose data changed.\r\n     */\r\n    get repaintChangesOnly() {\r\n        return this._getOption('repaintChangesOnly');\r\n    }\r\n    set repaintChangesOnly(value) {\r\n        this._setOption('repaintChangesOnly', value);\r\n    }\r\n    /**\r\n     * Specifies whether rows should be shaded differently.\r\n     */\r\n    get rowAlternationEnabled() {\r\n        return this._getOption('rowAlternationEnabled');\r\n    }\r\n    set rowAlternationEnabled(value) {\r\n        this._setOption('rowAlternationEnabled', value);\r\n    }\r\n    /**\r\n     * Configures row reordering using drag and drop gestures.\r\n     */\r\n    get rowDragging() {\r\n        return this._getOption('rowDragging');\r\n    }\r\n    set rowDragging(value) {\r\n        this._setOption('rowDragging', value);\r\n    }\r\n    /**\r\n     * Specifies a custom template for rows.\r\n     */\r\n    get rowTemplate() {\r\n        return this._getOption('rowTemplate');\r\n    }\r\n    set rowTemplate(value) {\r\n        this._setOption('rowTemplate', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Configures scrolling.\r\n     */\r\n    get scrolling() {\r\n        return this._getOption('scrolling');\r\n    }\r\n    set scrolling(value) {\r\n        this._setOption('scrolling', value);\r\n    }\r\n    /**\r\n     * Configures the search panel.\r\n     */\r\n    get searchPanel() {\r\n        return this._getOption('searchPanel');\r\n    }\r\n    set searchPanel(value) {\r\n        this._setOption('searchPanel', value);\r\n    }\r\n    /**\r\n     * Allows you to select rows or determine which rows are selected.\r\n     */\r\n    get selectedRowKeys() {\r\n        return this._getOption('selectedRowKeys');\r\n    }\r\n    set selectedRowKeys(value) {\r\n        this._setOption('selectedRowKeys', value);\r\n    }\r\n    /**\r\n     * Configures runtime selection.\r\n     */\r\n    get selection() {\r\n        return this._getOption('selection');\r\n    }\r\n    set selection(value) {\r\n        this._setOption('selection', value);\r\n    }\r\n    /**\r\n     * Specifies filters for the rows that must be selected initially. Applies only if selection.deferred is true.\r\n     */\r\n    get selectionFilter() {\r\n        return this._getOption('selectionFilter');\r\n    }\r\n    set selectionFilter(value) {\r\n        this._setOption('selectionFilter', value);\r\n    }\r\n    /**\r\n     * Specifies whether the outer borders of the widget are visible.\r\n     */\r\n    get showBorders() {\r\n        return this._getOption('showBorders');\r\n    }\r\n    set showBorders(value) {\r\n        this._setOption('showBorders', value);\r\n    }\r\n    /**\r\n     * Specifies whether column headers are visible.\r\n     */\r\n    get showColumnHeaders() {\r\n        return this._getOption('showColumnHeaders');\r\n    }\r\n    set showColumnHeaders(value) {\r\n        this._setOption('showColumnHeaders', value);\r\n    }\r\n    /**\r\n     * Specifies whether vertical lines that separate one column from another are visible.\r\n     */\r\n    get showColumnLines() {\r\n        return this._getOption('showColumnLines');\r\n    }\r\n    set showColumnLines(value) {\r\n        this._setOption('showColumnLines', value);\r\n    }\r\n    /**\r\n     * Specifies whether horizontal lines that separate one row from another are visible.\r\n     */\r\n    get showRowLines() {\r\n        return this._getOption('showRowLines');\r\n    }\r\n    set showRowLines(value) {\r\n        this._setOption('showRowLines', value);\r\n    }\r\n    /**\r\n     * Allows you to sort groups according to the values of group summary items.\r\n     */\r\n    get sortByGroupSummaryInfo() {\r\n        return this._getOption('sortByGroupSummaryInfo');\r\n    }\r\n    set sortByGroupSummaryInfo(value) {\r\n        this._setOption('sortByGroupSummaryInfo', value);\r\n    }\r\n    /**\r\n     * Configures runtime sorting.\r\n     */\r\n    get sorting() {\r\n        return this._getOption('sorting');\r\n    }\r\n    set sorting(value) {\r\n        this._setOption('sorting', value);\r\n    }\r\n    /**\r\n     * Configures state storing.\r\n     */\r\n    get stateStoring() {\r\n        return this._getOption('stateStoring');\r\n    }\r\n    set stateStoring(value) {\r\n        this._setOption('stateStoring', value);\r\n    }\r\n    /**\r\n     * Specifies the options of the grid summary.\r\n     */\r\n    get summary() {\r\n        return this._getOption('summary');\r\n    }\r\n    set summary(value) {\r\n        this._setOption('summary', value);\r\n    }\r\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n     */\r\n    get tabIndex() {\r\n        return this._getOption('tabIndex');\r\n    }\r\n    set tabIndex(value) {\r\n        this._setOption('tabIndex', value);\r\n    }\r\n    /**\r\n     * Specifies whether to enable two-way data binding.\r\n     */\r\n    get twoWayBindingEnabled() {\r\n        return this._getOption('twoWayBindingEnabled');\r\n    }\r\n    set twoWayBindingEnabled(value) {\r\n        this._setOption('twoWayBindingEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget is visible.\r\n     */\r\n    get visible() {\r\n        return this._getOption('visible');\r\n    }\r\n    set visible(value) {\r\n        this._setOption('visible', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    get width() {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value) {\r\n        this._setOption('width', value);\r\n    }\r\n    /**\r\n     * Specifies whether text that does not fit into a column should be wrapped.\r\n     */\r\n    get wordWrapEnabled() {\r\n        return this._getOption('wordWrapEnabled');\r\n    }\r\n    set wordWrapEnabled(value) {\r\n        this._setOption('wordWrapEnabled', value);\r\n    }\r\n    get columnsChildren() {\r\n        return this._getOption('columns');\r\n    }\r\n    set columnsChildren(value) {\r\n        this.setChildren('columns', value);\r\n    }\r\n    get sortByGroupSummaryInfoChildren() {\r\n        return this._getOption('sortByGroupSummaryInfo');\r\n    }\r\n    set sortByGroupSummaryInfoChildren(value) {\r\n        this.setChildren('sortByGroupSummaryInfo', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxDataGrid(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('columns', changes);\r\n        this.setupChanges('dataSource', changes);\r\n        this.setupChanges('keyExpr', changes);\r\n        this.setupChanges('selectedRowKeys', changes);\r\n        this.setupChanges('sortByGroupSummaryInfo', changes);\r\n    }\r\n    setupChanges(prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        this._idh.doCheck('columns');\r\n        this._idh.doCheck('dataSource');\r\n        this._idh.doCheck('keyExpr');\r\n        this._idh.doCheck('selectedRowKeys');\r\n        this._idh.doCheck('sortByGroupSummaryInfo');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n    _setOption(name, value) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n};\r\nDxDataGridComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: IterableDifferHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDataGridComponent.prototype, \"accessKey\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"activeStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"allowColumnReordering\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"allowColumnResizing\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"autoNavigateToFocusedRow\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"cacheEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"cellHintEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"columnAutoWidth\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"columnChooser\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"columnFixing\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"columnHidingEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDataGridComponent.prototype, \"columnMinWidth\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDataGridComponent.prototype, \"columnResizingMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], DxDataGridComponent.prototype, \"columns\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDataGridComponent.prototype, \"columnWidth\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Function])\r\n], DxDataGridComponent.prototype, \"customizeColumns\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Function])\r\n], DxDataGridComponent.prototype, \"customizeExportData\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"dataSource\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDataGridComponent.prototype, \"dateSerializationFormat\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"editing\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"errorRowEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"export\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"filterBuilder\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"filterBuilderPopup\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"filterPanel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"filterRow\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"filterSyncEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"filterValue\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDataGridComponent.prototype, \"focusedColumnIndex\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"focusedRowEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDataGridComponent.prototype, \"focusedRowIndex\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"focusedRowKey\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"focusStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"grouping\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"groupPanel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"headerFilter\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"height\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"highlightChanges\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDataGridComponent.prototype, \"hint\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"hoverStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"keyboardNavigation\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"keyExpr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"loadPanel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"masterDetail\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxDataGridComponent.prototype, \"noDataText\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"pager\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"paging\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"remoteOperations\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"renderAsync\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"repaintChangesOnly\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"rowAlternationEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"rowDragging\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"rowTemplate\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"scrolling\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"searchPanel\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], DxDataGridComponent.prototype, \"selectedRowKeys\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"selection\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"selectionFilter\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"showBorders\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"showColumnHeaders\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"showColumnLines\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"showRowLines\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], DxDataGridComponent.prototype, \"sortByGroupSummaryInfo\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"sorting\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"stateStoring\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"summary\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxDataGridComponent.prototype, \"tabIndex\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"twoWayBindingEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"visible\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"width\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxDataGridComponent.prototype, \"wordWrapEnabled\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onAdaptiveDetailRowPreparing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onCellClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onCellDblClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onCellHoverChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onCellPrepared\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onContentReady\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onContextMenuPreparing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onDataErrorOccurred\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onEditingStart\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onEditorPrepared\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onEditorPreparing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onExported\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onExporting\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onFileSaving\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onFocusedCellChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onFocusedCellChanging\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onFocusedRowChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onFocusedRowChanging\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onInitNewRow\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onKeyDown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowCollapsed\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowCollapsing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowDblClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowExpanded\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowExpanding\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowInserted\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowInserting\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowPrepared\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowRemoved\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowRemoving\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowUpdated\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowUpdating\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onRowValidating\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onSelectionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"onToolbarPreparing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"accessKeyChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"allowColumnReorderingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"allowColumnResizingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"autoNavigateToFocusedRowChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"cacheEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"cellHintEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"columnAutoWidthChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"columnChooserChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"columnFixingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"columnHidingEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"columnMinWidthChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"columnResizingModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"columnsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"columnWidthChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"customizeColumnsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"customizeExportDataChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"dataSourceChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"dateSerializationFormatChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"editingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"errorRowEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"exportChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"filterBuilderChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"filterBuilderPopupChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"filterPanelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"filterRowChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"filterSyncEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"filterValueChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"focusedColumnIndexChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"focusedRowEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"focusedRowIndexChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"focusedRowKeyChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"groupingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"groupPanelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"headerFilterChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"heightChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"highlightChangesChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"hintChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"keyboardNavigationChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"keyExprChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"loadPanelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"masterDetailChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"noDataTextChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"pagerChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"pagingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"remoteOperationsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"renderAsyncChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"repaintChangesOnlyChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"rowAlternationEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"rowDraggingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"rowTemplateChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"scrollingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"searchPanelChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"selectedRowKeysChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"selectionChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"selectionFilterChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"showBordersChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"showColumnHeadersChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"showColumnLinesChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"showRowLinesChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"sortByGroupSummaryInfoChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"sortingChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"stateStoringChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"summaryChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"tabIndexChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"twoWayBindingEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"visibleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"widthChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxDataGridComponent.prototype, \"wordWrapEnabledChange\", void 0);\r\n__decorate([\r\n    ContentChildren(DxiColumnComponent),\r\n    __metadata(\"design:type\", QueryList),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"columnsChildren\", null);\r\n__decorate([\r\n    ContentChildren(DxiSortByGroupSummaryInfoComponent),\r\n    __metadata(\"design:type\", QueryList),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxDataGridComponent.prototype, \"sortByGroupSummaryInfoChildren\", null);\r\nDxDataGridComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-data-grid',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            IterableDifferHelper\r\n        ]\r\n    }),\r\n    __param(7, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        IterableDifferHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxDataGridComponent);\r\nlet DxDataGridModule = class DxDataGridModule {\r\n};\r\nDxDataGridModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoColumnChooserModule,\r\n            DxoColumnFixingModule,\r\n            DxoTextsModule,\r\n            DxiColumnModule,\r\n            DxiButtonModule,\r\n            DxoHeaderFilterModule,\r\n            DxoLookupModule,\r\n            DxoFormatModule,\r\n            DxoFormItemModule,\r\n            DxoLabelModule,\r\n            DxiValidationRuleModule,\r\n            DxoEditingModule,\r\n            DxoFormModule,\r\n            DxoColCountByScreenModule,\r\n            DxiItemModule,\r\n            DxoTabPanelOptionsModule,\r\n            DxiTabModule,\r\n            DxoButtonOptionsModule,\r\n            DxoPopupModule,\r\n            DxoAnimationModule,\r\n            DxoHideModule,\r\n            DxoShowModule,\r\n            DxoPositionModule,\r\n            DxoAtModule,\r\n            DxoBoundaryOffsetModule,\r\n            DxoCollisionModule,\r\n            DxoMyModule,\r\n            DxoOffsetModule,\r\n            DxiToolbarItemModule,\r\n            DxoExportModule,\r\n            DxoFilterBuilderModule,\r\n            DxiCustomOperationModule,\r\n            DxiFieldModule,\r\n            DxoFilterOperationDescriptionsModule,\r\n            DxoGroupOperationDescriptionsModule,\r\n            DxoFilterBuilderPopupModule,\r\n            DxoFilterPanelModule,\r\n            DxoFilterRowModule,\r\n            DxoOperationDescriptionsModule,\r\n            DxoGroupingModule,\r\n            DxoGroupPanelModule,\r\n            DxoKeyboardNavigationModule,\r\n            DxoLoadPanelModule,\r\n            DxoMasterDetailModule,\r\n            DxoPagerModule,\r\n            DxoPagingModule,\r\n            DxoRemoteOperationsModule,\r\n            DxoRowDraggingModule,\r\n            DxoCursorOffsetModule,\r\n            DxoScrollingModule,\r\n            DxoSearchPanelModule,\r\n            DxoSelectionModule,\r\n            DxiSortByGroupSummaryInfoModule,\r\n            DxoSortingModule,\r\n            DxoStateStoringModule,\r\n            DxoSummaryModule,\r\n            DxiGroupItemModule,\r\n            DxoValueFormatModule,\r\n            DxiTotalItemModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxDataGridComponent\r\n        ],\r\n        exports: [\r\n            DxDataGridComponent,\r\n            DxoColumnChooserModule,\r\n            DxoColumnFixingModule,\r\n            DxoTextsModule,\r\n            DxiColumnModule,\r\n            DxiButtonModule,\r\n            DxoHeaderFilterModule,\r\n            DxoLookupModule,\r\n            DxoFormatModule,\r\n            DxoFormItemModule,\r\n            DxoLabelModule,\r\n            DxiValidationRuleModule,\r\n            DxoEditingModule,\r\n            DxoFormModule,\r\n            DxoColCountByScreenModule,\r\n            DxiItemModule,\r\n            DxoTabPanelOptionsModule,\r\n            DxiTabModule,\r\n            DxoButtonOptionsModule,\r\n            DxoPopupModule,\r\n            DxoAnimationModule,\r\n            DxoHideModule,\r\n            DxoShowModule,\r\n            DxoPositionModule,\r\n            DxoAtModule,\r\n            DxoBoundaryOffsetModule,\r\n            DxoCollisionModule,\r\n            DxoMyModule,\r\n            DxoOffsetModule,\r\n            DxiToolbarItemModule,\r\n            DxoExportModule,\r\n            DxoFilterBuilderModule,\r\n            DxiCustomOperationModule,\r\n            DxiFieldModule,\r\n            DxoFilterOperationDescriptionsModule,\r\n            DxoGroupOperationDescriptionsModule,\r\n            DxoFilterBuilderPopupModule,\r\n            DxoFilterPanelModule,\r\n            DxoFilterRowModule,\r\n            DxoOperationDescriptionsModule,\r\n            DxoGroupingModule,\r\n            DxoGroupPanelModule,\r\n            DxoKeyboardNavigationModule,\r\n            DxoLoadPanelModule,\r\n            DxoMasterDetailModule,\r\n            DxoPagerModule,\r\n            DxoPagingModule,\r\n            DxoRemoteOperationsModule,\r\n            DxoRowDraggingModule,\r\n            DxoCursorOffsetModule,\r\n            DxoScrollingModule,\r\n            DxoSearchPanelModule,\r\n            DxoSelectionModule,\r\n            DxiSortByGroupSummaryInfoModule,\r\n            DxoSortingModule,\r\n            DxoStateStoringModule,\r\n            DxoSummaryModule,\r\n            DxiGroupItemModule,\r\n            DxoValueFormatModule,\r\n            DxiTotalItemModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxDataGridModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxDataGridComponent, DxDataGridModule };\n"]}