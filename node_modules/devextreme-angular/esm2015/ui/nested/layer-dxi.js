/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, SkipSelf, Input } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
let DxiLayerComponent = class DxiLayerComponent extends CollectionNestedOption {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get borderColor() {
        return this._getOption('borderColor');
    }
    set borderColor(value) {
        this._setOption('borderColor', value);
    }
    get borderWidth() {
        return this._getOption('borderWidth');
    }
    set borderWidth(value) {
        this._setOption('borderWidth', value);
    }
    get color() {
        return this._getOption('color');
    }
    set color(value) {
        this._setOption('color', value);
    }
    get colorGroupingField() {
        return this._getOption('colorGroupingField');
    }
    set colorGroupingField(value) {
        this._setOption('colorGroupingField', value);
    }
    get colorGroups() {
        return this._getOption('colorGroups');
    }
    set colorGroups(value) {
        this._setOption('colorGroups', value);
    }
    get customize() {
        return this._getOption('customize');
    }
    set customize(value) {
        this._setOption('customize', value);
    }
    get dataField() {
        return this._getOption('dataField');
    }
    set dataField(value) {
        this._setOption('dataField', value);
    }
    get dataSource() {
        return this._getOption('dataSource');
    }
    set dataSource(value) {
        this._setOption('dataSource', value);
    }
    get elementType() {
        return this._getOption('elementType');
    }
    set elementType(value) {
        this._setOption('elementType', value);
    }
    get hoveredBorderColor() {
        return this._getOption('hoveredBorderColor');
    }
    set hoveredBorderColor(value) {
        this._setOption('hoveredBorderColor', value);
    }
    get hoveredBorderWidth() {
        return this._getOption('hoveredBorderWidth');
    }
    set hoveredBorderWidth(value) {
        this._setOption('hoveredBorderWidth', value);
    }
    get hoveredColor() {
        return this._getOption('hoveredColor');
    }
    set hoveredColor(value) {
        this._setOption('hoveredColor', value);
    }
    get hoverEnabled() {
        return this._getOption('hoverEnabled');
    }
    set hoverEnabled(value) {
        this._setOption('hoverEnabled', value);
    }
    get label() {
        return this._getOption('label');
    }
    set label(value) {
        this._setOption('label', value);
    }
    get maxSize() {
        return this._getOption('maxSize');
    }
    set maxSize(value) {
        this._setOption('maxSize', value);
    }
    get minSize() {
        return this._getOption('minSize');
    }
    set minSize(value) {
        this._setOption('minSize', value);
    }
    get name() {
        return this._getOption('name');
    }
    set name(value) {
        this._setOption('name', value);
    }
    get opacity() {
        return this._getOption('opacity');
    }
    set opacity(value) {
        this._setOption('opacity', value);
    }
    get palette() {
        return this._getOption('palette');
    }
    set palette(value) {
        this._setOption('palette', value);
    }
    get paletteSize() {
        return this._getOption('paletteSize');
    }
    set paletteSize(value) {
        this._setOption('paletteSize', value);
    }
    get selectedBorderColor() {
        return this._getOption('selectedBorderColor');
    }
    set selectedBorderColor(value) {
        this._setOption('selectedBorderColor', value);
    }
    get selectedBorderWidth() {
        return this._getOption('selectedBorderWidth');
    }
    set selectedBorderWidth(value) {
        this._setOption('selectedBorderWidth', value);
    }
    get selectedColor() {
        return this._getOption('selectedColor');
    }
    set selectedColor(value) {
        this._setOption('selectedColor', value);
    }
    get selectionMode() {
        return this._getOption('selectionMode');
    }
    set selectionMode(value) {
        this._setOption('selectionMode', value);
    }
    get size() {
        return this._getOption('size');
    }
    set size(value) {
        this._setOption('size', value);
    }
    get sizeGroupingField() {
        return this._getOption('sizeGroupingField');
    }
    set sizeGroupingField(value) {
        this._setOption('sizeGroupingField', value);
    }
    get sizeGroups() {
        return this._getOption('sizeGroups');
    }
    set sizeGroups(value) {
        this._setOption('sizeGroups', value);
    }
    get type() {
        return this._getOption('type');
    }
    set type(value) {
        this._setOption('type', value);
    }
    get _optionPath() {
        return 'layers';
    }
};
DxiLayerComponent.ɵfac = function DxiLayerComponent_Factory(t) { return new (t || DxiLayerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxiLayerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxiLayerComponent, selectors: [["dxi-layer"]], inputs: { borderColor: "borderColor", borderWidth: "borderWidth", color: "color", colorGroupingField: "colorGroupingField", colorGroups: "colorGroups", customize: "customize", dataField: "dataField", dataSource: "dataSource", elementType: "elementType", hoveredBorderColor: "hoveredBorderColor", hoveredBorderWidth: "hoveredBorderWidth", hoveredColor: "hoveredColor", hoverEnabled: "hoverEnabled", label: "label", maxSize: "maxSize", minSize: "minSize", name: "name", opacity: "opacity", palette: "palette", paletteSize: "paletteSize", selectedBorderColor: "selectedBorderColor", selectedBorderWidth: "selectedBorderWidth", selectedColor: "selectedColor", selectionMode: "selectionMode", size: "size", sizeGroupingField: "sizeGroupingField", sizeGroups: "sizeGroups", type: "type" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiLayerComponent_Template(rf, ctx) { }, styles: [""] });
DxiLayerComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "borderColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], DxiLayerComponent.prototype, "borderWidth", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "color", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "colorGroupingField", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], DxiLayerComponent.prototype, "colorGroups", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Function])
], DxiLayerComponent.prototype, "customize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "dataField", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxiLayerComponent.prototype, "dataSource", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "elementType", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "hoveredBorderColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], DxiLayerComponent.prototype, "hoveredBorderWidth", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "hoveredColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], DxiLayerComponent.prototype, "hoverEnabled", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxiLayerComponent.prototype, "label", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], DxiLayerComponent.prototype, "maxSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], DxiLayerComponent.prototype, "minSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "name", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], DxiLayerComponent.prototype, "opacity", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxiLayerComponent.prototype, "palette", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], DxiLayerComponent.prototype, "paletteSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "selectedBorderColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], DxiLayerComponent.prototype, "selectedBorderWidth", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "selectedColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "selectionMode", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], DxiLayerComponent.prototype, "size", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "sizeGroupingField", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], DxiLayerComponent.prototype, "sizeGroups", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], DxiLayerComponent.prototype, "type", null);
DxiLayerComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxiLayerComponent);
export { DxiLayerComponent };
let DxiLayerModule = class DxiLayerModule {
};
DxiLayerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxiLayerModule });
DxiLayerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxiLayerModule_Factory(t) { return new (t || DxiLayerModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiLayerComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-layer',
                template: '',
                providers: [NestedOptionHost],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, { borderColor: [{
            type: Input
        }], borderWidth: [{
            type: Input
        }], color: [{
            type: Input
        }], colorGroupingField: [{
            type: Input
        }], colorGroups: [{
            type: Input
        }], customize: [{
            type: Input
        }], dataField: [{
            type: Input
        }], dataSource: [{
            type: Input
        }], elementType: [{
            type: Input
        }], hoveredBorderColor: [{
            type: Input
        }], hoveredBorderWidth: [{
            type: Input
        }], hoveredColor: [{
            type: Input
        }], hoverEnabled: [{
            type: Input
        }], label: [{
            type: Input
        }], maxSize: [{
            type: Input
        }], minSize: [{
            type: Input
        }], name: [{
            type: Input
        }], opacity: [{
            type: Input
        }], palette: [{
            type: Input
        }], paletteSize: [{
            type: Input
        }], selectedBorderColor: [{
            type: Input
        }], selectedBorderWidth: [{
            type: Input
        }], selectedColor: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], size: [{
            type: Input
        }], sizeGroupingField: [{
            type: Input
        }], sizeGroups: [{
            type: Input
        }], type: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxiLayerModule, { declarations: [DxiLayerComponent], exports: [DxiLayerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiLayerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiLayerComponent
                ],
                exports: [
                    DxiLayerComponent
                ]
            }]
    }], null, null); })();
export { DxiLayerModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,