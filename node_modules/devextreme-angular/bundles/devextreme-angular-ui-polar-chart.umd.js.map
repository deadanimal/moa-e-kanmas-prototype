{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/bundles/devextreme-angular-ui-polar-chart.umd.js"],"names":[],"mappings":"AAAA;oNAC2E;mMACmB;gJACxD;+CACnytCyB,AAYjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMuB;;;;;SAKzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA4GsB","file":"devextreme-angular-ui-polar-chart.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/viz/polar_chart'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :\n    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/polar-chart', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/viz/polar_chart', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :\n    (global = global || self, factory((global['devextreme-angular'] = global['devextreme-angular'] || {}, global['devextreme-angular'].ui = global['devextreme-angular'].ui || {}, global['devextreme-angular'].ui['polar-chart'] = {}), global.ng.platformBrowser, global.ng.core, global.DxPolarChart, global['devextreme-angular'].core, global['devextreme-angular'].ui.nested));\n}(this, (function (exports, platformBrowser, core, DxPolarChart, core$1, nested) { 'use strict';\n\n    DxPolarChart = DxPolarChart && DxPolarChart.hasOwnProperty('default') ? DxPolarChart['default'] : DxPolarChart;\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /*!\r\n     * devextreme-angular\r\n     * Version: 19.2.6\r\n     * Build date: Thu Jan 30 2020\r\n     *\r\n     * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n     *\r\n     * This software may be modified and distributed under the terms\r\n     * of the MIT license. See the LICENSE file in the root of the project for details.\r\n     *\r\n     * https://github.com/DevExpress/devextreme-angular\r\n     */\r\n    /**\r\n     * The PolarChart is a widget that visualizes data in a polar coordinate system.\r\n     */\r\n    var DxPolarChartComponent = /** @class */ (function (_super) {\r\n        __extends(DxPolarChartComponent, _super);\r\n        function DxPolarChartComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n            _this._watcherHelper = _watcherHelper;\r\n            _this._idh = _idh;\r\n            _this._createEventEmitters([\r\n                { subscribe: 'argumentAxisClick', emit: 'onArgumentAxisClick' },\r\n                { subscribe: 'disposing', emit: 'onDisposing' },\r\n                { subscribe: 'done', emit: 'onDone' },\r\n                { subscribe: 'drawn', emit: 'onDrawn' },\r\n                { subscribe: 'exported', emit: 'onExported' },\r\n                { subscribe: 'exporting', emit: 'onExporting' },\r\n                { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n                { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n                { subscribe: 'initialized', emit: 'onInitialized' },\r\n                { subscribe: 'legendClick', emit: 'onLegendClick' },\r\n                { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n                { subscribe: 'pointClick', emit: 'onPointClick' },\r\n                { subscribe: 'pointHoverChanged', emit: 'onPointHoverChanged' },\r\n                { subscribe: 'pointSelectionChanged', emit: 'onPointSelectionChanged' },\r\n                { subscribe: 'seriesClick', emit: 'onSeriesClick' },\r\n                { subscribe: 'seriesHoverChanged', emit: 'onSeriesHoverChanged' },\r\n                { subscribe: 'seriesSelectionChanged', emit: 'onSeriesSelectionChanged' },\r\n                { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },\r\n                { subscribe: 'tooltipShown', emit: 'onTooltipShown' },\r\n                { subscribe: 'zoomEnd', emit: 'onZoomEnd' },\r\n                { subscribe: 'zoomStart', emit: 'onZoomStart' },\r\n                { emit: 'adaptiveLayoutChange' },\r\n                { emit: 'animationChange' },\r\n                { emit: 'argumentAxisChange' },\r\n                { emit: 'barGroupPaddingChange' },\r\n                { emit: 'barGroupWidthChange' },\r\n                { emit: 'barWidthChange' },\r\n                { emit: 'commonAxisSettingsChange' },\r\n                { emit: 'commonSeriesSettingsChange' },\r\n                { emit: 'containerBackgroundColorChange' },\r\n                { emit: 'customizeLabelChange' },\r\n                { emit: 'customizePointChange' },\r\n                { emit: 'dataPrepareSettingsChange' },\r\n                { emit: 'dataSourceChange' },\r\n                { emit: 'disabledChange' },\r\n                { emit: 'elementAttrChange' },\r\n                { emit: 'equalBarWidthChange' },\r\n                { emit: 'exportChange' },\r\n                { emit: 'legendChange' },\r\n                { emit: 'loadingIndicatorChange' },\r\n                { emit: 'marginChange' },\r\n                { emit: 'negativesAsZeroesChange' },\r\n                { emit: 'paletteChange' },\r\n                { emit: 'paletteExtensionModeChange' },\r\n                { emit: 'pathModifiedChange' },\r\n                { emit: 'pointSelectionModeChange' },\r\n                { emit: 'redrawOnResizeChange' },\r\n                { emit: 'resolveLabelOverlappingChange' },\r\n                { emit: 'rtlEnabledChange' },\r\n                { emit: 'seriesChange' },\r\n                { emit: 'seriesSelectionModeChange' },\r\n                { emit: 'seriesTemplateChange' },\r\n                { emit: 'sizeChange' },\r\n                { emit: 'themeChange' },\r\n                { emit: 'titleChange' },\r\n                { emit: 'tooltipChange' },\r\n                { emit: 'useSpiderWebChange' },\r\n                { emit: 'valueAxisChange' }\r\n            ]);\r\n            _this._idh.setHost(_this);\r\n            optionHost.setHost(_this);\r\n            return _this;\r\n        }\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"adaptiveLayout\", {\r\n            /**\r\n             * Specifies adaptive layout options.\r\n             */\r\n            get: function () {\r\n                return this._getOption('adaptiveLayout');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('adaptiveLayout', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"animation\", {\r\n            /**\r\n             * Specifies animation options.\r\n             */\r\n            get: function () {\r\n                return this._getOption('animation');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('animation', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"argumentAxis\", {\r\n            /**\r\n             * Specifies argument axis options for the PolarChart widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('argumentAxis');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('argumentAxis', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"barGroupPadding\", {\r\n            /**\r\n             * Controls the padding and consequently the angular width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth option is set.\r\n             */\r\n            get: function () {\r\n                return this._getOption('barGroupPadding');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('barGroupPadding', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"barGroupWidth\", {\r\n            /**\r\n             * Specifies a fixed angular width for groups of bars with the same argument, measured in degrees. Takes precedence over the barGroupPadding option.\r\n             */\r\n            get: function () {\r\n                return this._getOption('barGroupWidth');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('barGroupWidth', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"barWidth\", {\r\n            /**\r\n             * Use CommonPolarChartSeries.barPadding instead.\r\n             */\r\n            get: function () {\r\n                return this._getOption('barWidth');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('barWidth', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"commonAxisSettings\", {\r\n            /**\r\n             * An object defining the configuration options that are common for all axes of the PolarChart widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('commonAxisSettings');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('commonAxisSettings', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"commonSeriesSettings\", {\r\n            /**\r\n             * An object defining the configuration options that are common for all series of the PolarChart widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('commonSeriesSettings');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('commonSeriesSettings', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"containerBackgroundColor\", {\r\n            /**\r\n             * Specifies the color of the parent page element.\r\n             */\r\n            get: function () {\r\n                return this._getOption('containerBackgroundColor');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('containerBackgroundColor', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"customizeLabel\", {\r\n            /**\r\n             * Customizes the appearance of an individual point label.\r\n             */\r\n            get: function () {\r\n                return this._getOption('customizeLabel');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('customizeLabel', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"customizePoint\", {\r\n            /**\r\n             * Customizes the appearance of an individual series point.\r\n             */\r\n            get: function () {\r\n                return this._getOption('customizePoint');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('customizePoint', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"dataPrepareSettings\", {\r\n            /**\r\n             * An object providing options for managing data from a data source.\r\n             */\r\n            get: function () {\r\n                return this._getOption('dataPrepareSettings');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('dataPrepareSettings', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"dataSource\", {\r\n            /**\r\n             * Binds the widget to data.\r\n             */\r\n            get: function () {\r\n                return this._getOption('dataSource');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('dataSource', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"disabled\", {\r\n            /**\r\n             * Specifies whether the widget responds to the user interaction.\r\n             */\r\n            get: function () {\r\n                return this._getOption('disabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('disabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"elementAttr\", {\r\n            /**\r\n             * Specifies the attributes to be attached to the widget's root element.\r\n             */\r\n            get: function () {\r\n                return this._getOption('elementAttr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('elementAttr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"equalBarWidth\", {\r\n            /**\r\n             * Use CommonPolarChartSeries.ignoreEmptyPoints instead.\r\n             */\r\n            get: function () {\r\n                return this._getOption('equalBarWidth');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('equalBarWidth', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"export\", {\r\n            /**\r\n             * Configures the exporting and printing features.\r\n             */\r\n            get: function () {\r\n                return this._getOption('export');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('export', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"legend\", {\r\n            /**\r\n             * Specifies the options of a chart's legend.\r\n             */\r\n            get: function () {\r\n                return this._getOption('legend');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('legend', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"loadingIndicator\", {\r\n            /**\r\n             * Configures the loading indicator.\r\n             */\r\n            get: function () {\r\n                return this._getOption('loadingIndicator');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('loadingIndicator', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"margin\", {\r\n            /**\r\n             * Generates space around the widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('margin');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('margin', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"negativesAsZeroes\", {\r\n            /**\r\n             * Forces the widget to treat negative values as zeroes. Applies to stacked-like series only.\r\n             */\r\n            get: function () {\r\n                return this._getOption('negativesAsZeroes');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('negativesAsZeroes', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"palette\", {\r\n            /**\r\n             * Sets the palette to be used for colorizing series and their elements.\r\n             */\r\n            get: function () {\r\n                return this._getOption('palette');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('palette', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"paletteExtensionMode\", {\r\n            /**\r\n             * Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart widget) or points in a series (in the PieChart widget).\r\n             */\r\n            get: function () {\r\n                return this._getOption('paletteExtensionMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('paletteExtensionMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"pathModified\", {\r\n            /**\r\n             * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n             */\r\n            get: function () {\r\n                return this._getOption('pathModified');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('pathModified', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"pointSelectionMode\", {\r\n            /**\r\n             * Specifies whether a single point or multiple points can be selected in the chart.\r\n             */\r\n            get: function () {\r\n                return this._getOption('pointSelectionMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('pointSelectionMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"redrawOnResize\", {\r\n            /**\r\n             * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n             */\r\n            get: function () {\r\n                return this._getOption('redrawOnResize');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('redrawOnResize', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"resolveLabelOverlapping\", {\r\n            /**\r\n             * Specifies how the chart must behave when series point labels overlap.\r\n             */\r\n            get: function () {\r\n                return this._getOption('resolveLabelOverlapping');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('resolveLabelOverlapping', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"rtlEnabled\", {\r\n            /**\r\n             * Switches the widget to a right-to-left representation.\r\n             */\r\n            get: function () {\r\n                return this._getOption('rtlEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('rtlEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"series\", {\r\n            /**\r\n             * Specifies options for PolarChart widget series.\r\n             */\r\n            get: function () {\r\n                return this._getOption('series');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('series', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"seriesSelectionMode\", {\r\n            /**\r\n             * Specifies whether a single series or multiple series can be selected in the chart.\r\n             */\r\n            get: function () {\r\n                return this._getOption('seriesSelectionMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('seriesSelectionMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"seriesTemplate\", {\r\n            /**\r\n             * Defines options for the series template.\r\n             */\r\n            get: function () {\r\n                return this._getOption('seriesTemplate');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('seriesTemplate', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"size\", {\r\n            /**\r\n             * Specifies the widget's size in pixels.\r\n             */\r\n            get: function () {\r\n                return this._getOption('size');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('size', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"theme\", {\r\n            /**\r\n             * Sets the name of the theme the widget uses.\r\n             */\r\n            get: function () {\r\n                return this._getOption('theme');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('theme', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"title\", {\r\n            /**\r\n             * Configures the widget's title.\r\n             */\r\n            get: function () {\r\n                return this._getOption('title');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('title', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"tooltip\", {\r\n            /**\r\n             * Configures tooltips.\r\n             */\r\n            get: function () {\r\n                return this._getOption('tooltip');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('tooltip', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"useSpiderWeb\", {\r\n            /**\r\n             * Indicates whether or not to display a \"spider web\".\r\n             */\r\n            get: function () {\r\n                return this._getOption('useSpiderWeb');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('useSpiderWeb', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"valueAxis\", {\r\n            /**\r\n             * Specifies value axis options for the PolarChart widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('valueAxis');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('valueAxis', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxPolarChartComponent.prototype, \"seriesChildren\", {\r\n            get: function () {\r\n                return this._getOption('series');\r\n            },\r\n            set: function (value) {\r\n                this.setChildren('series', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DxPolarChartComponent.prototype._createInstance = function (element, options) {\r\n            return new DxPolarChart(element, options);\r\n        };\r\n        DxPolarChartComponent.prototype.ngOnDestroy = function () {\r\n            this._destroyWidget();\r\n        };\r\n        DxPolarChartComponent.prototype.ngOnChanges = function (changes) {\r\n            _super.prototype.ngOnChanges.call(this, changes);\r\n            this.setupChanges('dataSource', changes);\r\n            this.setupChanges('palette', changes);\r\n            this.setupChanges('series', changes);\r\n        };\r\n        DxPolarChartComponent.prototype.setupChanges = function (prop, changes) {\r\n            if (!(prop in this._optionsToUpdate)) {\r\n                this._idh.setup(prop, changes);\r\n            }\r\n        };\r\n        DxPolarChartComponent.prototype.ngDoCheck = function () {\r\n            this._idh.doCheck('dataSource');\r\n            this._idh.doCheck('palette');\r\n            this._idh.doCheck('series');\r\n            this._watcherHelper.checkWatchers();\r\n            _super.prototype.ngDoCheck.call(this);\r\n            _super.prototype.clearChangedOptions.call(this);\r\n        };\r\n        DxPolarChartComponent.prototype._setOption = function (name, value) {\r\n            var isSetup = this._idh.setupSingle(name, value);\r\n            var isChanged = this._idh.getChanges(name, value) !== null;\r\n            if (isSetup || isChanged) {\r\n                _super.prototype._setOption.call(this, name, value);\r\n            }\r\n        };\r\n        DxPolarChartComponent.ctorParameters = function () { return [\r\n            { type: core.ElementRef },\r\n            { type: core.NgZone },\r\n            { type: core$1.DxTemplateHost },\r\n            { type: core$1.WatcherHelper },\r\n            { type: core$1.IterableDifferHelper },\r\n            { type: core$1.NestedOptionHost },\r\n            { type: platformBrowser.TransferState },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }\r\n        ]; };\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"adaptiveLayout\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"animation\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"argumentAxis\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxPolarChartComponent.prototype, \"barGroupPadding\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxPolarChartComponent.prototype, \"barGroupWidth\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxPolarChartComponent.prototype, \"barWidth\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"commonAxisSettings\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"commonSeriesSettings\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxPolarChartComponent.prototype, \"containerBackgroundColor\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Function),\r\n            __metadata(\"design:paramtypes\", [Function])\r\n        ], DxPolarChartComponent.prototype, \"customizeLabel\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Function),\r\n            __metadata(\"design:paramtypes\", [Function])\r\n        ], DxPolarChartComponent.prototype, \"customizePoint\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"dataPrepareSettings\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"dataSource\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxPolarChartComponent.prototype, \"disabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"elementAttr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxPolarChartComponent.prototype, \"equalBarWidth\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"export\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"legend\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"loadingIndicator\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"margin\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxPolarChartComponent.prototype, \"negativesAsZeroes\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"palette\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxPolarChartComponent.prototype, \"paletteExtensionMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxPolarChartComponent.prototype, \"pathModified\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxPolarChartComponent.prototype, \"pointSelectionMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxPolarChartComponent.prototype, \"redrawOnResize\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxPolarChartComponent.prototype, \"resolveLabelOverlapping\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxPolarChartComponent.prototype, \"rtlEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"series\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxPolarChartComponent.prototype, \"seriesSelectionMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"seriesTemplate\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"size\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxPolarChartComponent.prototype, \"theme\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"title\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"tooltip\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxPolarChartComponent.prototype, \"useSpiderWeb\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"valueAxis\", null);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onArgumentAxisClick\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onDisposing\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onDone\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onDrawn\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onExported\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onExporting\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onFileSaving\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onIncidentOccurred\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onInitialized\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onLegendClick\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onOptionChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onPointClick\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onPointHoverChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onPointSelectionChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onSeriesClick\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onSeriesHoverChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onSeriesSelectionChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onTooltipHidden\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onTooltipShown\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onZoomEnd\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"onZoomStart\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"adaptiveLayoutChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"animationChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"argumentAxisChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"barGroupPaddingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"barGroupWidthChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"barWidthChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"commonAxisSettingsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"commonSeriesSettingsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"containerBackgroundColorChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"customizeLabelChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"customizePointChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"dataPrepareSettingsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"dataSourceChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"disabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"elementAttrChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"equalBarWidthChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"exportChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"legendChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"marginChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"negativesAsZeroesChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"paletteChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"paletteExtensionModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"pathModifiedChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"pointSelectionModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"resolveLabelOverlappingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"rtlEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"seriesChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"seriesSelectionModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"seriesTemplateChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"sizeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"themeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"titleChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"tooltipChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"useSpiderWebChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxPolarChartComponent.prototype, \"valueAxisChange\", void 0);\r\n        __decorate([\r\n            core.ContentChildren(nested.DxiSeriesComponent),\r\n            __metadata(\"design:type\", core.QueryList),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxPolarChartComponent.prototype, \"seriesChildren\", null);\r\n        DxPolarChartComponent = __decorate([\r\n            core.Component({\r\n                selector: 'dx-polar-chart',\r\n                template: '',\r\n                providers: [\r\n                    core$1.DxTemplateHost,\r\n                    core$1.WatcherHelper,\r\n                    core$1.NestedOptionHost,\r\n                    core$1.IterableDifferHelper\r\n                ],\r\n                styles: [' :host {  display: block; }']\r\n            }),\r\n            __param(7, core.Inject(core.PLATFORM_ID)),\r\n            __metadata(\"design:paramtypes\", [core.ElementRef, core.NgZone, core$1.DxTemplateHost,\r\n                core$1.WatcherHelper,\r\n                core$1.IterableDifferHelper,\r\n                core$1.NestedOptionHost,\r\n                platformBrowser.TransferState, Object])\r\n        ], DxPolarChartComponent);\r\n        return DxPolarChartComponent;\r\n    }(core$1.DxComponent));\r\n    var DxPolarChartModule = /** @class */ (function () {\r\n        function DxPolarChartModule() {\r\n        }\r\n        DxPolarChartModule = __decorate([\r\n            core.NgModule({\r\n                imports: [\r\n                    nested.DxoAdaptiveLayoutModule,\r\n                    nested.DxoAnimationModule,\r\n                    nested.DxoArgumentAxisModule,\r\n                    nested.DxiConstantLineModule,\r\n                    nested.DxoLabelModule,\r\n                    nested.DxoFontModule,\r\n                    nested.DxoConstantLineStyleModule,\r\n                    nested.DxoGridModule,\r\n                    nested.DxoFormatModule,\r\n                    nested.DxoMinorGridModule,\r\n                    nested.DxoMinorTickModule,\r\n                    nested.DxoMinorTickIntervalModule,\r\n                    nested.DxiStripModule,\r\n                    nested.DxoStripStyleModule,\r\n                    nested.DxoTickModule,\r\n                    nested.DxoTickIntervalModule,\r\n                    nested.DxoCommonAxisSettingsModule,\r\n                    nested.DxoCommonSeriesSettingsModule,\r\n                    nested.DxoAreaModule,\r\n                    nested.DxoBorderModule,\r\n                    nested.DxoHoverStyleModule,\r\n                    nested.DxoHatchingModule,\r\n                    nested.DxoConnectorModule,\r\n                    nested.DxoPointModule,\r\n                    nested.DxoImageModule,\r\n                    nested.DxoSelectionStyleModule,\r\n                    nested.DxoValueErrorBarModule,\r\n                    nested.DxoBarModule,\r\n                    nested.DxoArgumentFormatModule,\r\n                    nested.DxoLineModule,\r\n                    nested.DxoScatterModule,\r\n                    nested.DxoStackedbarModule,\r\n                    nested.DxoDataPrepareSettingsModule,\r\n                    nested.DxoExportModule,\r\n                    nested.DxoLegendModule,\r\n                    nested.DxoMarginModule,\r\n                    nested.DxoTitleModule,\r\n                    nested.DxoSubtitleModule,\r\n                    nested.DxoLoadingIndicatorModule,\r\n                    nested.DxiSeriesModule,\r\n                    nested.DxoSeriesTemplateModule,\r\n                    nested.DxoSizeModule,\r\n                    nested.DxoTooltipModule,\r\n                    nested.DxoShadowModule,\r\n                    nested.DxoValueAxisModule,\r\n                    nested.DxoMinVisualRangeLengthModule,\r\n                    core$1.DxIntegrationModule,\r\n                    core$1.DxTemplateModule,\r\n                    platformBrowser.BrowserTransferStateModule\r\n                ],\r\n                declarations: [\r\n                    DxPolarChartComponent\r\n                ],\r\n                exports: [\r\n                    DxPolarChartComponent,\r\n                    nested.DxoAdaptiveLayoutModule,\r\n                    nested.DxoAnimationModule,\r\n                    nested.DxoArgumentAxisModule,\r\n                    nested.DxiConstantLineModule,\r\n                    nested.DxoLabelModule,\r\n                    nested.DxoFontModule,\r\n                    nested.DxoConstantLineStyleModule,\r\n                    nested.DxoGridModule,\r\n                    nested.DxoFormatModule,\r\n                    nested.DxoMinorGridModule,\r\n                    nested.DxoMinorTickModule,\r\n                    nested.DxoMinorTickIntervalModule,\r\n                    nested.DxiStripModule,\r\n                    nested.DxoStripStyleModule,\r\n                    nested.DxoTickModule,\r\n                    nested.DxoTickIntervalModule,\r\n                    nested.DxoCommonAxisSettingsModule,\r\n                    nested.DxoCommonSeriesSettingsModule,\r\n                    nested.DxoAreaModule,\r\n                    nested.DxoBorderModule,\r\n                    nested.DxoHoverStyleModule,\r\n                    nested.DxoHatchingModule,\r\n                    nested.DxoConnectorModule,\r\n                    nested.DxoPointModule,\r\n                    nested.DxoImageModule,\r\n                    nested.DxoSelectionStyleModule,\r\n                    nested.DxoValueErrorBarModule,\r\n                    nested.DxoBarModule,\r\n                    nested.DxoArgumentFormatModule,\r\n                    nested.DxoLineModule,\r\n                    nested.DxoScatterModule,\r\n                    nested.DxoStackedbarModule,\r\n                    nested.DxoDataPrepareSettingsModule,\r\n                    nested.DxoExportModule,\r\n                    nested.DxoLegendModule,\r\n                    nested.DxoMarginModule,\r\n                    nested.DxoTitleModule,\r\n                    nested.DxoSubtitleModule,\r\n                    nested.DxoLoadingIndicatorModule,\r\n                    nested.DxiSeriesModule,\r\n                    nested.DxoSeriesTemplateModule,\r\n                    nested.DxoSizeModule,\r\n                    nested.DxoTooltipModule,\r\n                    nested.DxoShadowModule,\r\n                    nested.DxoValueAxisModule,\r\n                    nested.DxoMinVisualRangeLengthModule,\r\n                    core$1.DxTemplateModule\r\n                ]\r\n            })\r\n        ], DxPolarChartModule);\r\n        return DxPolarChartModule;\r\n    }());\n\n    exports.DxPolarChartComponent = DxPolarChartComponent;\n    exports.DxPolarChartModule = DxPolarChartModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}