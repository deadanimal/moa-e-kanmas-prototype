{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/bundles/devextreme-angular-ui-list.umd.js"],"names":[],"mappings":"AAAA;oNAC2E;4LACY;gJACjD;+CACnsCAsmDmB,AAW3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMiB;;;;;SAKnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA8BgB","file":"devextreme-angular-ui-list.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/bundles/dx.all'), require('devextreme/ui/list'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :\n    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/list', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/bundles/dx.all', 'devextreme/ui/list', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :\n    (global = global || self, factory((global['devextreme-angular'] = global['devextreme-angular'] || {}, global['devextreme-angular'].ui = global['devextreme-angular'].ui || {}, global['devextreme-angular'].ui.list = {}), global.ng.platformBrowser, global.ng.core, null, global.DxList, global['devextreme-angular'].core, global['devextreme-angular'].ui.nested));\n}(this, (function (exports, platformBrowser, core, dx_all, DxList, core$1, nested) { 'use strict';\n\n    DxList = DxList && DxList.hasOwnProperty('default') ? DxList['default'] : DxList;\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /*!\r\n     * devextreme-angular\r\n     * Version: 19.2.6\r\n     * Build date: Thu Jan 30 2020\r\n     *\r\n     * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n     *\r\n     * This software may be modified and distributed under the terms\r\n     * of the MIT license. See the LICENSE file in the root of the project for details.\r\n     *\r\n     * https://github.com/DevExpress/devextreme-angular\r\n     */\r\n    /**\r\n     * The List is a widget that represents a collection of items in a scrollable list.\r\n     */\r\n    var DxListComponent = /** @class */ (function (_super) {\r\n        __extends(DxListComponent, _super);\r\n        function DxListComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n            _this._watcherHelper = _watcherHelper;\r\n            _this._idh = _idh;\r\n            _this._createEventEmitters([\r\n                { subscribe: 'contentReady', emit: 'onContentReady' },\r\n                { subscribe: 'disposing', emit: 'onDisposing' },\r\n                { subscribe: 'groupRendered', emit: 'onGroupRendered' },\r\n                { subscribe: 'initialized', emit: 'onInitialized' },\r\n                { subscribe: 'itemClick', emit: 'onItemClick' },\r\n                { subscribe: 'itemContextMenu', emit: 'onItemContextMenu' },\r\n                { subscribe: 'itemDeleted', emit: 'onItemDeleted' },\r\n                { subscribe: 'itemDeleting', emit: 'onItemDeleting' },\r\n                { subscribe: 'itemHold', emit: 'onItemHold' },\r\n                { subscribe: 'itemRendered', emit: 'onItemRendered' },\r\n                { subscribe: 'itemReordered', emit: 'onItemReordered' },\r\n                { subscribe: 'itemSwipe', emit: 'onItemSwipe' },\r\n                { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n                { subscribe: 'pageLoading', emit: 'onPageLoading' },\r\n                { subscribe: 'pullRefresh', emit: 'onPullRefresh' },\r\n                { subscribe: 'scroll', emit: 'onScroll' },\r\n                { subscribe: 'selectAllValueChanged', emit: 'onSelectAllValueChanged' },\r\n                { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },\r\n                { emit: 'accessKeyChange' },\r\n                { emit: 'activeStateEnabledChange' },\r\n                { emit: 'allowItemDeletingChange' },\r\n                { emit: 'allowItemReorderingChange' },\r\n                { emit: 'bounceEnabledChange' },\r\n                { emit: 'collapsibleGroupsChange' },\r\n                { emit: 'dataSourceChange' },\r\n                { emit: 'disabledChange' },\r\n                { emit: 'displayExprChange' },\r\n                { emit: 'elementAttrChange' },\r\n                { emit: 'focusStateEnabledChange' },\r\n                { emit: 'groupedChange' },\r\n                { emit: 'groupTemplateChange' },\r\n                { emit: 'heightChange' },\r\n                { emit: 'hintChange' },\r\n                { emit: 'hoverStateEnabledChange' },\r\n                { emit: 'indicateLoadingChange' },\r\n                { emit: 'itemDeleteModeChange' },\r\n                { emit: 'itemDraggingChange' },\r\n                { emit: 'itemHoldTimeoutChange' },\r\n                { emit: 'itemsChange' },\r\n                { emit: 'itemTemplateChange' },\r\n                { emit: 'keyExprChange' },\r\n                { emit: 'menuItemsChange' },\r\n                { emit: 'menuModeChange' },\r\n                { emit: 'nextButtonTextChange' },\r\n                { emit: 'noDataTextChange' },\r\n                { emit: 'pageLoadingTextChange' },\r\n                { emit: 'pageLoadModeChange' },\r\n                { emit: 'pulledDownTextChange' },\r\n                { emit: 'pullingDownTextChange' },\r\n                { emit: 'pullRefreshEnabledChange' },\r\n                { emit: 'refreshingTextChange' },\r\n                { emit: 'repaintChangesOnlyChange' },\r\n                { emit: 'rtlEnabledChange' },\r\n                { emit: 'scrollByContentChange' },\r\n                { emit: 'scrollByThumbChange' },\r\n                { emit: 'scrollingEnabledChange' },\r\n                { emit: 'searchEditorOptionsChange' },\r\n                { emit: 'searchEnabledChange' },\r\n                { emit: 'searchExprChange' },\r\n                { emit: 'searchModeChange' },\r\n                { emit: 'searchTimeoutChange' },\r\n                { emit: 'searchValueChange' },\r\n                { emit: 'selectAllModeChange' },\r\n                { emit: 'selectedItemKeysChange' },\r\n                { emit: 'selectedItemsChange' },\r\n                { emit: 'selectionModeChange' },\r\n                { emit: 'showScrollbarChange' },\r\n                { emit: 'showSelectionControlsChange' },\r\n                { emit: 'tabIndexChange' },\r\n                { emit: 'useNativeScrollingChange' },\r\n                { emit: 'visibleChange' },\r\n                { emit: 'widthChange' }\r\n            ]);\r\n            _this._idh.setHost(_this);\r\n            optionHost.setHost(_this);\r\n            return _this;\r\n        }\r\n        Object.defineProperty(DxListComponent.prototype, \"accessKey\", {\r\n            /**\r\n             * Specifies the shortcut key that sets focus on the widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('accessKey');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('accessKey', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"activeStateEnabled\", {\r\n            /**\r\n             * Specifies whether or not the widget changes its state when interacting with a user.\r\n             */\r\n            get: function () {\r\n                return this._getOption('activeStateEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('activeStateEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"allowItemDeleting\", {\r\n            /**\r\n             * Specifies whether or not an end user can delete list items.\r\n             */\r\n            get: function () {\r\n                return this._getOption('allowItemDeleting');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('allowItemDeleting', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"allowItemReordering\", {\r\n            /**\r\n             * Use the itemDragging option instead.\r\n             */\r\n            get: function () {\r\n                return this._getOption('allowItemReordering');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('allowItemReordering', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"bounceEnabled\", {\r\n            /**\r\n             * A Boolean value specifying whether to enable or disable the bounce-back effect.\r\n             */\r\n            get: function () {\r\n                return this._getOption('bounceEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('bounceEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"collapsibleGroups\", {\r\n            /**\r\n             * Specifies whether or not an end-user can collapse groups.\r\n             */\r\n            get: function () {\r\n                return this._getOption('collapsibleGroups');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('collapsibleGroups', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"dataSource\", {\r\n            /**\r\n             * Binds the widget to data.\r\n             */\r\n            get: function () {\r\n                return this._getOption('dataSource');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('dataSource', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"disabled\", {\r\n            /**\r\n             * Specifies whether the widget responds to user interaction.\r\n             */\r\n            get: function () {\r\n                return this._getOption('disabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('disabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"displayExpr\", {\r\n            /**\r\n             * Specifies the data field whose values should be displayed. Defaults to \"text\" when the data source contains objects.\r\n             */\r\n            get: function () {\r\n                return this._getOption('displayExpr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('displayExpr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"elementAttr\", {\r\n            /**\r\n             * Specifies the attributes to be attached to the widget's root element.\r\n             */\r\n            get: function () {\r\n                return this._getOption('elementAttr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('elementAttr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"focusStateEnabled\", {\r\n            /**\r\n             * Specifies whether the widget can be focused using keyboard navigation.\r\n             */\r\n            get: function () {\r\n                return this._getOption('focusStateEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('focusStateEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"grouped\", {\r\n            /**\r\n             * Specifies whether data items should be grouped.\r\n             */\r\n            get: function () {\r\n                return this._getOption('grouped');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('grouped', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"groupTemplate\", {\r\n            /**\r\n             * Specifies a custom template for group captions.\r\n             */\r\n            get: function () {\r\n                return this._getOption('groupTemplate');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('groupTemplate', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"height\", {\r\n            /**\r\n             * Specifies the widget's height.\r\n             */\r\n            get: function () {\r\n                return this._getOption('height');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('height', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"hint\", {\r\n            /**\r\n             * Specifies text for a hint that appears when a user pauses on the widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('hint');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('hint', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"hoverStateEnabled\", {\r\n            /**\r\n             * Specifies whether the widget changes its state when a user pauses on it.\r\n             */\r\n            get: function () {\r\n                return this._getOption('hoverStateEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('hoverStateEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"indicateLoading\", {\r\n            /**\r\n             * Specifies whether or not to show the loading panel when the DataSource bound to the widget is loading data.\r\n             */\r\n            get: function () {\r\n                return this._getOption('indicateLoading');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('indicateLoading', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"itemDeleteMode\", {\r\n            /**\r\n             * Specifies the way a user can delete items from the list.\r\n             */\r\n            get: function () {\r\n                return this._getOption('itemDeleteMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('itemDeleteMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"itemDragging\", {\r\n            /**\r\n             * Configures item reordering using drag and drop gestures.\r\n             */\r\n            get: function () {\r\n                return this._getOption('itemDragging');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('itemDragging', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"itemHoldTimeout\", {\r\n            /**\r\n             * The time period in milliseconds before the onItemHold event is raised.\r\n             */\r\n            get: function () {\r\n                return this._getOption('itemHoldTimeout');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('itemHoldTimeout', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"items\", {\r\n            /**\r\n             * An array of items displayed by the widget.\r\n             */\r\n            get: function () {\r\n                return this._getOption('items');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('items', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"itemTemplate\", {\r\n            /**\r\n             * Specifies a custom template for items.\r\n             */\r\n            get: function () {\r\n                return this._getOption('itemTemplate');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('itemTemplate', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"keyExpr\", {\r\n            /**\r\n             * Specifies the key property that provides key values to access data items. Each key value must be unique.\r\n             */\r\n            get: function () {\r\n                return this._getOption('keyExpr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('keyExpr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"menuItems\", {\r\n            /**\r\n             * Specifies the array of items for a context menu called for a list item.\r\n             */\r\n            get: function () {\r\n                return this._getOption('menuItems');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('menuItems', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"menuMode\", {\r\n            /**\r\n             * Specifies whether an item context menu is shown when a user holds or swipes an item.\r\n             */\r\n            get: function () {\r\n                return this._getOption('menuMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('menuMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"nextButtonText\", {\r\n            /**\r\n             * The text displayed on the button used to load the next page from the data source.\r\n             */\r\n            get: function () {\r\n                return this._getOption('nextButtonText');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('nextButtonText', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"noDataText\", {\r\n            /**\r\n             * The text or HTML markup displayed by the widget if the item collection is empty.\r\n             */\r\n            get: function () {\r\n                return this._getOption('noDataText');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('noDataText', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"pageLoadingText\", {\r\n            /**\r\n             * Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom.\r\n             */\r\n            get: function () {\r\n                return this._getOption('pageLoadingText');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('pageLoadingText', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"pageLoadMode\", {\r\n            /**\r\n             * Specifies whether the next page is loaded when a user scrolls the widget to the bottom or when the \"next\" button is clicked.\r\n             */\r\n            get: function () {\r\n                return this._getOption('pageLoadMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('pageLoadMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"pulledDownText\", {\r\n            /**\r\n             * Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold.\r\n             */\r\n            get: function () {\r\n                return this._getOption('pulledDownText');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('pulledDownText', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"pullingDownText\", {\r\n            /**\r\n             * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.\r\n             */\r\n            get: function () {\r\n                return this._getOption('pullingDownText');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('pullingDownText', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"pullRefreshEnabled\", {\r\n            /**\r\n             * A Boolean value specifying whether or not the widget supports the \"pull down to refresh\" gesture.\r\n             */\r\n            get: function () {\r\n                return this._getOption('pullRefreshEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('pullRefreshEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"refreshingText\", {\r\n            /**\r\n             * Specifies the text displayed in the pullDown panel while the list is being refreshed.\r\n             */\r\n            get: function () {\r\n                return this._getOption('refreshingText');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('refreshingText', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"repaintChangesOnly\", {\r\n            /**\r\n             * Specifies whether to repaint only those elements whose data changed.\r\n             */\r\n            get: function () {\r\n                return this._getOption('repaintChangesOnly');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('repaintChangesOnly', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"rtlEnabled\", {\r\n            /**\r\n             * Switches the widget to a right-to-left representation.\r\n             */\r\n            get: function () {\r\n                return this._getOption('rtlEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('rtlEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"scrollByContent\", {\r\n            /**\r\n             * A Boolean value specifying if the list is scrolled by content.\r\n             */\r\n            get: function () {\r\n                return this._getOption('scrollByContent');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('scrollByContent', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"scrollByThumb\", {\r\n            /**\r\n             * A Boolean value specifying if the list is scrolled using the scrollbar.\r\n             */\r\n            get: function () {\r\n                return this._getOption('scrollByThumb');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('scrollByThumb', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"scrollingEnabled\", {\r\n            /**\r\n             * A Boolean value specifying whether to enable or disable list scrolling.\r\n             */\r\n            get: function () {\r\n                return this._getOption('scrollingEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('scrollingEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"searchEditorOptions\", {\r\n            /**\r\n             * Configures the search panel.\r\n             */\r\n            get: function () {\r\n                return this._getOption('searchEditorOptions');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('searchEditorOptions', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"searchEnabled\", {\r\n            /**\r\n             * Specifies whether the search panel is visible.\r\n             */\r\n            get: function () {\r\n                return this._getOption('searchEnabled');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('searchEnabled', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"searchExpr\", {\r\n            /**\r\n             * Specifies a data object's field name or an expression whose value is compared to the search string.\r\n             */\r\n            get: function () {\r\n                return this._getOption('searchExpr');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('searchExpr', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"searchMode\", {\r\n            /**\r\n             * Specifies a comparison operation used to search widget items.\r\n             */\r\n            get: function () {\r\n                return this._getOption('searchMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('searchMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"searchTimeout\", {\r\n            /**\r\n             * Specifies a delay in milliseconds between when a user finishes typing, and the search is executed.\r\n             */\r\n            get: function () {\r\n                return this._getOption('searchTimeout');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('searchTimeout', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"searchValue\", {\r\n            /**\r\n             * Specifies the current search string.\r\n             */\r\n            get: function () {\r\n                return this._getOption('searchValue');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('searchValue', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"selectAllMode\", {\r\n            /**\r\n             * Specifies the mode in which all items are selected.\r\n             */\r\n            get: function () {\r\n                return this._getOption('selectAllMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('selectAllMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"selectedItemKeys\", {\r\n            /**\r\n             * Specifies an array of currently selected item keys.\r\n             */\r\n            get: function () {\r\n                return this._getOption('selectedItemKeys');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('selectedItemKeys', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"selectedItems\", {\r\n            /**\r\n             * An array of currently selected item objects.\r\n             */\r\n            get: function () {\r\n                return this._getOption('selectedItems');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('selectedItems', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"selectionMode\", {\r\n            /**\r\n             * Specifies item selection mode.\r\n             */\r\n            get: function () {\r\n                return this._getOption('selectionMode');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('selectionMode', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"showScrollbar\", {\r\n            /**\r\n             * Specifies when the widget shows the scrollbar.\r\n             */\r\n            get: function () {\r\n                return this._getOption('showScrollbar');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('showScrollbar', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"showSelectionControls\", {\r\n            /**\r\n             * Specifies whether or not to display controls used to select list items.\r\n             */\r\n            get: function () {\r\n                return this._getOption('showSelectionControls');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('showSelectionControls', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"tabIndex\", {\r\n            /**\r\n             * Specifies the number of the element when the Tab key is used for navigating.\r\n             */\r\n            get: function () {\r\n                return this._getOption('tabIndex');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('tabIndex', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"useNativeScrolling\", {\r\n            /**\r\n             * Specifies whether or not the widget uses native scrolling.\r\n             */\r\n            get: function () {\r\n                return this._getOption('useNativeScrolling');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('useNativeScrolling', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"visible\", {\r\n            /**\r\n             * Specifies whether the widget is visible.\r\n             */\r\n            get: function () {\r\n                return this._getOption('visible');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('visible', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"width\", {\r\n            /**\r\n             * Specifies the widget's width.\r\n             */\r\n            get: function () {\r\n                return this._getOption('width');\r\n            },\r\n            set: function (value) {\r\n                this._setOption('width', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"itemsChildren\", {\r\n            get: function () {\r\n                return this._getOption('items');\r\n            },\r\n            set: function (value) {\r\n                this.setChildren('items', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DxListComponent.prototype, \"menuItemsChildren\", {\r\n            get: function () {\r\n                return this._getOption('menuItems');\r\n            },\r\n            set: function (value) {\r\n                this.setChildren('menuItems', value);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        DxListComponent.prototype._createInstance = function (element, options) {\r\n            return new DxList(element, options);\r\n        };\r\n        DxListComponent.prototype.ngOnDestroy = function () {\r\n            this._destroyWidget();\r\n        };\r\n        DxListComponent.prototype.ngOnChanges = function (changes) {\r\n            _super.prototype.ngOnChanges.call(this, changes);\r\n            this.setupChanges('dataSource', changes);\r\n            this.setupChanges('items', changes);\r\n            this.setupChanges('menuItems', changes);\r\n            this.setupChanges('searchExpr', changes);\r\n            this.setupChanges('selectedItemKeys', changes);\r\n            this.setupChanges('selectedItems', changes);\r\n        };\r\n        DxListComponent.prototype.setupChanges = function (prop, changes) {\r\n            if (!(prop in this._optionsToUpdate)) {\r\n                this._idh.setup(prop, changes);\r\n            }\r\n        };\r\n        DxListComponent.prototype.ngDoCheck = function () {\r\n            this._idh.doCheck('dataSource');\r\n            this._idh.doCheck('items');\r\n            this._idh.doCheck('menuItems');\r\n            this._idh.doCheck('searchExpr');\r\n            this._idh.doCheck('selectedItemKeys');\r\n            this._idh.doCheck('selectedItems');\r\n            this._watcherHelper.checkWatchers();\r\n            _super.prototype.ngDoCheck.call(this);\r\n            _super.prototype.clearChangedOptions.call(this);\r\n        };\r\n        DxListComponent.prototype._setOption = function (name, value) {\r\n            var isSetup = this._idh.setupSingle(name, value);\r\n            var isChanged = this._idh.getChanges(name, value) !== null;\r\n            if (isSetup || isChanged) {\r\n                _super.prototype._setOption.call(this, name, value);\r\n            }\r\n        };\r\n        DxListComponent.ctorParameters = function () { return [\r\n            { type: core.ElementRef },\r\n            { type: core.NgZone },\r\n            { type: core$1.DxTemplateHost },\r\n            { type: core$1.WatcherHelper },\r\n            { type: core$1.IterableDifferHelper },\r\n            { type: core$1.NestedOptionHost },\r\n            { type: platformBrowser.TransferState },\r\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }\r\n        ]; };\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"accessKey\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"activeStateEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"allowItemDeleting\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"allowItemReordering\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"bounceEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"collapsibleGroups\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"dataSource\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"disabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"displayExpr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"elementAttr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"focusStateEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"grouped\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"groupTemplate\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"height\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"hint\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"hoverStateEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"indicateLoading\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"itemDeleteMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"itemDragging\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxListComponent.prototype, \"itemHoldTimeout\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Array),\r\n            __metadata(\"design:paramtypes\", [Array])\r\n        ], DxListComponent.prototype, \"items\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"itemTemplate\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"keyExpr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Array),\r\n            __metadata(\"design:paramtypes\", [Array])\r\n        ], DxListComponent.prototype, \"menuItems\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"menuMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"nextButtonText\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"noDataText\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"pageLoadingText\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"pageLoadMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"pulledDownText\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"pullingDownText\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"pullRefreshEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"refreshingText\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"repaintChangesOnly\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"rtlEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"scrollByContent\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"scrollByThumb\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"scrollingEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"searchEditorOptions\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"searchEnabled\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"searchExpr\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"searchMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxListComponent.prototype, \"searchTimeout\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"searchValue\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"selectAllMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Array),\r\n            __metadata(\"design:paramtypes\", [Array])\r\n        ], DxListComponent.prototype, \"selectedItemKeys\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Array),\r\n            __metadata(\"design:paramtypes\", [Array])\r\n        ], DxListComponent.prototype, \"selectedItems\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"selectionMode\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", String),\r\n            __metadata(\"design:paramtypes\", [String])\r\n        ], DxListComponent.prototype, \"showScrollbar\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"showSelectionControls\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Number),\r\n            __metadata(\"design:paramtypes\", [Number])\r\n        ], DxListComponent.prototype, \"tabIndex\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"useNativeScrolling\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Boolean),\r\n            __metadata(\"design:paramtypes\", [Boolean])\r\n        ], DxListComponent.prototype, \"visible\", null);\r\n        __decorate([\r\n            core.Input(),\r\n            __metadata(\"design:type\", Object),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"width\", null);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onContentReady\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onDisposing\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onGroupRendered\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onInitialized\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onItemClick\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onItemContextMenu\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onItemDeleted\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onItemDeleting\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onItemHold\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onItemRendered\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onItemReordered\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onItemSwipe\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onOptionChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onPageLoading\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onPullRefresh\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onScroll\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onSelectAllValueChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"onSelectionChanged\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"accessKeyChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"allowItemDeletingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"allowItemReorderingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"bounceEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"collapsibleGroupsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"dataSourceChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"disabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"displayExprChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"elementAttrChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"groupedChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"groupTemplateChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"heightChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"hintChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"indicateLoadingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"itemDeleteModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"itemDraggingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"itemHoldTimeoutChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"itemsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"itemTemplateChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"keyExprChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"menuItemsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"menuModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"nextButtonTextChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"noDataTextChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"pageLoadingTextChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"pageLoadModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"pulledDownTextChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"pullingDownTextChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"pullRefreshEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"refreshingTextChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"repaintChangesOnlyChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"rtlEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"scrollByContentChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"scrollByThumbChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"scrollingEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"searchEditorOptionsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"searchEnabledChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"searchExprChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"searchModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"searchTimeoutChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"searchValueChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"selectAllModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"selectedItemKeysChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"selectedItemsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"selectionModeChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"showScrollbarChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"showSelectionControlsChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"tabIndexChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"useNativeScrollingChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"visibleChange\", void 0);\r\n        __decorate([\r\n            core.Output(),\r\n            __metadata(\"design:type\", core.EventEmitter)\r\n        ], DxListComponent.prototype, \"widthChange\", void 0);\r\n        __decorate([\r\n            core.ContentChildren(nested.DxiItemComponent),\r\n            __metadata(\"design:type\", core.QueryList),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"itemsChildren\", null);\r\n        __decorate([\r\n            core.ContentChildren(nested.DxiMenuItemComponent),\r\n            __metadata(\"design:type\", core.QueryList),\r\n            __metadata(\"design:paramtypes\", [Object])\r\n        ], DxListComponent.prototype, \"menuItemsChildren\", null);\r\n        DxListComponent = __decorate([\r\n            core.Component({\r\n                selector: 'dx-list',\r\n                template: '',\r\n                providers: [\r\n                    core$1.DxTemplateHost,\r\n                    core$1.WatcherHelper,\r\n                    core$1.NestedOptionHost,\r\n                    core$1.IterableDifferHelper\r\n                ]\r\n            }),\r\n            __param(7, core.Inject(core.PLATFORM_ID)),\r\n            __metadata(\"design:paramtypes\", [core.ElementRef, core.NgZone, core$1.DxTemplateHost,\r\n                core$1.WatcherHelper,\r\n                core$1.IterableDifferHelper,\r\n                core$1.NestedOptionHost,\r\n                platformBrowser.TransferState, Object])\r\n        ], DxListComponent);\r\n        return DxListComponent;\r\n    }(core$1.DxComponent));\r\n    var DxListModule = /** @class */ (function () {\r\n        function DxListModule() {\r\n        }\r\n        DxListModule = __decorate([\r\n            core.NgModule({\r\n                imports: [\r\n                    nested.DxoItemDraggingModule,\r\n                    nested.DxoCursorOffsetModule,\r\n                    nested.DxiItemModule,\r\n                    nested.DxiMenuItemModule,\r\n                    nested.DxoSearchEditorOptionsModule,\r\n                    nested.DxiButtonModule,\r\n                    nested.DxoOptionsModule,\r\n                    core$1.DxIntegrationModule,\r\n                    core$1.DxTemplateModule,\r\n                    platformBrowser.BrowserTransferStateModule\r\n                ],\r\n                declarations: [\r\n                    DxListComponent\r\n                ],\r\n                exports: [\r\n                    DxListComponent,\r\n                    nested.DxoItemDraggingModule,\r\n                    nested.DxoCursorOffsetModule,\r\n                    nested.DxiItemModule,\r\n                    nested.DxiMenuItemModule,\r\n                    nested.DxoSearchEditorOptionsModule,\r\n                    nested.DxiButtonModule,\r\n                    nested.DxoOptionsModule,\r\n                    core$1.DxTemplateModule\r\n                ]\r\n            })\r\n        ], DxListModule);\r\n        return DxListModule;\r\n    }());\n\n    exports.DxListComponent = DxListComponent;\n    exports.DxListModule = DxListModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}