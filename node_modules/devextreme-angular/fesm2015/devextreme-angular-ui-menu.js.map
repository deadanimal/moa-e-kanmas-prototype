{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-menu.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gLAse","file":"devextreme-angular-ui-menu.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxMenu from 'devextreme/ui/menu';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxoAnimationModule, DxoHideModule, DxoShowModule, DxiItemModule, DxoShowFirstSubmenuModeModule, DxoDelayModule, DxoShowSubmenuModeModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The Menu widget is a panel with clickable items. A click on an item opens a drop-down menu, which can contain several submenus.\r\n */\r\nlet DxMenuComponent = class DxMenuComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._watcherHelper = _watcherHelper;\r\n        this._idh = _idh;\r\n        this._createEventEmitters([\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'itemClick', emit: 'onItemClick' },\r\n            { subscribe: 'itemContextMenu', emit: 'onItemContextMenu' },\r\n            { subscribe: 'itemRendered', emit: 'onItemRendered' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },\r\n            { subscribe: 'submenuHidden', emit: 'onSubmenuHidden' },\r\n            { subscribe: 'submenuHiding', emit: 'onSubmenuHiding' },\r\n            { subscribe: 'submenuShowing', emit: 'onSubmenuShowing' },\r\n            { subscribe: 'submenuShown', emit: 'onSubmenuShown' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'adaptivityEnabledChange' },\r\n            { emit: 'animationChange' },\r\n            { emit: 'cssClassChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'disabledExprChange' },\r\n            { emit: 'displayExprChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hideSubmenuOnMouseLeaveChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'itemsChange' },\r\n            { emit: 'itemsExprChange' },\r\n            { emit: 'itemTemplateChange' },\r\n            { emit: 'orientationChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'selectByClickChange' },\r\n            { emit: 'selectedExprChange' },\r\n            { emit: 'selectedItemChange' },\r\n            { emit: 'selectionModeChange' },\r\n            { emit: 'showFirstSubmenuModeChange' },\r\n            { emit: 'showSubmenuModeChange' },\r\n            { emit: 'submenuDirectionChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Specifies the shortcut key that sets focus on the widget.\r\n     */\r\n    get accessKey() {\r\n        return this._getOption('accessKey');\r\n    }\r\n    set accessKey(value) {\r\n        this._setOption('accessKey', value);\r\n    }\r\n    /**\r\n     * A Boolean value specifying whether or not the widget changes its state when interacting with a user.\r\n     */\r\n    get activeStateEnabled() {\r\n        return this._getOption('activeStateEnabled');\r\n    }\r\n    set activeStateEnabled(value) {\r\n        this._setOption('activeStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies whether adaptive widget rendering is enabled on small screens. Applies only if the orientation is \"horizontal\".\r\n     */\r\n    get adaptivityEnabled() {\r\n        return this._getOption('adaptivityEnabled');\r\n    }\r\n    set adaptivityEnabled(value) {\r\n        this._setOption('adaptivityEnabled', value);\r\n    }\r\n    /**\r\n     * Configures widget visibility animations. This object contains two fields: show and hide.\r\n     */\r\n    get animation() {\r\n        return this._getOption('animation');\r\n    }\r\n    set animation(value) {\r\n        this._setOption('animation', value);\r\n    }\r\n    /**\r\n     * Specifies the name of the CSS class to be applied to the root menu level and all submenus.\r\n     */\r\n    get cssClass() {\r\n        return this._getOption('cssClass');\r\n    }\r\n    set cssClass(value) {\r\n        this._setOption('cssClass', value);\r\n    }\r\n    /**\r\n     * Binds the widget to data.\r\n     */\r\n    get dataSource() {\r\n        return this._getOption('dataSource');\r\n    }\r\n    set dataSource(value) {\r\n        this._setOption('dataSource', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies the name of the data source item field whose value defines whether or not the corresponding widget item is disabled.\r\n     */\r\n    get disabledExpr() {\r\n        return this._getOption('disabledExpr');\r\n    }\r\n    set disabledExpr(value) {\r\n        this._setOption('disabledExpr', value);\r\n    }\r\n    /**\r\n     * Specifies the data field whose values should be displayed.\r\n     */\r\n    get displayExpr() {\r\n        return this._getOption('displayExpr');\r\n    }\r\n    set displayExpr(value) {\r\n        this._setOption('displayExpr', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget can be focused using keyboard navigation.\r\n     */\r\n    get focusStateEnabled() {\r\n        return this._getOption('focusStateEnabled');\r\n    }\r\n    set focusStateEnabled(value) {\r\n        this._setOption('focusStateEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    get height() {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value) {\r\n        this._setOption('height', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not the submenu is hidden when the mouse pointer leaves it.\r\n     */\r\n    get hideSubmenuOnMouseLeave() {\r\n        return this._getOption('hideSubmenuOnMouseLeave');\r\n    }\r\n    set hideSubmenuOnMouseLeave(value) {\r\n        this._setOption('hideSubmenuOnMouseLeave', value);\r\n    }\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the widget.\r\n     */\r\n    get hint() {\r\n        return this._getOption('hint');\r\n    }\r\n    set hint(value) {\r\n        this._setOption('hint', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget changes its state when a user pauses on it.\r\n     */\r\n    get hoverStateEnabled() {\r\n        return this._getOption('hoverStateEnabled');\r\n    }\r\n    set hoverStateEnabled(value) {\r\n        this._setOption('hoverStateEnabled', value);\r\n    }\r\n    /**\r\n     * Holds an array of menu items.\r\n     */\r\n    get items() {\r\n        return this._getOption('items');\r\n    }\r\n    set items(value) {\r\n        this._setOption('items', value);\r\n    }\r\n    /**\r\n     * Specifies which data field contains nested items.\r\n     */\r\n    get itemsExpr() {\r\n        return this._getOption('itemsExpr');\r\n    }\r\n    set itemsExpr(value) {\r\n        this._setOption('itemsExpr', value);\r\n    }\r\n    /**\r\n     * Specifies a custom template for items.\r\n     */\r\n    get itemTemplate() {\r\n        return this._getOption('itemTemplate');\r\n    }\r\n    set itemTemplate(value) {\r\n        this._setOption('itemTemplate', value);\r\n    }\r\n    /**\r\n     * Specifies whether the menu has horizontal or vertical orientation.\r\n     */\r\n    get orientation() {\r\n        return this._getOption('orientation');\r\n    }\r\n    set orientation(value) {\r\n        this._setOption('orientation', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies whether or not an item becomes selected if a user clicks it.\r\n     */\r\n    get selectByClick() {\r\n        return this._getOption('selectByClick');\r\n    }\r\n    set selectByClick(value) {\r\n        this._setOption('selectByClick', value);\r\n    }\r\n    /**\r\n     * Specifies the name of the data source item field whose value defines whether or not the corresponding widget items is selected.\r\n     */\r\n    get selectedExpr() {\r\n        return this._getOption('selectedExpr');\r\n    }\r\n    set selectedExpr(value) {\r\n        this._setOption('selectedExpr', value);\r\n    }\r\n    /**\r\n     * The selected item object.\r\n     */\r\n    get selectedItem() {\r\n        return this._getOption('selectedItem');\r\n    }\r\n    set selectedItem(value) {\r\n        this._setOption('selectedItem', value);\r\n    }\r\n    /**\r\n     * Specifies the selection mode supported by the menu.\r\n     */\r\n    get selectionMode() {\r\n        return this._getOption('selectionMode');\r\n    }\r\n    set selectionMode(value) {\r\n        this._setOption('selectionMode', value);\r\n    }\r\n    /**\r\n     * Specifies options for showing and hiding the first level submenu.\r\n     */\r\n    get showFirstSubmenuMode() {\r\n        return this._getOption('showFirstSubmenuMode');\r\n    }\r\n    set showFirstSubmenuMode(value) {\r\n        this._setOption('showFirstSubmenuMode', value);\r\n    }\r\n    /**\r\n     * Specifies options of submenu showing and hiding.\r\n     */\r\n    get showSubmenuMode() {\r\n        return this._getOption('showSubmenuMode');\r\n    }\r\n    set showSubmenuMode(value) {\r\n        this._setOption('showSubmenuMode', value);\r\n    }\r\n    /**\r\n     * Specifies the direction at which the submenus are displayed.\r\n     */\r\n    get submenuDirection() {\r\n        return this._getOption('submenuDirection');\r\n    }\r\n    set submenuDirection(value) {\r\n        this._setOption('submenuDirection', value);\r\n    }\r\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n     */\r\n    get tabIndex() {\r\n        return this._getOption('tabIndex');\r\n    }\r\n    set tabIndex(value) {\r\n        this._setOption('tabIndex', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget is visible.\r\n     */\r\n    get visible() {\r\n        return this._getOption('visible');\r\n    }\r\n    set visible(value) {\r\n        this._setOption('visible', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    get width() {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value) {\r\n        this._setOption('width', value);\r\n    }\r\n    get itemsChildren() {\r\n        return this._getOption('items');\r\n    }\r\n    set itemsChildren(value) {\r\n        this.setChildren('items', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxMenu(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('dataSource', changes);\r\n        this.setupChanges('items', changes);\r\n    }\r\n    setupChanges(prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        this._idh.doCheck('dataSource');\r\n        this._idh.doCheck('items');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n    _setOption(name, value) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n};\r\nDxMenuComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: IterableDifferHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxMenuComponent.prototype, \"accessKey\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxMenuComponent.prototype, \"activeStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxMenuComponent.prototype, \"adaptivityEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"animation\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxMenuComponent.prototype, \"cssClass\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"dataSource\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxMenuComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"disabledExpr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"displayExpr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxMenuComponent.prototype, \"focusStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"height\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxMenuComponent.prototype, \"hideSubmenuOnMouseLeave\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxMenuComponent.prototype, \"hint\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxMenuComponent.prototype, \"hoverStateEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], DxMenuComponent.prototype, \"items\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"itemsExpr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"itemTemplate\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxMenuComponent.prototype, \"orientation\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxMenuComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxMenuComponent.prototype, \"selectByClick\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"selectedExpr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"selectedItem\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxMenuComponent.prototype, \"selectionMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"showFirstSubmenuMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"showSubmenuMode\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxMenuComponent.prototype, \"submenuDirection\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxMenuComponent.prototype, \"tabIndex\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxMenuComponent.prototype, \"visible\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"width\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onContentReady\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onItemClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onItemContextMenu\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onItemRendered\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onSelectionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onSubmenuHidden\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onSubmenuHiding\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onSubmenuShowing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"onSubmenuShown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"accessKeyChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"adaptivityEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"animationChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"cssClassChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"dataSourceChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"disabledExprChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"displayExprChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"heightChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"hideSubmenuOnMouseLeaveChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"hintChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"itemsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"itemsExprChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"itemTemplateChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"orientationChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"selectByClickChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"selectedExprChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"selectedItemChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"selectionModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"showFirstSubmenuModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"showSubmenuModeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"submenuDirectionChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"tabIndexChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"visibleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxMenuComponent.prototype, \"widthChange\", void 0);\r\n__decorate([\r\n    ContentChildren(DxiItemComponent),\r\n    __metadata(\"design:type\", QueryList),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxMenuComponent.prototype, \"itemsChildren\", null);\r\nDxMenuComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-menu',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            IterableDifferHelper\r\n        ]\r\n    }),\r\n    __param(7, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        IterableDifferHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxMenuComponent);\r\nlet DxMenuModule = class DxMenuModule {\r\n};\r\nDxMenuModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoAnimationModule,\r\n            DxoHideModule,\r\n            DxoShowModule,\r\n            DxiItemModule,\r\n            DxoShowFirstSubmenuModeModule,\r\n            DxoDelayModule,\r\n            DxoShowSubmenuModeModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxMenuComponent\r\n        ],\r\n        exports: [\r\n            DxMenuComponent,\r\n            DxoAnimationModule,\r\n            DxoHideModule,\r\n            DxoShowModule,\r\n            DxiItemModule,\r\n            DxoShowFirstSubmenuModeModule,\r\n            DxoDelayModule,\r\n            DxoShowSubmenuModeModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxMenuModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxMenuComponent, DxMenuModule };\n"]}