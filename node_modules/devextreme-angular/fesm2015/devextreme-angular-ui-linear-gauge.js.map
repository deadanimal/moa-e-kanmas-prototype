{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-linear-gauge.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wNAkQE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAgPmC,AAYlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAQD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BA8DsB","file":"devextreme-angular-ui-linear-gauge.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxLinearGauge from 'devextreme/viz/linear_gauge';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoAnimationModule, DxoExportModule, DxoGeometryModule, DxoLoadingIndicatorModule, DxoFontModule, DxoMarginModule, DxoRangeContainerModule, DxiRangeModule, DxoWidthModule, DxoScaleModule, DxoLabelModule, DxoFormatModule, DxoMinorTickModule, DxoTickModule, DxoSizeModule, DxoSubvalueIndicatorModule, DxoTextModule, DxoTitleModule, DxoSubtitleModule, DxoTooltipModule, DxoBorderModule, DxoShadowModule, DxoValueIndicatorModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The LinearGauge is a widget that indicates values on a linear numeric scale.\r\n */\r\nlet DxLinearGaugeComponent = class DxLinearGaugeComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._watcherHelper = _watcherHelper;\r\n        this._idh = _idh;\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },\r\n            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },\r\n            { emit: 'animationChange' },\r\n            { emit: 'containerBackgroundColorChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'geometryChange' },\r\n            { emit: 'loadingIndicatorChange' },\r\n            { emit: 'marginChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'rangeContainerChange' },\r\n            { emit: 'redrawOnResizeChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scaleChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'subvalueIndicatorChange' },\r\n            { emit: 'subvaluesChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'titleChange' },\r\n            { emit: 'tooltipChange' },\r\n            { emit: 'valueChange' },\r\n            { emit: 'valueIndicatorChange' }\r\n        ]);\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Specifies animation options.\r\n     */\r\n    get animation() {\r\n        return this._getOption('animation');\r\n    }\r\n    set animation(value) {\r\n        this._setOption('animation', value);\r\n    }\r\n    /**\r\n     * Specifies the color of the parent page element.\r\n     */\r\n    get containerBackgroundColor() {\r\n        return this._getOption('containerBackgroundColor');\r\n    }\r\n    set containerBackgroundColor(value) {\r\n        this._setOption('containerBackgroundColor', value);\r\n    }\r\n    /**\r\n     * Specifies whether the widget responds to the user interaction.\r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Configures the exporting and printing features.\r\n     */\r\n    get export() {\r\n        return this._getOption('export');\r\n    }\r\n    set export(value) {\r\n        this._setOption('export', value);\r\n    }\r\n    /**\r\n     * Specifies the options required to set the geometry of the LinearGauge widget.\r\n     */\r\n    get geometry() {\r\n        return this._getOption('geometry');\r\n    }\r\n    set geometry(value) {\r\n        this._setOption('geometry', value);\r\n    }\r\n    /**\r\n     * Configures the loading indicator.\r\n     */\r\n    get loadingIndicator() {\r\n        return this._getOption('loadingIndicator');\r\n    }\r\n    set loadingIndicator(value) {\r\n        this._setOption('loadingIndicator', value);\r\n    }\r\n    /**\r\n     * Generates space around the widget.\r\n     */\r\n    get margin() {\r\n        return this._getOption('margin');\r\n    }\r\n    set margin(value) {\r\n        this._setOption('margin', value);\r\n    }\r\n    /**\r\n     * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n     */\r\n    get pathModified() {\r\n        return this._getOption('pathModified');\r\n    }\r\n    set pathModified(value) {\r\n        this._setOption('pathModified', value);\r\n    }\r\n    /**\r\n     * Specifies gauge range container options.\r\n     */\r\n    get rangeContainer() {\r\n        return this._getOption('rangeContainer');\r\n    }\r\n    set rangeContainer(value) {\r\n        this._setOption('rangeContainer', value);\r\n    }\r\n    /**\r\n     * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n     */\r\n    get redrawOnResize() {\r\n        return this._getOption('redrawOnResize');\r\n    }\r\n    set redrawOnResize(value) {\r\n        this._setOption('redrawOnResize', value);\r\n    }\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the gauge's scale options.\r\n     */\r\n    get scale() {\r\n        return this._getOption('scale');\r\n    }\r\n    set scale(value) {\r\n        this._setOption('scale', value);\r\n    }\r\n    /**\r\n     * Specifies the widget's size in pixels.\r\n     */\r\n    get size() {\r\n        return this._getOption('size');\r\n    }\r\n    set size(value) {\r\n        this._setOption('size', value);\r\n    }\r\n    /**\r\n     * Specifies the appearance options of subvalue indicators.\r\n     */\r\n    get subvalueIndicator() {\r\n        return this._getOption('subvalueIndicator');\r\n    }\r\n    set subvalueIndicator(value) {\r\n        this._setOption('subvalueIndicator', value);\r\n    }\r\n    /**\r\n     * Specifies a set of subvalues to be designated by the subvalue indicators.\r\n     */\r\n    get subvalues() {\r\n        return this._getOption('subvalues');\r\n    }\r\n    set subvalues(value) {\r\n        this._setOption('subvalues', value);\r\n    }\r\n    /**\r\n     * Sets the name of the theme the widget uses.\r\n     */\r\n    get theme() {\r\n        return this._getOption('theme');\r\n    }\r\n    set theme(value) {\r\n        this._setOption('theme', value);\r\n    }\r\n    /**\r\n     * Configures the widget's title.\r\n     */\r\n    get title() {\r\n        return this._getOption('title');\r\n    }\r\n    set title(value) {\r\n        this._setOption('title', value);\r\n    }\r\n    /**\r\n     * Configures tooltips.\r\n     */\r\n    get tooltip() {\r\n        return this._getOption('tooltip');\r\n    }\r\n    set tooltip(value) {\r\n        this._setOption('tooltip', value);\r\n    }\r\n    /**\r\n     * Specifies the main value on a gauge.\r\n     */\r\n    get value() {\r\n        return this._getOption('value');\r\n    }\r\n    set value(value) {\r\n        this._setOption('value', value);\r\n    }\r\n    /**\r\n     * Specifies the appearance options of the value indicator.\r\n     */\r\n    get valueIndicator() {\r\n        return this._getOption('valueIndicator');\r\n    }\r\n    set valueIndicator(value) {\r\n        this._setOption('valueIndicator', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxLinearGauge(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('subvalues', changes);\r\n    }\r\n    setupChanges(prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        this._idh.doCheck('subvalues');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n    _setOption(name, value) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n};\r\nDxLinearGaugeComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: DxTemplateHost },\r\n    { type: WatcherHelper },\r\n    { type: IterableDifferHelper },\r\n    { type: NestedOptionHost },\r\n    { type: TransferState },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"animation\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxLinearGaugeComponent.prototype, \"containerBackgroundColor\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxLinearGaugeComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"elementAttr\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"export\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"geometry\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"loadingIndicator\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"margin\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxLinearGaugeComponent.prototype, \"pathModified\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"rangeContainer\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxLinearGaugeComponent.prototype, \"redrawOnResize\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], DxLinearGaugeComponent.prototype, \"rtlEnabled\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"scale\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"size\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"subvalueIndicator\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], DxLinearGaugeComponent.prototype, \"subvalues\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [String])\r\n], DxLinearGaugeComponent.prototype, \"theme\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"title\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"tooltip\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number),\r\n    __metadata(\"design:paramtypes\", [Number])\r\n], DxLinearGaugeComponent.prototype, \"value\", null);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], DxLinearGaugeComponent.prototype, \"valueIndicator\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onDisposing\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onDrawn\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onExported\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onExporting\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onFileSaving\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onIncidentOccurred\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onInitialized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onOptionChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onTooltipHidden\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"onTooltipShown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"animationChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"containerBackgroundColorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"disabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"elementAttrChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"exportChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"geometryChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"marginChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"pathModifiedChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"rangeContainerChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"rtlEnabledChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"scaleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"sizeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"subvalueIndicatorChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"subvaluesChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"themeChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"titleChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"tooltipChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"valueChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], DxLinearGaugeComponent.prototype, \"valueIndicatorChange\", void 0);\r\nDxLinearGaugeComponent = __decorate([\r\n    Component({\r\n        selector: 'dx-linear-gauge',\r\n        template: '',\r\n        providers: [\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            IterableDifferHelper\r\n        ],\r\n        styles: [' :host {  display: block; }']\r\n    }),\r\n    __param(7, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n        WatcherHelper,\r\n        IterableDifferHelper,\r\n        NestedOptionHost,\r\n        TransferState, Object])\r\n], DxLinearGaugeComponent);\r\nlet DxLinearGaugeModule = class DxLinearGaugeModule {\r\n};\r\nDxLinearGaugeModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            DxoAnimationModule,\r\n            DxoExportModule,\r\n            DxoGeometryModule,\r\n            DxoLoadingIndicatorModule,\r\n            DxoFontModule,\r\n            DxoMarginModule,\r\n            DxoRangeContainerModule,\r\n            DxiRangeModule,\r\n            DxoWidthModule,\r\n            DxoScaleModule,\r\n            DxoLabelModule,\r\n            DxoFormatModule,\r\n            DxoMinorTickModule,\r\n            DxoTickModule,\r\n            DxoSizeModule,\r\n            DxoSubvalueIndicatorModule,\r\n            DxoTextModule,\r\n            DxoTitleModule,\r\n            DxoSubtitleModule,\r\n            DxoTooltipModule,\r\n            DxoBorderModule,\r\n            DxoShadowModule,\r\n            DxoValueIndicatorModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ],\r\n        declarations: [\r\n            DxLinearGaugeComponent\r\n        ],\r\n        exports: [\r\n            DxLinearGaugeComponent,\r\n            DxoAnimationModule,\r\n            DxoExportModule,\r\n            DxoGeometryModule,\r\n            DxoLoadingIndicatorModule,\r\n            DxoFontModule,\r\n            DxoMarginModule,\r\n            DxoRangeContainerModule,\r\n            DxiRangeModule,\r\n            DxoWidthModule,\r\n            DxoScaleModule,\r\n            DxoLabelModule,\r\n            DxoFormatModule,\r\n            DxoMinorTickModule,\r\n            DxoTickModule,\r\n            DxoSizeModule,\r\n            DxoSubvalueIndicatorModule,\r\n            DxoTextModule,\r\n            DxoTitleModule,\r\n            DxoSubtitleModule,\r\n            DxoTooltipModule,\r\n            DxoBorderModule,\r\n            DxoShadowModule,\r\n            DxoValueIndicatorModule,\r\n            DxTemplateModule\r\n        ]\r\n    })\r\n], DxLinearGaugeModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxLinearGaugeComponent, DxLinearGaugeModule };\n"]}