/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class NgxPrintDirective {
    constructor() {
        this._printStyle = [];
        /**
         *
         *
         * \@memberof NgxPrintDirective
         */
        this.useExistingCss = false;
        /**
         *
         *
         * @return html for the given tag
         *
         * \@memberof NgxPrintDirective
         */
        this._styleSheetFile = '';
    }
    /**
     *
     *
     * \@memberof NgxPrintDirective
     * @param {?} values
     * @return {?}
     */
    set printStyle(values) {
        for (let key in values) {
            if (values.hasOwnProperty(key)) {
                this._printStyle.push((key + JSON.stringify(values[key])).replace(/['"]+/g, ''));
            }
        }
        this.returnStyleValues();
    }
    /**
     *
     *
     * \@memberof NgxPrintDirective
     * @return {?} the string that create the stylesheet which will be injected
     * later within <style></style> tag.
     *
     * -join/replace to transform an array objects to css-styled string
     *
     */
    returnStyleValues() {
        return `<style> ${this._printStyle.join(' ').replace(/,/g, ';')} </style>`;
    }
    /**
     * \@memberof NgxPrintDirective
     * @param {?} cssList
     * @return {?}
     */
    set styleSheetFile(cssList) {
        /** @type {?} */
        let linkTagFn = (/**
         * @param {?} cssFileName
         * @return {?}
         */
        cssFileName => `<link rel="stylesheet" type="text/css" href="${cssFileName}">`);
        if (cssList.indexOf(',') !== -1) {
            /** @type {?} */
            const valueArr = cssList.split(',');
            for (let val of valueArr) {
                this._styleSheetFile = this._styleSheetFile + linkTagFn(val);
            }
        }
        else {
            this._styleSheetFile = linkTagFn(cssList);
        }
    }
    /**
     * @private
     * @return {?} string which contains the link tags containing the css which will
     * be injected later within <head></head> tag.
     *
     */
    returnStyleSheetLinkTags() {
        return this._styleSheetFile;
    }
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    getElementTag(tag) {
        /** @type {?} */
        const html = [];
        /** @type {?} */
        const elements = document.getElementsByTagName(tag);
        for (let index = 0; index < elements.length; index++) {
            html.push(elements[index].outerHTML);
        }
        return html.join('\r\n');
    }
    /**
     *
     *
     * \@memberof NgxPrintDirective
     * @return {?}
     */
    print() {
        /** @type {?} */
        let printContents;
        /** @type {?} */
        let popupWin;
        /** @type {?} */
        let styles = '';
        /** @type {?} */
        let links = '';
        if (this.useExistingCss) {
            styles = this.getElementTag('style');
            links = this.getElementTag('link');
        }
        printContents = document.getElementById(this.printSectionId).innerHTML;
        popupWin = window.open("", "_blank", "top=0,left=0,height=100%,width=auto");
        popupWin.document.open();
        popupWin.document.write(`
      <html>
        <head>
          <title>${this.printTitle ? this.printTitle : ""}</title>
          ${this.returnStyleValues()}
          ${this.returnStyleSheetLinkTags()}
          ${styles}
          ${links}
        </head>
    <body onload="window.print();window.close()">${printContents}</body>
      </html>`);
        popupWin.document.close();
    }
}
NgxPrintDirective.ɵfac = function NgxPrintDirective_Factory(t) { return new (t || NgxPrintDirective)(); };
NgxPrintDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxPrintDirective, selectors: [["button", "ngxPrint", ""]], hostBindings: function NgxPrintDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NgxPrintDirective_click_HostBindingHandler($event) { return ctx.print(); });
    } }, inputs: { useExistingCss: "useExistingCss", printStyle: "printStyle", styleSheetFile: "styleSheetFile", printSectionId: "printSectionId", printTitle: "printTitle" } });
NgxPrintDirective.propDecorators = {
    printSectionId: [{ type: Input }],
    printTitle: [{ type: Input }],
    useExistingCss: [{ type: Input }],
    printStyle: [{ type: Input }],
    styleSheetFile: [{ type: Input }],
    print: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPrintDirective, [{
        type: Directive,
        args: [{
                selector: "button[ngxPrint]"
            }]
    }], function () { return []; }, { useExistingCss: [{
            type: Input
        }], printStyle: [{
            type: Input
        }], styleSheetFile: [{
            type: Input
        }], print: [{
            type: HostListener,
            args: ['click']
        }], printSectionId: [{
            type: Input
        }], printTitle: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    NgxPrintDirective.prototype._printStyle;
    /**
     *
     *
     * \@memberof NgxPrintDirective
     * @type {?}
     */
    NgxPrintDirective.prototype.printSectionId;
    /**
     *
     *
     * \@memberof NgxPrintDirective
     * @type {?}
     */
    NgxPrintDirective.prototype.printTitle;
    /**
     *
     *
     * \@memberof NgxPrintDirective
     * @type {?}
     */
    NgxPrintDirective.prototype.useExistingCss;
    /**
     *
     *
     * \@return html for the given tag
     *
     * \@memberof NgxPrintDirective
     * @type {?}
     * @private
     */
    NgxPrintDirective.prototype._styleSheetFile;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL25neC1wcmludC9lc20yMDE1L2xpYi9uZ3gtcHJpbnQuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBZ0lDLGdMQUtDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBUUEiLCJmaWxlIjoibmd4LXByaW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuZXhwb3J0IGNsYXNzIE5neFByaW50RGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fcHJpbnRTdHlsZSA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICpcbiAgICAgICAgICogXFxAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXNlRXhpc3RpbmdDc3MgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4gaHRtbCBmb3IgdGhlIGdpdmVuIHRhZ1xuICAgICAgICAgKlxuICAgICAgICAgKiBcXEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fc3R5bGVTaGVldEZpbGUgPSAnJztcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIFxcQG1lbWJlcm9mIE5neFByaW50RGlyZWN0aXZlXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHNldCBwcmludFN0eWxlKHZhbHVlcykge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmludFN0eWxlLnB1c2goKGtleSArIEpTT04uc3RyaW5naWZ5KHZhbHVlc1trZXldKSkucmVwbGFjZSgvWydcIl0rL2csICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXR1cm5TdHlsZVZhbHVlcygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogXFxAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcbiAgICAgKiBAcmV0dXJuIHs/fSB0aGUgc3RyaW5nIHRoYXQgY3JlYXRlIHRoZSBzdHlsZXNoZWV0IHdoaWNoIHdpbGwgYmUgaW5qZWN0ZWRcbiAgICAgKiBsYXRlciB3aXRoaW4gPHN0eWxlPjwvc3R5bGU+IHRhZy5cbiAgICAgKlxuICAgICAqIC1qb2luL3JlcGxhY2UgdG8gdHJhbnNmb3JtIGFuIGFycmF5IG9iamVjdHMgdG8gY3NzLXN0eWxlZCBzdHJpbmdcbiAgICAgKlxuICAgICAqL1xuICAgIHJldHVyblN0eWxlVmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gYDxzdHlsZT4gJHt0aGlzLl9wcmludFN0eWxlLmpvaW4oJyAnKS5yZXBsYWNlKC8sL2csICc7Jyl9IDwvc3R5bGU+YDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogXFxAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcbiAgICAgKiBAcGFyYW0gez99IGNzc0xpc3RcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHNldCBzdHlsZVNoZWV0RmlsZShjc3NMaXN0KSB7XG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgbGV0IGxpbmtUYWdGbiA9ICgvKipcbiAgICAgICAgICogQHBhcmFtIHs/fSBjc3NGaWxlTmFtZVxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgY3NzRmlsZU5hbWUgPT4gYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBocmVmPVwiJHtjc3NGaWxlTmFtZX1cIj5gKTtcbiAgICAgICAgaWYgKGNzc0xpc3QuaW5kZXhPZignLCcpICE9PSAtMSkge1xuICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICAgICAgY29uc3QgdmFsdWVBcnIgPSBjc3NMaXN0LnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBmb3IgKGxldCB2YWwgb2YgdmFsdWVBcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZVNoZWV0RmlsZSA9IHRoaXMuX3N0eWxlU2hlZXRGaWxlICsgbGlua1RhZ0ZuKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdHlsZVNoZWV0RmlsZSA9IGxpbmtUYWdGbihjc3NMaXN0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4gez99IHN0cmluZyB3aGljaCBjb250YWlucyB0aGUgbGluayB0YWdzIGNvbnRhaW5pbmcgdGhlIGNzcyB3aGljaCB3aWxsXG4gICAgICogYmUgaW5qZWN0ZWQgbGF0ZXIgd2l0aGluIDxoZWFkPjwvaGVhZD4gdGFnLlxuICAgICAqXG4gICAgICovXG4gICAgcmV0dXJuU3R5bGVTaGVldExpbmtUYWdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3R5bGVTaGVldEZpbGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHs/fSB0YWdcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGdldEVsZW1lbnRUYWcodGFnKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgY29uc3QgaHRtbCA9IFtdO1xuICAgICAgICAvKiogQHR5cGUgez99ICovXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnKTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGVsZW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgaHRtbC5wdXNoKGVsZW1lbnRzW2luZGV4XS5vdXRlckhUTUwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodG1sLmpvaW4oJ1xcclxcbicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogXFxAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHByaW50KCkge1xuICAgICAgICAvKiogQHR5cGUgez99ICovXG4gICAgICAgIGxldCBwcmludENvbnRlbnRzO1xuICAgICAgICAvKiogQHR5cGUgez99ICovXG4gICAgICAgIGxldCBwb3B1cFdpbjtcbiAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICBsZXQgc3R5bGVzID0gJyc7XG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgbGV0IGxpbmtzID0gJyc7XG4gICAgICAgIGlmICh0aGlzLnVzZUV4aXN0aW5nQ3NzKSB7XG4gICAgICAgICAgICBzdHlsZXMgPSB0aGlzLmdldEVsZW1lbnRUYWcoJ3N0eWxlJyk7XG4gICAgICAgICAgICBsaW5rcyA9IHRoaXMuZ2V0RWxlbWVudFRhZygnbGluaycpO1xuICAgICAgICB9XG4gICAgICAgIHByaW50Q29udGVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnByaW50U2VjdGlvbklkKS5pbm5lckhUTUw7XG4gICAgICAgIHBvcHVwV2luID0gd2luZG93Lm9wZW4oXCJcIiwgXCJfYmxhbmtcIiwgXCJ0b3A9MCxsZWZ0PTAsaGVpZ2h0PTEwMCUsd2lkdGg9YXV0b1wiKTtcbiAgICAgICAgcG9wdXBXaW4uZG9jdW1lbnQub3BlbigpO1xuICAgICAgICBwb3B1cFdpbi5kb2N1bWVudC53cml0ZShgXG4gICAgICA8aHRtbD5cbiAgICAgICAgPGhlYWQ+XG4gICAgICAgICAgPHRpdGxlPiR7dGhpcy5wcmludFRpdGxlID8gdGhpcy5wcmludFRpdGxlIDogXCJcIn08L3RpdGxlPlxuICAgICAgICAgICR7dGhpcy5yZXR1cm5TdHlsZVZhbHVlcygpfVxuICAgICAgICAgICR7dGhpcy5yZXR1cm5TdHlsZVNoZWV0TGlua1RhZ3MoKX1cbiAgICAgICAgICAke3N0eWxlc31cbiAgICAgICAgICAke2xpbmtzfVxuICAgICAgICA8L2hlYWQ+XG4gICAgPGJvZHkgb25sb2FkPVwid2luZG93LnByaW50KCk7d2luZG93LmNsb3NlKClcIj4ke3ByaW50Q29udGVudHN9PC9ib2R5PlxuICAgICAgPC9odG1sPmApO1xuICAgICAgICBwb3B1cFdpbi5kb2N1bWVudC5jbG9zZSgpO1xuICAgIH1cbn1cbk5neFByaW50RGlyZWN0aXZlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IFwiYnV0dG9uW25neFByaW50XVwiXG4gICAgICAgICAgICB9LF0gfVxuXTtcbk5neFByaW50RGlyZWN0aXZlLnByb3BEZWNvcmF0b3JzID0ge1xuICAgIHByaW50U2VjdGlvbklkOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBwcmludFRpdGxlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB1c2VFeGlzdGluZ0NzczogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgcHJpbnRTdHlsZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgc3R5bGVTaGVldEZpbGU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHByaW50OiBbeyB0eXBlOiBIb3N0TGlzdGVuZXIsIGFyZ3M6IFsnY2xpY2snLF0gfV1cbn07XG5pZiAoZmFsc2UpIHtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmd4UHJpbnREaXJlY3RpdmUucHJvdG90eXBlLl9wcmludFN0eWxlO1xuICAgIC8qKlxuICAgICAqXG4gICAgICpcbiAgICAgKiBcXEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE5neFByaW50RGlyZWN0aXZlLnByb3RvdHlwZS5wcmludFNlY3Rpb25JZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogXFxAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBOZ3hQcmludERpcmVjdGl2ZS5wcm90b3R5cGUucHJpbnRUaXRsZTtcbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogXFxAbWVtYmVyb2YgTmd4UHJpbnREaXJlY3RpdmVcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBOZ3hQcmludERpcmVjdGl2ZS5wcm90b3R5cGUudXNlRXhpc3RpbmdDc3M7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIFxcQHJldHVybiBodG1sIGZvciB0aGUgZ2l2ZW4gdGFnXG4gICAgICpcbiAgICAgKiBcXEBtZW1iZXJvZiBOZ3hQcmludERpcmVjdGl2ZVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgTmd4UHJpbnREaXJlY3RpdmUucHJvdG90eXBlLl9zdHlsZVNoZWV0RmlsZTtcbn1cbiJdfQ==