/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class LoadingBarService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.progress$ = (/** @type {?} */ ((new Subject()).pipe(debounceTime(0))));
        this._pendingRequests = 0;
        this._value = 0;
    }
    /**
     * @param {?=} initialValue
     * @return {?}
     */
    start(initialValue = 2) {
        ++this._pendingRequests;
        if (this._value === 0 || this._pendingRequests === 1) {
            // Inserts the loading bar element into the dom, and sets it to 2%
            this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);
        }
    }
    /**
     * @return {?}
     */
    stop() {
        this.complete();
        while (this._pendingRequests > 0) {
            this.complete();
        }
    }
    /**
     * @return {?}
     */
    complete() {
        if (this._pendingRequests === 0 && this._value === 0) {
            return;
        }
        if (this._pendingRequests > 0) {
            --this._pendingRequests;
        }
        if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {
            if (this._value !== 100) {
                this.set(100);
            }
            // Attempt to aggregate any start/complete calls within 500ms:
            setTimeout(() => this.set(0), 500);
        }
    }
    /**
     * Set the loading bar's width to a certain percent.
     *
     * @param {?} n any value between 0 and 100
     * @return {?}
     */
    set(n) {
        if (!isPlatformBrowser(this.platformId)) {
            this._pendingRequests = 0;
            return;
        }
        if (n === 0 && this._pendingRequests > 0) {
            n = 2;
        }
        this._value = n;
        this.progress$.next(n);
        if (this._pendingRequests === 0) {
            return;
        }
        // increment loadingbar to give the illusion that there is always
        // progress but make sure to cancel the previous timeouts so we don't
        // have multiple incs running at the same time.
        clearTimeout(this._incTimeout);
        if (this._value > 0 && this._value < 100) {
            this._incTimeout = setTimeout(() => this.increment(), 250);
        }
    }
    /**
     * Increments the loading bar by a random amount
     * but slows down as it progresses
     * @param {?=} rnd
     * @return {?}
     */
    increment(rnd = 0) {
        if (rnd > 0) {
            this.set(this._value + rnd);
        }
        /** @type {?} */
        const stat = this._value;
        if (stat >= 0 && stat < 25) {
            // Start out between 3 - 6% increments
            rnd = (Math.random() * (5 - 3 + 1) + 3);
        }
        else if (stat >= 25 && stat < 65) {
            // increment between 0 - 3%
            rnd = (Math.random() * 3);
        }
        else if (stat >= 65 && stat < 90) {
            // increment between 0 - 2%
            rnd = (Math.random() * 2);
        }
        else if (stat >= 90 && stat < 99) {
            // finally, increment it .5 %
            rnd = 0.5;
        }
        else {
            // after 99%, don't increment:
            rnd = 0;
        }
        this.set(this._value + rnd);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.progress$.complete();
    }
}
LoadingBarService.ɵfac = function LoadingBarService_Factory(t) { return new (t || LoadingBarService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
LoadingBarService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LoadingBarService, factory: LoadingBarService.ɵfac, providedIn: 'root' });
/** @nocollapse */
LoadingBarService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ LoadingBarService.ngInjectableDef = i0.defineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(i0.inject(i0.PLATFORM_ID)); }, token: LoadingBarService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    LoadingBarService.prototype.progress$;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype._pendingRequests;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype._value;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype._incTimeout;
    /**
     * @type {?}
     * @private
     */
    LoadingBarService.prototype.platformId;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL0BuZ3gtbG9hZGluZy1iYXIvY29yZS9lc20yMDE1L2xvYWRpbmctYmFyLnNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1IQyxzSUFHQzs7Ozs7Ozs7Ozs7O2tDQUt1TyIsImZpbGUiOiJsb2FkaW5nLWJhci5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUExBVEZPUk1fSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmV4cG9ydCBjbGFzcyBMb2FkaW5nQmFyU2VydmljZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwbGF0Zm9ybUlkXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocGxhdGZvcm1JZCkge1xuICAgICAgICB0aGlzLnBsYXRmb3JtSWQgPSBwbGF0Zm9ybUlkO1xuICAgICAgICB0aGlzLnByb2dyZXNzJCA9ICgvKiogQHR5cGUgez99ICovICgobmV3IFN1YmplY3QoKSkucGlwZShkZWJvdW5jZVRpbWUoMCkpKSk7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA9IDA7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/PX0gaW5pdGlhbFZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBzdGFydChpbml0aWFsVmFsdWUgPSAyKSB7XG4gICAgICAgICsrdGhpcy5fcGVuZGluZ1JlcXVlc3RzO1xuICAgICAgICBpZiAodGhpcy5fdmFsdWUgPT09IDAgfHwgdGhpcy5fcGVuZGluZ1JlcXVlc3RzID09PSAxKSB7XG4gICAgICAgICAgICAvLyBJbnNlcnRzIHRoZSBsb2FkaW5nIGJhciBlbGVtZW50IGludG8gdGhlIGRvbSwgYW5kIHNldHMgaXQgdG8gMiVcbiAgICAgICAgICAgIHRoaXMuc2V0KHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA9PT0gMSAmJiB0aGlzLl92YWx1ZSA+IDAgPyB0aGlzLl92YWx1ZSA6IGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgICAgIHdoaWxlICh0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA9PT0gMCAmJiB0aGlzLl92YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPiAwKSB7XG4gICAgICAgICAgICAtLXRoaXMuX3BlbmRpbmdSZXF1ZXN0cztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ1JlcXVlc3RzID09PSAwIHx8ICh0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPT09IDAgJiYgdGhpcy5fdmFsdWUgPiAwKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlICE9PSAxMDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldCgxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byBhZ2dyZWdhdGUgYW55IHN0YXJ0L2NvbXBsZXRlIGNhbGxzIHdpdGhpbiA1MDBtczpcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXQoMCksIDUwMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsb2FkaW5nIGJhcidzIHdpZHRoIHRvIGEgY2VydGFpbiBwZXJjZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/fSBuIGFueSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgc2V0KG4pIHtcbiAgICAgICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuID09PSAwICYmIHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA+IDApIHtcbiAgICAgICAgICAgIG4gPSAyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gbjtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyQubmV4dChuKTtcbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdSZXF1ZXN0cyA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluY3JlbWVudCBsb2FkaW5nYmFyIHRvIGdpdmUgdGhlIGlsbHVzaW9uIHRoYXQgdGhlcmUgaXMgYWx3YXlzXG4gICAgICAgIC8vIHByb2dyZXNzIGJ1dCBtYWtlIHN1cmUgdG8gY2FuY2VsIHRoZSBwcmV2aW91cyB0aW1lb3V0cyBzbyB3ZSBkb24ndFxuICAgICAgICAvLyBoYXZlIG11bHRpcGxlIGluY3MgcnVubmluZyBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5faW5jVGltZW91dCk7XG4gICAgICAgIGlmICh0aGlzLl92YWx1ZSA+IDAgJiYgdGhpcy5fdmFsdWUgPCAxMDApIHtcbiAgICAgICAgICAgIHRoaXMuX2luY1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaW5jcmVtZW50KCksIDI1MCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jcmVtZW50cyB0aGUgbG9hZGluZyBiYXIgYnkgYSByYW5kb20gYW1vdW50XG4gICAgICogYnV0IHNsb3dzIGRvd24gYXMgaXQgcHJvZ3Jlc3Nlc1xuICAgICAqIEBwYXJhbSB7Pz19IHJuZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgaW5jcmVtZW50KHJuZCA9IDApIHtcbiAgICAgICAgaWYgKHJuZCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KHRoaXMuX3ZhbHVlICsgcm5kKTtcbiAgICAgICAgfVxuICAgICAgICAvKiogQHR5cGUgez99ICovXG4gICAgICAgIGNvbnN0IHN0YXQgPSB0aGlzLl92YWx1ZTtcbiAgICAgICAgaWYgKHN0YXQgPj0gMCAmJiBzdGF0IDwgMjUpIHtcbiAgICAgICAgICAgIC8vIFN0YXJ0IG91dCBiZXR3ZWVuIDMgLSA2JSBpbmNyZW1lbnRzXG4gICAgICAgICAgICBybmQgPSAoTWF0aC5yYW5kb20oKSAqICg1IC0gMyArIDEpICsgMyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdCA+PSAyNSAmJiBzdGF0IDwgNjUpIHtcbiAgICAgICAgICAgIC8vIGluY3JlbWVudCBiZXR3ZWVuIDAgLSAzJVxuICAgICAgICAgICAgcm5kID0gKE1hdGgucmFuZG9tKCkgKiAzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ID49IDY1ICYmIHN0YXQgPCA5MCkge1xuICAgICAgICAgICAgLy8gaW5jcmVtZW50IGJldHdlZW4gMCAtIDIlXG4gICAgICAgICAgICBybmQgPSAoTWF0aC5yYW5kb20oKSAqIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXQgPj0gOTAgJiYgc3RhdCA8IDk5KSB7XG4gICAgICAgICAgICAvLyBmaW5hbGx5LCBpbmNyZW1lbnQgaXQgLjUgJVxuICAgICAgICAgICAgcm5kID0gMC41O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gYWZ0ZXIgOTklLCBkb24ndCBpbmNyZW1lbnQ6XG4gICAgICAgICAgICBybmQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0KHRoaXMuX3ZhbHVlICsgcm5kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyQuY29tcGxldGUoKTtcbiAgICB9XG59XG5Mb2FkaW5nQmFyU2VydmljZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5Mb2FkaW5nQmFyU2VydmljZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IE9iamVjdCwgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbUExBVEZPUk1fSUQsXSB9XSB9XG5dO1xuLyoqIEBub2NvbGxhcHNlICovIExvYWRpbmdCYXJTZXJ2aWNlLm5nSW5qZWN0YWJsZURlZiA9IGkwLmRlZmluZUluamVjdGFibGUoeyBmYWN0b3J5OiBmdW5jdGlvbiBMb2FkaW5nQmFyU2VydmljZV9GYWN0b3J5KCkgeyByZXR1cm4gbmV3IExvYWRpbmdCYXJTZXJ2aWNlKGkwLmluamVjdChpMC5QTEFURk9STV9JRCkpOyB9LCB0b2tlbjogTG9hZGluZ0JhclNlcnZpY2UsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIExvYWRpbmdCYXJTZXJ2aWNlLnByb3RvdHlwZS5wcm9ncmVzcyQ7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBMb2FkaW5nQmFyU2VydmljZS5wcm90b3R5cGUuX3BlbmRpbmdSZXF1ZXN0cztcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIExvYWRpbmdCYXJTZXJ2aWNlLnByb3RvdHlwZS5fdmFsdWU7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBMb2FkaW5nQmFyU2VydmljZS5wcm90b3R5cGUuX2luY1RpbWVvdXQ7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBMb2FkaW5nQmFyU2VydmljZS5wcm90b3R5cGUucGxhdGZvcm1JZDtcbn1cbiJdfQ==