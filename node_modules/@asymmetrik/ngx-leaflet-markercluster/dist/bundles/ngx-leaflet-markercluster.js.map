{"version":3,"sources":["/Users/pnsb/Desktop/MOA - E-KANMAS/node_modules/@asymmetrik/ngx-leaflet-markercluster/dist/bundles/ngx-leaflet-markercluster.js"],"names":[],"mappings":"AAAA;;uIAE2E;mGAClB;kFACnB;gCACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDAuDkC,AAIzC;;;;;;;;;;;;;;;;;;oBAC+B;;;;;;;;;;;;;;;;;yCAiBD;;;;;;;;;;gDAMF","file":"ngx-leaflet-markercluster.js","sourcesContent":["/*! @asymmetrik/ngx-leaflet-markercluster - 3.0.0 - Copyright Asymmetrik, Ltd. 2007-2019 - All Rights Reserved. + */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@asymmetrik/ngx-leaflet'), require('leaflet'), require('leaflet.markercluster')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@asymmetrik/ngx-leaflet', 'leaflet', 'leaflet.markercluster'], factory) :\n    (global = global || self, factory(global.ngxLeafletMarkercluster = {}, global.ng.core, global.ngxLeaflet, global.L));\n}(this, function (exports, core, ngxLeaflet, L) { 'use strict';\n\n    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n    };\n    var LeafletMarkerClusterDirective = /** @class */ (function () {\n        function LeafletMarkerClusterDirective(leafletDirective) {\n            // Hexbin data binding\n            this.markerData = [];\n            // Fired when the marker cluster is created\n            this.markerClusterReady = new core.EventEmitter();\n            this.leafletDirective = new ngxLeaflet.LeafletDirectiveWrapper(leafletDirective);\n        }\n        LeafletMarkerClusterDirective.prototype.ngOnInit = function () {\n            this.leafletDirective.init();\n            var map = this.leafletDirective.getMap();\n            this.markerClusterGroup = L.markerClusterGroup(this.markerClusterOptions);\n            // Add the marker cluster group to the map\n            this.markerClusterGroup.addTo(map);\n            // Set the data now that the markerClusterGroup exists\n            this.setData(this.markerData);\n            // Fire the ready event\n            this.markerClusterReady.emit(this.markerClusterGroup);\n        };\n        LeafletMarkerClusterDirective.prototype.ngOnChanges = function (changes) {\n            // Set the new data\n            if (changes['markerData']) {\n                this.setData(this.markerData);\n            }\n        };\n        LeafletMarkerClusterDirective.prototype.setData = function (layers) {\n            // Ignore until the markerClusterGroup exists\n            if (null != this.markerClusterGroup) {\n                this.markerClusterGroup.clearLayers();\n                this.markerClusterGroup.addLayers(layers);\n            }\n        };\n        __decorate([\n            core.Input('leafletMarkerCluster'),\n            __metadata(\"design:type\", Array)\n        ], LeafletMarkerClusterDirective.prototype, \"markerData\", void 0);\n        __decorate([\n            core.Input('leafletMarkerClusterOptions'),\n            __metadata(\"design:type\", Object)\n        ], LeafletMarkerClusterDirective.prototype, \"markerClusterOptions\", void 0);\n        __decorate([\n            core.Output('leafletMarkerClusterReady'),\n            __metadata(\"design:type\", core.EventEmitter)\n        ], LeafletMarkerClusterDirective.prototype, \"markerClusterReady\", void 0);\n        LeafletMarkerClusterDirective = __decorate([\n            core.Directive({\n                selector: '[leafletMarkerCluster]',\n            }),\n            __metadata(\"design:paramtypes\", [ngxLeaflet.LeafletDirective])\n        ], LeafletMarkerClusterDirective);\n        return LeafletMarkerClusterDirective;\n    }());\n\n    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var LeafletMarkerClusterModule = /** @class */ (function () {\n        function LeafletMarkerClusterModule() {\n        }\n        LeafletMarkerClusterModule_1 = LeafletMarkerClusterModule;\n        LeafletMarkerClusterModule.forRoot = function () {\n            return { ngModule: LeafletMarkerClusterModule_1, providers: [] };\n        };\n        var LeafletMarkerClusterModule_1;\n        LeafletMarkerClusterModule = LeafletMarkerClusterModule_1 = __decorate$1([\n            core.NgModule({\n                exports: [LeafletMarkerClusterDirective],\n                declarations: [LeafletMarkerClusterDirective]\n            })\n        ], LeafletMarkerClusterModule);\n        return LeafletMarkerClusterModule;\n    }());\n\n    exports.LeafletMarkerClusterDirective = LeafletMarkerClusterDirective;\n    exports.LeafletMarkerClusterModule = LeafletMarkerClusterModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}