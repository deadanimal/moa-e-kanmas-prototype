/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, SkipSelf, Input, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiGroupComponent } from './group-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
let DxoPropertiesPanelComponent = class DxoPropertiesPanelComponent extends NestedOption {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get collapsible() {
        return this._getOption('collapsible');
    }
    set collapsible(value) {
        this._setOption('collapsible', value);
    }
    get enabled() {
        return this._getOption('enabled');
    }
    set enabled(value) {
        this._setOption('enabled', value);
    }
    get groups() {
        return this._getOption('groups');
    }
    set groups(value) {
        this._setOption('groups', value);
    }
    get _optionPath() {
        return 'propertiesPanel';
    }
    get groupsChildren() {
        return this._getOption('groups');
    }
    set groupsChildren(value) {
        this.setChildren('groups', value);
    }
    ngOnDestroy() {
        this._addRemovedOption(this._fullOptionPath().slice(0, -1));
    }
};
DxoPropertiesPanelComponent.ɵfac = function DxoPropertiesPanelComponent_Factory(t) { return new (t || DxoPropertiesPanelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxoPropertiesPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoPropertiesPanelComponent, selectors: [["dxo-properties-panel"]], contentQueries: function DxoPropertiesPanelComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiGroupComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupsChildren = _t);
    } }, inputs: { collapsible: "collapsible", enabled: "enabled", groups: "groups" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPropertiesPanelComponent_Template(rf, ctx) { }, styles: [""] });
DxoPropertiesPanelComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], DxoPropertiesPanelComponent.prototype, "collapsible", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], DxoPropertiesPanelComponent.prototype, "enabled", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], DxoPropertiesPanelComponent.prototype, "groups", null);
tslib_1.__decorate([
    ContentChildren(forwardRef(() => DxiGroupComponent)),
    tslib_1.__metadata("design:type", QueryList),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxoPropertiesPanelComponent.prototype, "groupsChildren", null);
DxoPropertiesPanelComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxoPropertiesPanelComponent);
export { DxoPropertiesPanelComponent };
let DxoPropertiesPanelModule = class DxoPropertiesPanelModule {
};
DxoPropertiesPanelModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoPropertiesPanelModule });
DxoPropertiesPanelModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoPropertiesPanelModule_Factory(t) { return new (t || DxoPropertiesPanelModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoPropertiesPanelComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-properties-panel',
                template: '',
                providers: [NestedOptionHost],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, { collapsible: [{
            type: Input
        }], enabled: [{
            type: Input
        }], groups: [{
            type: Input
        }], groupsChildren: [{
            type: ContentChildren,
            args: [forwardRef(() => DxiGroupComponent)]
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoPropertiesPanelModule, { declarations: [DxoPropertiesPanelComponent], exports: [DxoPropertiesPanelComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoPropertiesPanelModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoPropertiesPanelComponent
                ],
                exports: [
                    DxoPropertiesPanelComponent
                ]
            }]
    }], null, null); })();
export { DxoPropertiesPanelModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL2RldmV4dHJlbWUtYW5ndWxhci9lc20yMDE1L3VpL25lc3RlZC9wcm9wZXJ0aWVzLXBhbmVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4UkFvQ0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0RBeUJnRCxBQU8vQzs7Ozs7Ozs7O0VBT0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFVMkIiLCJmaWxlIjoicHJvcGVydGllcy1wYW5lbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcclxuICogVmVyc2lvbjogMTkuMi42XHJcbiAqIEJ1aWxkIGRhdGU6IFRodSBKYW4gMzAgMjAyMFxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKlxyXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXHJcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXHJcbiAqXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxyXG4gKi9cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXHJcbmltcG9ydCB7IENvbXBvbmVudCwgTmdNb2R1bGUsIEhvc3QsIFNraXBTZWxmLCBJbnB1dCwgQ29udGVudENoaWxkcmVuLCBmb3J3YXJkUmVmLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmVzdGVkT3B0aW9uSG9zdCwgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5lc3RlZE9wdGlvbiB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRHhpR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL2dyb3VwLWR4aSc7XHJcbmxldCBEeG9Qcm9wZXJ0aWVzUGFuZWxDb21wb25lbnQgPSBjbGFzcyBEeG9Qcm9wZXJ0aWVzUGFuZWxDb21wb25lbnQgZXh0ZW5kcyBOZXN0ZWRPcHRpb24ge1xyXG4gICAgY29uc3RydWN0b3IocGFyZW50T3B0aW9uSG9zdCwgb3B0aW9uSG9zdCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgcGFyZW50T3B0aW9uSG9zdC5zZXROZXN0ZWRPcHRpb24odGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KHRoaXMsIHRoaXMuX2Z1bGxPcHRpb25QYXRoLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNvbGxhcHNpYmxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2NvbGxhcHNpYmxlJyk7XHJcbiAgICB9XHJcbiAgICBzZXQgY29sbGFwc2libGUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2NvbGxhcHNpYmxlJywgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGVuYWJsZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignZW5hYmxlZCcpO1xyXG4gICAgfVxyXG4gICAgc2V0IGVuYWJsZWQodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2VuYWJsZWQnLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBnZXQgZ3JvdXBzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2dyb3VwcycpO1xyXG4gICAgfVxyXG4gICAgc2V0IGdyb3Vwcyh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX3NldE9wdGlvbignZ3JvdXBzJywgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9vcHRpb25QYXRoKCkge1xyXG4gICAgICAgIHJldHVybiAncHJvcGVydGllc1BhbmVsJztcclxuICAgIH1cclxuICAgIGdldCBncm91cHNDaGlsZHJlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdncm91cHMnKTtcclxuICAgIH1cclxuICAgIHNldCBncm91cHNDaGlsZHJlbih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuc2V0Q2hpbGRyZW4oJ2dyb3VwcycsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuX2FkZFJlbW92ZWRPcHRpb24odGhpcy5fZnVsbE9wdGlvblBhdGgoKS5zbGljZSgwLCAtMSkpO1xyXG4gICAgfVxyXG59O1xyXG5EeG9Qcm9wZXJ0aWVzUGFuZWxDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXHJcbiAgICB7IHR5cGU6IE5lc3RlZE9wdGlvbkhvc3QsIGRlY29yYXRvcnM6IFt7IHR5cGU6IFNraXBTZWxmIH0sIHsgdHlwZTogSG9zdCB9XSB9LFxyXG4gICAgeyB0eXBlOiBOZXN0ZWRPcHRpb25Ib3N0LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBIb3N0IH1dIH1cclxuXTtcclxudHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCksXHJcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKSxcclxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtCb29sZWFuXSlcclxuXSwgRHhvUHJvcGVydGllc1BhbmVsQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjb2xsYXBzaWJsZVwiLCBudWxsKTtcclxudHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCksXHJcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKSxcclxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtCb29sZWFuXSlcclxuXSwgRHhvUHJvcGVydGllc1BhbmVsQ29tcG9uZW50LnByb3RvdHlwZSwgXCJlbmFibGVkXCIsIG51bGwpO1xyXG50c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoKSxcclxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEFycmF5KSxcclxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtBcnJheV0pXHJcbl0sIER4b1Byb3BlcnRpZXNQYW5lbENvbXBvbmVudC5wcm90b3R5cGUsIFwiZ3JvdXBzXCIsIG51bGwpO1xyXG50c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgQ29udGVudENoaWxkcmVuKGZvcndhcmRSZWYoKCkgPT4gRHhpR3JvdXBDb21wb25lbnQpKSxcclxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFF1ZXJ5TGlzdCksXHJcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuXSwgRHhvUHJvcGVydGllc1BhbmVsQ29tcG9uZW50LnByb3RvdHlwZSwgXCJncm91cHNDaGlsZHJlblwiLCBudWxsKTtcclxuRHhvUHJvcGVydGllc1BhbmVsQ29tcG9uZW50ID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgIENvbXBvbmVudCh7XHJcbiAgICAgICAgc2VsZWN0b3I6ICdkeG8tcHJvcGVydGllcy1wYW5lbCcsXHJcbiAgICAgICAgdGVtcGxhdGU6ICcnLFxyXG4gICAgICAgIHByb3ZpZGVyczogW05lc3RlZE9wdGlvbkhvc3RdLFxyXG4gICAgICAgIHN0eWxlczogWycnXVxyXG4gICAgfSksXHJcbiAgICB0c2xpYl8xLl9fcGFyYW0oMCwgU2tpcFNlbGYoKSksIHRzbGliXzEuX19wYXJhbSgwLCBIb3N0KCkpLFxyXG4gICAgdHNsaWJfMS5fX3BhcmFtKDEsIEhvc3QoKSksXHJcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbTmVzdGVkT3B0aW9uSG9zdCxcclxuICAgICAgICBOZXN0ZWRPcHRpb25Ib3N0XSlcclxuXSwgRHhvUHJvcGVydGllc1BhbmVsQ29tcG9uZW50KTtcclxuZXhwb3J0IHsgRHhvUHJvcGVydGllc1BhbmVsQ29tcG9uZW50IH07XHJcbmxldCBEeG9Qcm9wZXJ0aWVzUGFuZWxNb2R1bGUgPSBjbGFzcyBEeG9Qcm9wZXJ0aWVzUGFuZWxNb2R1bGUge1xyXG59O1xyXG5EeG9Qcm9wZXJ0aWVzUGFuZWxNb2R1bGUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgTmdNb2R1bGUoe1xyXG4gICAgICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgICAgICAgICBEeG9Qcm9wZXJ0aWVzUGFuZWxDb21wb25lbnRcclxuICAgICAgICBdLFxyXG4gICAgICAgIGV4cG9ydHM6IFtcclxuICAgICAgICAgICAgRHhvUHJvcGVydGllc1BhbmVsQ29tcG9uZW50XHJcbiAgICAgICAgXSxcclxuICAgIH0pXHJcbl0sIER4b1Byb3BlcnRpZXNQYW5lbE1vZHVsZSk7XHJcbmV4cG9ydCB7IER4b1Byb3BlcnRpZXNQYW5lbE1vZHVsZSB9O1xyIl19