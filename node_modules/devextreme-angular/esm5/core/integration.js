/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
import { NgModule, Inject, NgZone, Optional } from '@angular/core';
import { XhrFactory } from '@angular/common/http';
import * as httpRequest from 'devextreme/core/http_request';
import { DOCUMENT } from '@angular/common';
import * as domAdapter from 'devextreme/core/dom_adapter';
import * as readyCallbacks from 'devextreme/core/utils/ready_callbacks';
import * as eventsEngine from 'devextreme/events/core/events_engine';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
var outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
var insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
var originalAdd;
var callbacks = [];
readyCallbacks.inject({
    add: function (callback) {
        originalAdd = this.callBase.bind(this);
        callbacks.push(callback);
    }
});
var doInjections = function (document, ngZone, xhrFactory) {
    domAdapter.inject({
        _document: document,
        listen: function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var eventName = args[1];
            if (outsideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.runOutsideAngular(function () {
                    return _this.callBase.apply(_this, args);
                });
            }
            if (ngZone.isStable && insideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.run(function () {
                    return _this.callBase.apply(_this, args);
                });
            }
            return this.callBase.apply(this, args);
        },
        isElementNode: function (element) {
            return element && element.nodeType === 1;
        },
        isTextNode: function (element) {
            return element && element.nodeType === 3;
        },
        isDocument: function (element) {
            return element && element.nodeType === 9;
        }
    });
    httpRequest.inject({
        getXhr: function () {
            if (!xhrFactory) {
                return this.callBase.apply(this);
            }
            var _xhr = xhrFactory.build();
            if (!('withCredentials' in _xhr)) {
                _xhr['withCredentials'] = false;
            }
            return _xhr;
        }
    });
    var runReadyCallbacksInZone = function () {
        ngZone.run(function () {
            eventsEngine.set({});
            callbacks.forEach(function (callback) { return originalAdd.call(null, callback); });
            callbacks = [];
            readyCallbacks.fire();
        });
    };
    runReadyCallbacksInZone();
    doInjections = runReadyCallbacksInZone;
};
var ɵ0 = doInjections;
var DxIntegrationModule = /** @class */ (function () {
    function DxIntegrationModule(document, ngZone, xhrFactory) {
        doInjections(document, ngZone, xhrFactory);
    }
    DxIntegrationModule.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: NgZone },
        { type: XhrFactory, decorators: [{ type: Optional }] }
    ]; };
    DxIntegrationModule = tslib_1.__decorate([ tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [Object, NgZone, XhrFactory])
    ], DxIntegrationModule);
DxIntegrationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxIntegrationModule });
DxIntegrationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxIntegrationModule_Factory(t) { return new (t || DxIntegrationModule)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory, 8)); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxIntegrationModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.XhrFactory, decorators: [{
                type: Optional
            }] }]; }, null); })();
    return DxIntegrationModule;
}());
export { DxIntegrationModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL2RldmV4dHJlbWUtYW5ndWxhci9lc201L2NvcmUvaW50ZWdyYXRpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4Q0EyRThDLEFBRXZDOzs7Ozs7Ozs7Ozs7O2tDQUVxQiIsImZpbGUiOiJpbnRlZ3JhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcclxuICogVmVyc2lvbjogMTkuMi42XHJcbiAqIEJ1aWxkIGRhdGU6IFRodSBKYW4gMzAgMjAyMFxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKlxyXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXHJcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXHJcbiAqXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxyXG4gKi9cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgTmdNb2R1bGUsIEluamVjdCwgTmdab25lLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBYaHJGYWN0b3J5IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgKiBhcyBodHRwUmVxdWVzdCBmcm9tICdkZXZleHRyZW1lL2NvcmUvaHR0cF9yZXF1ZXN0JztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgKiBhcyBkb21BZGFwdGVyIGZyb20gJ2RldmV4dHJlbWUvY29yZS9kb21fYWRhcHRlcic7XHJcbmltcG9ydCAqIGFzIHJlYWR5Q2FsbGJhY2tzIGZyb20gJ2RldmV4dHJlbWUvY29yZS91dGlscy9yZWFkeV9jYWxsYmFja3MnO1xyXG5pbXBvcnQgKiBhcyBldmVudHNFbmdpbmUgZnJvbSAnZGV2ZXh0cmVtZS9ldmVudHMvY29yZS9ldmVudHNfZW5naW5lJztcclxudmFyIG91dHNpZGVab25lRXZlbnRzID0gWydtb3VzZW1vdmUnLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0J107XHJcbnZhciBpbnNpZGVab25lRXZlbnRzID0gWydtb3VzZXVwJywgJ2NsaWNrJywgJ21vdXNlZG93bicsICd0cmFuc2l0aW9uZW5kJywgJ3doZWVsJ107XHJcbnZhciBvcmlnaW5hbEFkZDtcclxudmFyIGNhbGxiYWNrcyA9IFtdO1xyXG5yZWFkeUNhbGxiYWNrcy5pbmplY3Qoe1xyXG4gICAgYWRkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICBvcmlnaW5hbEFkZCA9IHRoaXMuY2FsbEJhc2UuYmluZCh0aGlzKTtcclxuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICB9XHJcbn0pO1xyXG52YXIgZG9JbmplY3Rpb25zID0gZnVuY3Rpb24gKGRvY3VtZW50LCBuZ1pvbmUsIHhockZhY3RvcnkpIHtcclxuICAgIGRvbUFkYXB0ZXIuaW5qZWN0KHtcclxuICAgICAgICBfZG9jdW1lbnQ6IGRvY3VtZW50LFxyXG4gICAgICAgIGxpc3RlbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSBhcmdzWzFdO1xyXG4gICAgICAgICAgICBpZiAob3V0c2lkZVpvbmVFdmVudHMuaW5kZXhPZihldmVudE5hbWUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhbGxCYXNlLmFwcGx5KF90aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuZ1pvbmUuaXNTdGFibGUgJiYgaW5zaWRlWm9uZUV2ZW50cy5pbmRleE9mKGV2ZW50TmFtZSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmdab25lLnJ1bihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhbGxCYXNlLmFwcGx5KF90aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGxCYXNlLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNFbGVtZW50Tm9kZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzVGV4dE5vZGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0RvY3VtZW50OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSA5O1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaHR0cFJlcXVlc3QuaW5qZWN0KHtcclxuICAgICAgICBnZXRYaHI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF4aHJGYWN0b3J5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxsQmFzZS5hcHBseSh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgX3hociA9IHhockZhY3RvcnkuYnVpbGQoKTtcclxuICAgICAgICAgICAgaWYgKCEoJ3dpdGhDcmVkZW50aWFscycgaW4gX3hocikpIHtcclxuICAgICAgICAgICAgICAgIF94aHJbJ3dpdGhDcmVkZW50aWFscyddID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF94aHI7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB2YXIgcnVuUmVhZHlDYWxsYmFja3NJblpvbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbmdab25lLnJ1bihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGV2ZW50c0VuZ2luZS5zZXQoe30pO1xyXG4gICAgICAgICAgICBjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIG9yaWdpbmFsQWRkLmNhbGwobnVsbCwgY2FsbGJhY2spOyB9KTtcclxuICAgICAgICAgICAgY2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgICAgIHJlYWR5Q2FsbGJhY2tzLmZpcmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBydW5SZWFkeUNhbGxiYWNrc0luWm9uZSgpO1xyXG4gICAgZG9JbmplY3Rpb25zID0gcnVuUmVhZHlDYWxsYmFja3NJblpvbmU7XHJcbn07XHJcbnZhciDJtTAgPSBkb0luamVjdGlvbnM7XHJcbnZhciBEeEludGVncmF0aW9uTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHhJbnRlZ3JhdGlvbk1vZHVsZShkb2N1bWVudCwgbmdab25lLCB4aHJGYWN0b3J5KSB7XHJcbiAgICAgICAgZG9JbmplY3Rpb25zKGRvY3VtZW50LCBuZ1pvbmUsIHhockZhY3RvcnkpO1xyXG4gICAgfVxyXG4gICAgRHhJbnRlZ3JhdGlvbk1vZHVsZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcclxuICAgICAgICB7IHR5cGU6IHVuZGVmaW5lZCwgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbRE9DVU1FTlQsXSB9XSB9LFxyXG4gICAgICAgIHsgdHlwZTogTmdab25lIH0sXHJcbiAgICAgICAgeyB0eXBlOiBYaHJGYWN0b3J5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9XSB9XHJcbiAgICBdOyB9O1xyXG4gICAgRHhJbnRlZ3JhdGlvbk1vZHVsZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgTmdNb2R1bGUoe30pLFxyXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgwLCBJbmplY3QoRE9DVU1FTlQpKSwgdHNsaWJfMS5fX3BhcmFtKDIsIE9wdGlvbmFsKCkpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtPYmplY3QsIE5nWm9uZSwgWGhyRmFjdG9yeV0pXHJcbiAgICBdLCBEeEludGVncmF0aW9uTW9kdWxlKTtcclxuICAgIHJldHVybiBEeEludGVncmF0aW9uTW9kdWxlO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEeEludGVncmF0aW9uTW9kdWxlIH07XHJcbmV4cG9ydCB7IMm1MCB9O1xyIl19