/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { SelectionType } from '../../types/selection.type';
import { selectRowsBetween, selectRows } from '../../utils/selection';
import { Keys } from '../../utils/keys';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
export function Model() { }
if (false) {
    /** @type {?} */
    Model.prototype.type;
    /** @type {?} */
    Model.prototype.event;
    /** @type {?} */
    Model.prototype.row;
    /** @type {?} */
    Model.prototype.rowElement;
    /** @type {?} */
    Model.prototype.cellElement;
    /** @type {?} */
    Model.prototype.cellIndex;
}
var DataTableSelectionComponent = /** @class */ (function () {
    function DataTableSelectionComponent() {
        this.activate = new EventEmitter();
        this.select = new EventEmitter();
    }
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} row
     * @return {?}
     */
    DataTableSelectionComponent.prototype.selectRow = /**
     * @param {?} event
     * @param {?} index
     * @param {?} row
     * @return {?}
     */
    function (event, index, row) {
        var _a;
        if (!this.selectEnabled)
            return;
        /** @type {?} */
        var chkbox = this.selectionType === SelectionType.checkbox;
        /** @type {?} */
        var multi = this.selectionType === SelectionType.multi;
        /** @type {?} */
        var multiClick = this.selectionType === SelectionType.multiClick;
        /** @type {?} */
        var selected = [];
        if (multi || chkbox || multiClick) {
            if (event.shiftKey) {
                selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));
            }
            else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {
                selected = selectRows(tslib_1.__spread(this.selected), row, this.getRowSelectedIdx.bind(this));
            }
            else {
                selected = selectRows([], row, this.getRowSelectedIdx.bind(this));
            }
        }
        else {
            selected = selectRows([], row, this.getRowSelectedIdx.bind(this));
        }
        if (typeof this.selectCheck === 'function') {
            selected = selected.filter(this.selectCheck.bind(this));
        }
        this.selected.splice(0, this.selected.length);
        (_a = this.selected).push.apply(_a, tslib_1.__spread(selected));
        this.prevIndex = index;
        this.select.emit({
            selected: selected
        });
    };
    /**
     * @param {?} model
     * @param {?} index
     * @return {?}
     */
    DataTableSelectionComponent.prototype.onActivate = /**
     * @param {?} model
     * @param {?} index
     * @return {?}
     */
    function (model, index) {
        var type = model.type, event = model.event, row = model.row;
        /** @type {?} */
        var chkbox = this.selectionType === SelectionType.checkbox;
        /** @type {?} */
        var select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');
        if (select) {
            this.selectRow(event, index, row);
        }
        else if (type === 'keydown') {
            if (((/** @type {?} */ (event))).keyCode === Keys.return) {
                this.selectRow(event, index, row);
            }
            else {
                this.onKeyboardFocus(model);
            }
        }
        this.activate.emit(model);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    DataTableSelectionComponent.prototype.onKeyboardFocus = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        var keyCode = (/** @type {?} */ (model.event)).keyCode;
        /** @type {?} */
        var shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;
        if (shouldFocus) {
            /** @type {?} */
            var isCellSelection = this.selectionType === SelectionType.cell;
            if (!model.cellElement || !isCellSelection) {
                this.focusRow(model.rowElement, keyCode);
            }
            else if (isCellSelection) {
                this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);
            }
        }
    };
    /**
     * @param {?} rowElement
     * @param {?} keyCode
     * @return {?}
     */
    DataTableSelectionComponent.prototype.focusRow = /**
     * @param {?} rowElement
     * @param {?} keyCode
     * @return {?}
     */
    function (rowElement, keyCode) {
        /** @type {?} */
        var nextRowElement = this.getPrevNextRow(rowElement, keyCode);
        if (nextRowElement)
            nextRowElement.focus();
    };
    /**
     * @param {?} rowElement
     * @param {?} keyCode
     * @return {?}
     */
    DataTableSelectionComponent.prototype.getPrevNextRow = /**
     * @param {?} rowElement
     * @param {?} keyCode
     * @return {?}
     */
    function (rowElement, keyCode) {
        /** @type {?} */
        var parentElement = rowElement.parentElement;
        if (parentElement) {
            /** @type {?} */
            var focusElement = void 0;
            if (keyCode === Keys.up) {
                focusElement = parentElement.previousElementSibling;
            }
            else if (keyCode === Keys.down) {
                focusElement = parentElement.nextElementSibling;
            }
            if (focusElement && focusElement.children.length) {
                return focusElement.children[0];
            }
        }
    };
    /**
     * @param {?} cellElement
     * @param {?} rowElement
     * @param {?} keyCode
     * @param {?} cellIndex
     * @return {?}
     */
    DataTableSelectionComponent.prototype.focusCell = /**
     * @param {?} cellElement
     * @param {?} rowElement
     * @param {?} keyCode
     * @param {?} cellIndex
     * @return {?}
     */
    function (cellElement, rowElement, keyCode, cellIndex) {
        /** @type {?} */
        var nextCellElement;
        if (keyCode === Keys.left) {
            nextCellElement = cellElement.previousElementSibling;
        }
        else if (keyCode === Keys.right) {
            nextCellElement = cellElement.nextElementSibling;
        }
        else if (keyCode === Keys.up || keyCode === Keys.down) {
            /** @type {?} */
            var nextRowElement = this.getPrevNextRow(rowElement, keyCode);
            if (nextRowElement) {
                /** @type {?} */
                var children = nextRowElement.getElementsByClassName('datatable-body-cell');
                if (children.length)
                    nextCellElement = children[cellIndex];
            }
        }
        if (nextCellElement)
            nextCellElement.focus();
    };
    /**
     * @param {?} row
     * @return {?}
     */
    DataTableSelectionComponent.prototype.getRowSelected = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return this.getRowSelectedIdx(row, this.selected) > -1;
    };
    /**
     * @param {?} row
     * @param {?} selected
     * @return {?}
     */
    DataTableSelectionComponent.prototype.getRowSelectedIdx = /**
     * @param {?} row
     * @param {?} selected
     * @return {?}
     */
    function (row, selected) {
        var _this = this;
        if (!selected || !selected.length)
            return -1;
        /** @type {?} */
        var rowId = this.rowIdentity(row);
        return selected.findIndex((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            /** @type {?} */
            var id = _this.rowIdentity(r);
            return id === rowId;
        }));
    };
    DataTableSelectionComponent.propDecorators = {
        rows: [{ type: Input }],
        selected: [{ type: Input }],
        selectEnabled: [{ type: Input }],
        selectionType: [{ type: Input }],
        rowIdentity: [{ type: Input }],
        selectCheck: [{ type: Input }],
        activate: [{ type: Output }],
        select: [{ type: Output }]
    };
DataTableSelectionComponent.ɵfac = function DataTableSelectionComponent_Factory(t) { return new (t || DataTableSelectionComponent)(); };
DataTableSelectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableSelectionComponent, selectors: [["datatable-selection"]], inputs: { rows: "rows", selected: "selected", selectEnabled: "selectEnabled", selectionType: "selectionType", rowIdentity: "rowIdentity", selectCheck: "selectCheck" }, outputs: { activate: "activate", select: "select" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DataTableSelectionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableSelectionComponent, [{
        type: Component,
        args: [{
                selector: 'datatable-selection',
                template: "\n    <ng-content></ng-content>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { activate: [{
            type: Output
        }], select: [{
            type: Output
        }], rows: [{
            type: Input
        }], selected: [{
            type: Input
        }], selectEnabled: [{
            type: Input
        }], selectionType: [{
            type: Input
        }], rowIdentity: [{
            type: Input
        }], selectCheck: [{
            type: Input
        }] }); })();
    return DataTableSelectionComponent;
}());
export { DataTableSelectionComponent };
if (false) {
    /** @type {?} */
    DataTableSelectionComponent.prototype.rows;
    /** @type {?} */
    DataTableSelectionComponent.prototype.selected;
    /** @type {?} */
    DataTableSelectionComponent.prototype.selectEnabled;
    /** @type {?} */
    DataTableSelectionComponent.prototype.selectionType;
    /** @type {?} */
    DataTableSelectionComponent.prototype.rowIdentity;
    /** @type {?} */
    DataTableSelectionComponent.prototype.selectCheck;
    /** @type {?} */
    DataTableSelectionComponent.prototype.activate;
    /** @type {?} */
    DataTableSelectionComponent.prototype.select;
    /** @type {?} */
    DataTableSelectionComponent.prototype.prevIndex;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,