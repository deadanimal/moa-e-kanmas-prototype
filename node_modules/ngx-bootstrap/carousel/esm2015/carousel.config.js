/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class CarouselConfig {
    constructor() {
        /* Default interval of auto changing of slides */
        this.interval = 5000;
        /* Is loop of auto changing of slides can be paused */
        this.noPause = false;
        /* Is slides can wrap from the last to the first slide */
        this.noWrap = false;
        /* Show carousel-indicators */
        this.showIndicators = true;
        /* Slides can be paused on focus */
        this.pauseOnFocus = false;
        /* If `true` - carousel indicators indicate slides chunks works ONLY if singleSlideOffset = FALSE */
        this.indicatorsByChunk = false;
        /* If value more then 1 — carousel works in multilist mode */
        this.itemsPerSlide = 1;
        /* If `true` — carousel shifts by one element. By default carousel shifts by number
            of visible elements (itemsPerSlide field) */
        this.singleSlideOffset = false;
    }
}
CarouselConfig.ɵfac = function CarouselConfig_Factory(t) { return new (t || CarouselConfig)(); };
CarouselConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CarouselConfig, factory: CarouselConfig.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CarouselConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    CarouselConfig.prototype.interval;
    /** @type {?} */
    CarouselConfig.prototype.noPause;
    /** @type {?} */
    CarouselConfig.prototype.noWrap;
    /** @type {?} */
    CarouselConfig.prototype.showIndicators;
    /** @type {?} */
    CarouselConfig.prototype.pauseOnFocus;
    /** @type {?} */
    CarouselConfig.prototype.indicatorsByChunk;
    /** @type {?} */
    CarouselConfig.prototype.itemsPerSlide;
    /** @type {?} */
    CarouselConfig.prototype.singleSlideOffset;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbnNiL0Rlc2t0b3AvTU9BIC0gRS1LQU5NQVMvbm9kZV9tb2R1bGVzL25neC1ib290c3RyYXAvY2Fyb3VzZWwvZXNtMjAxNS9jYXJvdXNlbC5jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBb0JDOzs7Z0RBR0MiLCJmaWxlIjoiY2Fyb3VzZWwuY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBjbGFzcyBDYXJvdXNlbENvbmZpZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qIERlZmF1bHQgaW50ZXJ2YWwgb2YgYXV0byBjaGFuZ2luZyBvZiBzbGlkZXMgKi9cbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IDUwMDA7XG4gICAgICAgIC8qIElzIGxvb3Agb2YgYXV0byBjaGFuZ2luZyBvZiBzbGlkZXMgY2FuIGJlIHBhdXNlZCAqL1xuICAgICAgICB0aGlzLm5vUGF1c2UgPSBmYWxzZTtcbiAgICAgICAgLyogSXMgc2xpZGVzIGNhbiB3cmFwIGZyb20gdGhlIGxhc3QgdG8gdGhlIGZpcnN0IHNsaWRlICovXG4gICAgICAgIHRoaXMubm9XcmFwID0gZmFsc2U7XG4gICAgICAgIC8qIFNob3cgY2Fyb3VzZWwtaW5kaWNhdG9ycyAqL1xuICAgICAgICB0aGlzLnNob3dJbmRpY2F0b3JzID0gdHJ1ZTtcbiAgICAgICAgLyogU2xpZGVzIGNhbiBiZSBwYXVzZWQgb24gZm9jdXMgKi9cbiAgICAgICAgdGhpcy5wYXVzZU9uRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgLyogSWYgYHRydWVgIC0gY2Fyb3VzZWwgaW5kaWNhdG9ycyBpbmRpY2F0ZSBzbGlkZXMgY2h1bmtzIHdvcmtzIE9OTFkgaWYgc2luZ2xlU2xpZGVPZmZzZXQgPSBGQUxTRSAqL1xuICAgICAgICB0aGlzLmluZGljYXRvcnNCeUNodW5rID0gZmFsc2U7XG4gICAgICAgIC8qIElmIHZhbHVlIG1vcmUgdGhlbiAxIOKAlCBjYXJvdXNlbCB3b3JrcyBpbiBtdWx0aWxpc3QgbW9kZSAqL1xuICAgICAgICB0aGlzLml0ZW1zUGVyU2xpZGUgPSAxO1xuICAgICAgICAvKiBJZiBgdHJ1ZWAg4oCUIGNhcm91c2VsIHNoaWZ0cyBieSBvbmUgZWxlbWVudC4gQnkgZGVmYXVsdCBjYXJvdXNlbCBzaGlmdHMgYnkgbnVtYmVyXG4gICAgICAgICAgICBvZiB2aXNpYmxlIGVsZW1lbnRzIChpdGVtc1BlclNsaWRlIGZpZWxkKSAqL1xuICAgICAgICB0aGlzLnNpbmdsZVNsaWRlT2Zmc2V0ID0gZmFsc2U7XG4gICAgfVxufVxuQ2Fyb3VzZWxDb25maWcuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuXTtcbmlmIChmYWxzZSkge1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBDYXJvdXNlbENvbmZpZy5wcm90b3R5cGUuaW50ZXJ2YWw7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIENhcm91c2VsQ29uZmlnLnByb3RvdHlwZS5ub1BhdXNlO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBDYXJvdXNlbENvbmZpZy5wcm90b3R5cGUubm9XcmFwO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBDYXJvdXNlbENvbmZpZy5wcm90b3R5cGUuc2hvd0luZGljYXRvcnM7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIENhcm91c2VsQ29uZmlnLnByb3RvdHlwZS5wYXVzZU9uRm9jdXM7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIENhcm91c2VsQ29uZmlnLnByb3RvdHlwZS5pbmRpY2F0b3JzQnlDaHVuaztcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgQ2Fyb3VzZWxDb25maWcucHJvdG90eXBlLml0ZW1zUGVyU2xpZGU7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIENhcm91c2VsQ29uZmlnLnByb3RvdHlwZS5zaW5nbGVTbGlkZU9mZnNldDtcbn1cbiJdfQ==